
ide_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800a13c  0800a13c  0001a13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2d0  0800a2d0  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2d0  0800a2d0  0001a2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2d8  0800a2d8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2d8  0800a2d8  0001a2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2dc  0800a2dc  0001a2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a2e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b14  20000098  0800a378  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bac  0800a378  00021bac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b637  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a3d  00000000  00000000  0004b6ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b70  00000000  00000000  00051140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001908  00000000  00000000  00052cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026bce  00000000  00000000  000545b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000267f3  00000000  00000000  0007b186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d798f  00000000  00000000  000a1979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00179308  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007684  00000000  00000000  0017935c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a124 	.word	0x0800a124

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800a124 	.word	0x0800a124

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <i2c_init>:
#include "cmsis_os.h"
#define pressure_sensor_addr 0x6D  //address of sensor


void i2c_init(I2C_HandleTypeDef device)
{
 8000568:	b084      	sub	sp, #16
 800056a:	b580      	push	{r7, lr}
 800056c:	af00      	add	r7, sp, #0
 800056e:	f107 0c08 	add.w	ip, r7, #8
 8000572:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	dev = device;
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <i2c_init+0x2c>)
 8000578:	4618      	mov	r0, r3
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	224c      	movs	r2, #76	; 0x4c
 8000580:	4619      	mov	r1, r3
 8000582:	f008 fded 	bl	8009160 <memcpy>
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800058e:	b004      	add	sp, #16
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20001010 	.word	0x20001010

08000598 <write_reg>:



static void write_reg(I2C_HandleTypeDef bus, uint16_t reg, uint8_t *data)
{
 8000598:	b084      	sub	sp, #16
 800059a:	b580      	push	{r7, lr}
 800059c:	b084      	sub	sp, #16
 800059e:	af04      	add	r7, sp, #16
 80005a0:	f107 0c08 	add.w	ip, r7, #8
 80005a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_I2C_Mem_Write(&bus, (pressure_sensor_addr << 1), reg, I2C_MEMADD_SIZE_8BIT, data, 1, 0xff);
 80005a8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80005ac:	23ff      	movs	r3, #255	; 0xff
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2301      	movs	r3, #1
 80005ba:	21da      	movs	r1, #218	; 0xda
 80005bc:	f107 0008 	add.w	r0, r7, #8
 80005c0:	f003 f9a8 	bl	8003914 <HAL_I2C_Mem_Write>
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005cc:	b004      	add	sp, #16
 80005ce:	4770      	bx	lr

080005d0 <read_regs>:

static uint8_t read_regs(I2C_HandleTypeDef bus, uint16_t reg)
{
 80005d0:	b084      	sub	sp, #16
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b086      	sub	sp, #24
 80005d6:	af04      	add	r7, sp, #16
 80005d8:	f107 0c10 	add.w	ip, r7, #16
 80005dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t buf;
	HAL_I2C_Mem_Read(&bus, ((pressure_sensor_addr << 1)+1), reg, I2C_MEMADD_SIZE_8BIT, &buf, 1, 0xff);
 80005e0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80005e4:	23ff      	movs	r3, #255	; 0xff
 80005e6:	9302      	str	r3, [sp, #8]
 80005e8:	2301      	movs	r3, #1
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	1dfb      	adds	r3, r7, #7
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2301      	movs	r3, #1
 80005f2:	21db      	movs	r1, #219	; 0xdb
 80005f4:	f107 0010 	add.w	r0, r7, #16
 80005f8:	f003 faa0 	bl	8003b3c <HAL_I2C_Mem_Read>
    return buf;
 80005fc:	79fb      	ldrb	r3, [r7, #7]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000608:	b004      	add	sp, #16
 800060a:	4770      	bx	lr

0800060c <air_pressure>:

int32_t* air_pressure(){
 800060c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060e:	b095      	sub	sp, #84	; 0x54
 8000610:	af12      	add	r7, sp, #72	; 0x48
    // read the calibrate value and write back after &0xFD
    data_buf = 0x00;
 8000612:	4b93      	ldr	r3, [pc, #588]	; (8000860 <air_pressure+0x254>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
    data_buf = read_regs(dev, 0xA5);
 8000618:	4e92      	ldr	r6, [pc, #584]	; (8000864 <air_pressure+0x258>)
 800061a:	23a5      	movs	r3, #165	; 0xa5
 800061c:	930f      	str	r3, [sp, #60]	; 0x3c
 800061e:	466d      	mov	r5, sp
 8000620:	f106 0410 	add.w	r4, r6, #16
 8000624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800062a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800062c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800062e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000630:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000634:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000638:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800063c:	f7ff ffc8 	bl	80005d0 <read_regs>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b86      	ldr	r3, [pc, #536]	; (8000860 <air_pressure+0x254>)
 8000646:	701a      	strb	r2, [r3, #0]
    //rt_kprintf("data_buf is %x \r\n", data_buf);
    data_buf =  data_buf & 0xFD;
 8000648:	4b85      	ldr	r3, [pc, #532]	; (8000860 <air_pressure+0x254>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	f023 0302 	bic.w	r3, r3, #2
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b83      	ldr	r3, [pc, #524]	; (8000860 <air_pressure+0x254>)
 8000654:	701a      	strb	r2, [r3, #0]
    write_reg(dev, 0xA5, &data_buf);
 8000656:	4e83      	ldr	r6, [pc, #524]	; (8000864 <air_pressure+0x258>)
 8000658:	4b81      	ldr	r3, [pc, #516]	; (8000860 <air_pressure+0x254>)
 800065a:	9310      	str	r3, [sp, #64]	; 0x40
 800065c:	23a5      	movs	r3, #165	; 0xa5
 800065e:	930f      	str	r3, [sp, #60]	; 0x3c
 8000660:	466d      	mov	r5, sp
 8000662:	f106 0410 	add.w	r4, r6, #16
 8000666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800066a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800066c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800066e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000672:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000676:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800067a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800067e:	f7ff ff8b 	bl	8000598 <write_reg>

    cmd_buf = 0x0A; //measure command, once temperature and once pressure
 8000682:	4b79      	ldr	r3, [pc, #484]	; (8000868 <air_pressure+0x25c>)
 8000684:	220a      	movs	r2, #10
 8000686:	701a      	strb	r2, [r3, #0]
    write_reg(dev, 0x30, &cmd_buf);      //send command to 0x30 registor
 8000688:	4e76      	ldr	r6, [pc, #472]	; (8000864 <air_pressure+0x258>)
 800068a:	4b77      	ldr	r3, [pc, #476]	; (8000868 <air_pressure+0x25c>)
 800068c:	9310      	str	r3, [sp, #64]	; 0x40
 800068e:	2330      	movs	r3, #48	; 0x30
 8000690:	930f      	str	r3, [sp, #60]	; 0x3c
 8000692:	466d      	mov	r5, sp
 8000694:	f106 0410 	add.w	r4, r6, #16
 8000698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800069a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800069c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800069e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80006a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80006ac:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80006b0:	f7ff ff72 	bl	8000598 <write_reg>
    osDelay(10);
 80006b4:	200a      	movs	r0, #10
 80006b6:	f007 fb99 	bl	8007dec <osDelay>
    cmd_buf = read_regs(dev, 0x30); //read the status of measurement, cmd_buf & 0x80 == 0 indicates the finish of measurement
 80006ba:	4e6a      	ldr	r6, [pc, #424]	; (8000864 <air_pressure+0x258>)
 80006bc:	2330      	movs	r3, #48	; 0x30
 80006be:	930f      	str	r3, [sp, #60]	; 0x3c
 80006c0:	466d      	mov	r5, sp
 80006c2:	f106 0410 	add.w	r4, r6, #16
 80006c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006d2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80006d6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80006da:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80006de:	f7ff ff77 	bl	80005d0 <read_regs>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b60      	ldr	r3, [pc, #384]	; (8000868 <air_pressure+0x25c>)
 80006e8:	701a      	strb	r2, [r3, #0]
    //rt_kprintf("(cmd_buf & 0x08) is %x \r\n", (cmd_buf & 0x08));
    if((cmd_buf & 0x08) > 0){
 80006ea:	4b5f      	ldr	r3, [pc, #380]	; (8000868 <air_pressure+0x25c>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	f003 0308 	and.w	r3, r3, #8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	dd1c      	ble.n	8000730 <air_pressure+0x124>
        while ((read_regs(dev, 0x30) & 0x08) > 0){
 80006f6:	e002      	b.n	80006fe <air_pressure+0xf2>
            osDelay(10);
 80006f8:	200a      	movs	r0, #10
 80006fa:	f007 fb77 	bl	8007dec <osDelay>
        while ((read_regs(dev, 0x30) & 0x08) > 0){
 80006fe:	4e59      	ldr	r6, [pc, #356]	; (8000864 <air_pressure+0x258>)
 8000700:	2330      	movs	r3, #48	; 0x30
 8000702:	930f      	str	r3, [sp, #60]	; 0x3c
 8000704:	466d      	mov	r5, sp
 8000706:	f106 0410 	add.w	r4, r6, #16
 800070a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800070c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800070e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000716:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800071a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800071e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000722:	f7ff ff55 	bl	80005d0 <read_regs>
 8000726:	4603      	mov	r3, r0
 8000728:	f003 0308 	and.w	r3, r3, #8
 800072c:	2b00      	cmp	r3, #0
 800072e:	dce3      	bgt.n	80006f8 <air_pressure+0xec>
        }
    }
    p1 = read_regs(dev, 0x06);
 8000730:	4e4c      	ldr	r6, [pc, #304]	; (8000864 <air_pressure+0x258>)
 8000732:	2306      	movs	r3, #6
 8000734:	930f      	str	r3, [sp, #60]	; 0x3c
 8000736:	466d      	mov	r5, sp
 8000738:	f106 0410 	add.w	r4, r6, #16
 800073c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800073e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000748:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800074c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000750:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000754:	f7ff ff3c 	bl	80005d0 <read_regs>
 8000758:	4603      	mov	r3, r0
 800075a:	461a      	mov	r2, r3
 800075c:	4b43      	ldr	r3, [pc, #268]	; (800086c <air_pressure+0x260>)
 800075e:	701a      	strb	r2, [r3, #0]
    //rt_kprintf("p1 is %x \r\n", p1);
    p2 = read_regs(dev, 0x07);
 8000760:	4e40      	ldr	r6, [pc, #256]	; (8000864 <air_pressure+0x258>)
 8000762:	2307      	movs	r3, #7
 8000764:	930f      	str	r3, [sp, #60]	; 0x3c
 8000766:	466d      	mov	r5, sp
 8000768:	f106 0410 	add.w	r4, r6, #16
 800076c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800076e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000778:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800077c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000780:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000784:	f7ff ff24 	bl	80005d0 <read_regs>
 8000788:	4603      	mov	r3, r0
 800078a:	461a      	mov	r2, r3
 800078c:	4b38      	ldr	r3, [pc, #224]	; (8000870 <air_pressure+0x264>)
 800078e:	701a      	strb	r2, [r3, #0]
    //rt_kprintf("p2 is %x \r\n", p2);
    p3 = read_regs(dev, 0x08);
 8000790:	4e34      	ldr	r6, [pc, #208]	; (8000864 <air_pressure+0x258>)
 8000792:	2308      	movs	r3, #8
 8000794:	930f      	str	r3, [sp, #60]	; 0x3c
 8000796:	466d      	mov	r5, sp
 8000798:	f106 0410 	add.w	r4, r6, #16
 800079c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800079e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007a8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80007ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80007b0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007b4:	f7ff ff0c 	bl	80005d0 <read_regs>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <air_pressure+0x268>)
 80007be:	701a      	strb	r2, [r3, #0]
    //rt_kprintf("p3 is %x \r\n", p3);
    prs[0] = p1*65536+p2*256+p3;
 80007c0:	4b2a      	ldr	r3, [pc, #168]	; (800086c <air_pressure+0x260>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	4a2a      	ldr	r2, [pc, #168]	; (8000870 <air_pressure+0x264>)
 80007c8:	7812      	ldrb	r2, [r2, #0]
 80007ca:	4413      	add	r3, r2
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	4a29      	ldr	r2, [pc, #164]	; (8000874 <air_pressure+0x268>)
 80007d0:	7812      	ldrb	r2, [r2, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	4a28      	ldr	r2, [pc, #160]	; (8000878 <air_pressure+0x26c>)
 80007d6:	6013      	str	r3, [r2, #0]
    prs[1] = p1;
 80007d8:	4b24      	ldr	r3, [pc, #144]	; (800086c <air_pressure+0x260>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	4b26      	ldr	r3, [pc, #152]	; (8000878 <air_pressure+0x26c>)
 80007e0:	605a      	str	r2, [r3, #4]
    prs[2] = p2;
 80007e2:	4b23      	ldr	r3, [pc, #140]	; (8000870 <air_pressure+0x264>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <air_pressure+0x26c>)
 80007ea:	609a      	str	r2, [r3, #8]
    prs[3] = p3;
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <air_pressure+0x268>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b21      	ldr	r3, [pc, #132]	; (8000878 <air_pressure+0x26c>)
 80007f4:	60da      	str	r2, [r3, #12]
    //printf("reading pressure  \r\n");
   //printf("raw pressure is %d  \r\n", prs[0]);
    int32_t prs_kpa;
    if (prs[0] > 8388608){
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <air_pressure+0x26c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80007fe:	dd16      	ble.n	800082e <air_pressure+0x222>
        //prs_kpa = ((rt_int32_t)prs[0] - 16777216)/32/1000;
        prs[4] = ((int32_t)prs[0] - 16777216)/64/10;//for range is 0-100Kpa, K is 64
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <air_pressure+0x26c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8000808:	4a1c      	ldr	r2, [pc, #112]	; (800087c <air_pressure+0x270>)
 800080a:	fb82 1203 	smull	r1, r2, r2, r3
 800080e:	1212      	asrs	r2, r2, #8
 8000810:	17db      	asrs	r3, r3, #31
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	4a18      	ldr	r2, [pc, #96]	; (8000878 <air_pressure+0x26c>)
 8000816:	6113      	str	r3, [r2, #16]
        prs_kpa = prs[4]/100;
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <air_pressure+0x26c>)
 800081a:	691b      	ldr	r3, [r3, #16]
 800081c:	4a18      	ldr	r2, [pc, #96]	; (8000880 <air_pressure+0x274>)
 800081e:	fb82 1203 	smull	r1, r2, r2, r3
 8000822:	1152      	asrs	r2, r2, #5
 8000824:	17db      	asrs	r3, r3, #31
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]
        //printf("vacuum pressure is dPa \r\n");
        //printf(prs);
        //return prs_kpa;
        return prs;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <air_pressure+0x26c>)
 800082c:	e013      	b.n	8000856 <air_pressure+0x24a>
    }else {
        //prs_kpa = prs/32/1000;
        prs[4] = prs[0]/64/10;
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <air_pressure+0x26c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <air_pressure+0x270>)
 8000834:	fb82 1203 	smull	r1, r2, r2, r3
 8000838:	1212      	asrs	r2, r2, #8
 800083a:	17db      	asrs	r3, r3, #31
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <air_pressure+0x26c>)
 8000840:	6113      	str	r3, [r2, #16]
        prs_kpa = prs[4]/100;
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <air_pressure+0x26c>)
 8000844:	691b      	ldr	r3, [r3, #16]
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <air_pressure+0x274>)
 8000848:	fb82 1203 	smull	r1, r2, r2, r3
 800084c:	1152      	asrs	r2, r2, #5
 800084e:	17db      	asrs	r3, r3, #31
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	607b      	str	r3, [r7, #4]
       // printf("pressure is dPa \r\n");
        //return prs_kpa;
        return prs;// returned in dPa
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <air_pressure+0x26c>)
    }
}
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800085e:	bf00      	nop
 8000860:	20001070 	.word	0x20001070
 8000864:	20001010 	.word	0x20001010
 8000868:	20001088 	.word	0x20001088
 800086c:	20001071 	.word	0x20001071
 8000870:	2000105c 	.word	0x2000105c
 8000874:	20001089 	.word	0x20001089
 8000878:	20001074 	.word	0x20001074
 800087c:	66666667 	.word	0x66666667
 8000880:	51eb851f 	.word	0x51eb851f

08000884 <reply_init>:
#include <cute_dog.h>
#include <data_save.h>
#include <pid_ctl.h>

void reply_init(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
    reply_cmd[0] = 0x5E;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <reply_init+0x44>)
 800088a:	225e      	movs	r2, #94	; 0x5e
 800088c:	701a      	strb	r2, [r3, #0]
    reply_cmd[1] = 0xFF & ser_addr;
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <reply_init+0x48>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <reply_init+0x44>)
 8000896:	705a      	strb	r2, [r3, #1]
    reply_cmd[2] = 0x5EU;
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <reply_init+0x44>)
 800089a:	225e      	movs	r2, #94	; 0x5e
 800089c:	709a      	strb	r2, [r3, #2]
    reply_cmd[3] = 0x5EU;
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <reply_init+0x44>)
 80008a0:	225e      	movs	r2, #94	; 0x5e
 80008a2:	70da      	strb	r2, [r3, #3]
    reply_cmd[4] = 0x5EU;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <reply_init+0x44>)
 80008a6:	225e      	movs	r2, #94	; 0x5e
 80008a8:	711a      	strb	r2, [r3, #4]
    reply_cmd[5] = 0x5EU;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <reply_init+0x44>)
 80008ac:	225e      	movs	r2, #94	; 0x5e
 80008ae:	715a      	strb	r2, [r3, #5]
    reply_cmd[6] = 0x5EU;
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <reply_init+0x44>)
 80008b2:	225e      	movs	r2, #94	; 0x5e
 80008b4:	719a      	strb	r2, [r3, #6]
    reply_cmd[7] = 0x5EU;
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <reply_init+0x44>)
 80008b8:	225e      	movs	r2, #94	; 0x5e
 80008ba:	71da      	strb	r2, [r3, #7]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	200018bc 	.word	0x200018bc
 80008cc:	20001984 	.word	0x20001984

080008d0 <cmd_deliver>:


void cmd_deliver(uint8_t arg[], uint8_t len)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
    HAL_IWDG_Refresh(&hiwdg);
 80008dc:	482e      	ldr	r0, [pc, #184]	; (8000998 <cmd_deliver+0xc8>)
 80008de:	f003 fdd3 	bl	8004488 <HAL_IWDG_Refresh>
    if((arg[2]==0xFFU) && (arg[3]==0xFFU) && (arg[4]==0xFFU) && (arg[5]==0xFFU) && (arg[6]==0xAAU) && (arg[7]==0xBBU))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3302      	adds	r3, #2
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2bff      	cmp	r3, #255	; 0xff
 80008ea:	d11a      	bne.n	8000922 <cmd_deliver+0x52>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3303      	adds	r3, #3
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2bff      	cmp	r3, #255	; 0xff
 80008f4:	d115      	bne.n	8000922 <cmd_deliver+0x52>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3304      	adds	r3, #4
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2bff      	cmp	r3, #255	; 0xff
 80008fe:	d110      	bne.n	8000922 <cmd_deliver+0x52>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3305      	adds	r3, #5
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2bff      	cmp	r3, #255	; 0xff
 8000908:	d10b      	bne.n	8000922 <cmd_deliver+0x52>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3306      	adds	r3, #6
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2baa      	cmp	r3, #170	; 0xaa
 8000912:	d106      	bne.n	8000922 <cmd_deliver+0x52>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3307      	adds	r3, #7
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2bbb      	cmp	r3, #187	; 0xbb
 800091c:	d101      	bne.n	8000922 <cmd_deliver+0x52>
    {
        reset_para();
 800091e:	f000 f8b7 	bl	8000a90 <reset_para>
    }
    switch(arg[2])
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3302      	adds	r3, #2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	3b16      	subs	r3, #22
 800092a:	2b0a      	cmp	r3, #10
 800092c:	d830      	bhi.n	8000990 <cmd_deliver+0xc0>
 800092e:	a201      	add	r2, pc, #4	; (adr r2, 8000934 <cmd_deliver+0x64>)
 8000930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000934:	08000961 	.word	0x08000961
 8000938:	08000969 	.word	0x08000969
 800093c:	08000971 	.word	0x08000971
 8000940:	08000979 	.word	0x08000979
 8000944:	08000991 	.word	0x08000991
 8000948:	08000981 	.word	0x08000981
 800094c:	08000991 	.word	0x08000991
 8000950:	08000991 	.word	0x08000991
 8000954:	08000991 	.word	0x08000991
 8000958:	08000991 	.word	0x08000991
 800095c:	08000989 	.word	0x08000989
    {
        case 0x16: pid_handle(arg); break;
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f000 f901 	bl	8000b68 <pid_handle>
 8000966:	e013      	b.n	8000990 <cmd_deliver+0xc0>
        case 0x17: dz_handle(arg); break;
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f000 fa43 	bl	8000df4 <dz_handle>
 800096e:	e00f      	b.n	8000990 <cmd_deliver+0xc0>
        case 0x18: zz_handle(arg); break;
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 faff 	bl	8000f74 <zz_handle>
 8000976:	e00b      	b.n	8000990 <cmd_deliver+0xc0>
        case 0x19: prs_handle(arg); break;
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f000 fbbb 	bl	80010f4 <prs_handle>
 800097e:	e007      	b.n	8000990 <cmd_deliver+0xc0>
        case 0x1B: addr_handle(arg); break;
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f000 fccd 	bl	8001320 <addr_handle>
 8000986:	e003      	b.n	8000990 <cmd_deliver+0xc0>
        case 0x20: valve_handle(arg); break;
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f000 f807 	bl	800099c <valve_handle>
 800098e:	bf00      	nop
    }

}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20001060 	.word	0x20001060

0800099c <valve_handle>:

void valve_handle(uint8_t arg[])
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	switch(arg[3])
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3303      	adds	r3, #3
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d005      	beq.n	80009ba <valve_handle+0x1e>
 80009ae:	2b80      	cmp	r3, #128	; 0x80
 80009b0:	d107      	bne.n	80009c2 <valve_handle+0x26>
	    {
	        case 0x80: set_valve(arg); break;
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f000 f842 	bl	8000a3c <set_valve>
 80009b8:	e003      	b.n	80009c2 <valve_handle+0x26>
	        case 0x00: report_valve(arg); break;
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f000 f806 	bl	80009cc <report_valve>
 80009c0:	bf00      	nop
	    }
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <report_valve>:

void report_valve()
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
    reply_cmd[1] = 0xFF & ser_addr;
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <report_valve+0x60>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <report_valve+0x64>)
 80009da:	705a      	strb	r2, [r3, #1]
    reply_cmd[2] = 0x20;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <report_valve+0x64>)
 80009de:	2220      	movs	r2, #32
 80009e0:	709a      	strb	r2, [r3, #2]
    reply_cmd[3] = 0x40;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <report_valve+0x64>)
 80009e4:	2240      	movs	r2, #64	; 0x40
 80009e6:	70da      	strb	r2, [r3, #3]
    reply_cmd[4] = valve_stat;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <report_valve+0x68>)
 80009ea:	f993 3000 	ldrsb.w	r3, [r3]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <report_valve+0x64>)
 80009f2:	711a      	strb	r2, [r3, #4]
    reply_cmd[5] = 0x00;
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <report_valve+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	715a      	strb	r2, [r3, #5]
    uint16_t wReCRC = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	80fb      	strh	r3, [r7, #6]
    wReCRC = wCRCCheck_Uart_Data(&reply_cmd[0], 4);
 80009fe:	2104      	movs	r1, #4
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <report_valve+0x64>)
 8000a02:	f001 fbcb 	bl	800219c <wCRCCheck_Uart_Data>
 8000a06:	4603      	mov	r3, r0
 8000a08:	80fb      	strh	r3, [r7, #6]
    reply_cmd[6] = (wReCRC & 0xFFU);
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <report_valve+0x64>)
 8000a10:	719a      	strb	r2, [r3, #6]
    reply_cmd[7] = ((wReCRC >> 8) & 0xFFU);
 8000a12:	88fb      	ldrh	r3, [r7, #6]
 8000a14:	0a1b      	lsrs	r3, r3, #8
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <report_valve+0x64>)
 8000a1c:	71da      	strb	r2, [r3, #7]
    reply(&huart2);
 8000a1e:	4806      	ldr	r0, [pc, #24]	; (8000a38 <report_valve+0x6c>)
 8000a20:	f000 fd32 	bl	8001488 <reply>
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20001984 	.word	0x20001984
 8000a30:	200018bc 	.word	0x200018bc
 8000a34:	2000196e 	.word	0x2000196e
 8000a38:	200018c4 	.word	0x200018c4

08000a3c <set_valve>:

void set_valve(uint8_t arg[])
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	switch(arg[4])
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3304      	adds	r3, #4
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d00d      	beq.n	8000a6a <set_valve+0x2e>
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d117      	bne.n	8000a82 <set_valve+0x46>
	    {
	        case 0x01: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); valve_stat = 1; report_valve(); break;
 8000a52:	2201      	movs	r2, #1
 8000a54:	2110      	movs	r1, #16
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f002 feb3 	bl	80037c4 <HAL_GPIO_WritePin>
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <set_valve+0x50>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	f7ff ffb2 	bl	80009cc <report_valve>
 8000a68:	e00b      	b.n	8000a82 <set_valve+0x46>
	        case 0x00: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); valve_stat = 0; report_valve(); break;
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2110      	movs	r1, #16
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a72:	f002 fea7 	bl	80037c4 <HAL_GPIO_WritePin>
 8000a76:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <set_valve+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	f7ff ffa6 	bl	80009cc <report_valve>
 8000a80:	bf00      	nop
	    }
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000196e 	.word	0x2000196e

08000a90 <reset_para>:



void reset_para()
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0


    kp = 40;
 8000a94:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <reset_para+0xb0>)
 8000a96:	2228      	movs	r2, #40	; 0x28
 8000a98:	601a      	str	r2, [r3, #0]
    ki = 1;
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <reset_para+0xb4>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]
    kd = 70;
 8000aa0:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <reset_para+0xb8>)
 8000aa2:	2246      	movs	r2, #70	; 0x46
 8000aa4:	601a      	str	r2, [r3, #0]
    dz = 5; //hPa
 8000aa6:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <reset_para+0xbc>)
 8000aa8:	2205      	movs	r2, #5
 8000aaa:	601a      	str	r2, [r3, #0]
    zz = 0; //hPa
 8000aac:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <reset_para+0xc0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
    aim_prs = 100; //hPa
 8000ab2:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <reset_para+0xc4>)
 8000ab4:	2264      	movs	r2, #100	; 0x64
 8000ab6:	601a      	str	r2, [r3, #0]
    ser_addr = 0x0A;
 8000ab8:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <reset_para+0xc8>)
 8000aba:	220a      	movs	r2, #10
 8000abc:	601a      	str	r2, [r3, #0]
    para_list[0] = kp;
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <reset_para+0xb0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <reset_para+0xcc>)
 8000ac4:	6013      	str	r3, [r2, #0]
    para_list[1] = ki;
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <reset_para+0xb4>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a24      	ldr	r2, [pc, #144]	; (8000b5c <reset_para+0xcc>)
 8000acc:	6053      	str	r3, [r2, #4]
    para_list[2] = kd;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <reset_para+0xb8>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a22      	ldr	r2, [pc, #136]	; (8000b5c <reset_para+0xcc>)
 8000ad4:	6093      	str	r3, [r2, #8]
    para_list[3] = dz;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <reset_para+0xbc>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a20      	ldr	r2, [pc, #128]	; (8000b5c <reset_para+0xcc>)
 8000adc:	60d3      	str	r3, [r2, #12]
    para_list[4] = zz;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <reset_para+0xc0>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a1e      	ldr	r2, [pc, #120]	; (8000b5c <reset_para+0xcc>)
 8000ae4:	6113      	str	r3, [r2, #16]
    para_list[5] = aim_prs;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <reset_para+0xc4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <reset_para+0xcc>)
 8000aec:	6153      	str	r3, [r2, #20]
    para_list[6] = ser_addr;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <reset_para+0xc8>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a1a      	ldr	r2, [pc, #104]	; (8000b5c <reset_para+0xcc>)
 8000af4:	6193      	str	r3, [r2, #24]
    para_list[7] = 0xCC; //unused
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <reset_para+0xcc>)
 8000af8:	22cc      	movs	r2, #204	; 0xcc
 8000afa:	61da      	str	r2, [r3, #28]
    save_para(para_list, 8);
 8000afc:	2108      	movs	r1, #8
 8000afe:	4817      	ldr	r0, [pc, #92]	; (8000b5c <reset_para+0xcc>)
 8000b00:	f000 fcf2 	bl	80014e8 <save_para>
    pid_init();
 8000b04:	f001 f89a 	bl	8001c3c <pid_init>

    reply_cmd[1] = 0xFF & ser_addr;
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <reset_para+0xc8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <reset_para+0xd0>)
 8000b10:	705a      	strb	r2, [r3, #1]
    reply_cmd[2] = 0xAA;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <reset_para+0xd0>)
 8000b14:	22aa      	movs	r2, #170	; 0xaa
 8000b16:	709a      	strb	r2, [r3, #2]
    reply_cmd[3] = 0xBB;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <reset_para+0xd0>)
 8000b1a:	22bb      	movs	r2, #187	; 0xbb
 8000b1c:	70da      	strb	r2, [r3, #3]
    reply_cmd[4] = 0xCC;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <reset_para+0xd0>)
 8000b20:	22cc      	movs	r2, #204	; 0xcc
 8000b22:	711a      	strb	r2, [r3, #4]
    reply_cmd[5] = 0xDD;
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <reset_para+0xd0>)
 8000b26:	22dd      	movs	r2, #221	; 0xdd
 8000b28:	715a      	strb	r2, [r3, #5]
    reply_cmd[6] = 0xEE;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <reset_para+0xd0>)
 8000b2c:	22ee      	movs	r2, #238	; 0xee
 8000b2e:	719a      	strb	r2, [r3, #6]
    reply_cmd[7] = 0xFF;
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <reset_para+0xd0>)
 8000b32:	22ff      	movs	r2, #255	; 0xff
 8000b34:	71da      	strb	r2, [r3, #7]
    reply(&huart2);
 8000b36:	480b      	ldr	r0, [pc, #44]	; (8000b64 <reset_para+0xd4>)
 8000b38:	f000 fca6 	bl	8001488 <reply>

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20001988 	.word	0x20001988
 8000b44:	2000197c 	.word	0x2000197c
 8000b48:	20001974 	.word	0x20001974
 8000b4c:	20001970 	.word	0x20001970
 8000b50:	20001980 	.word	0x20001980
 8000b54:	20001978 	.word	0x20001978
 8000b58:	20001984 	.word	0x20001984
 8000b5c:	2000194c 	.word	0x2000194c
 8000b60:	200018bc 	.word	0x200018bc
 8000b64:	200018c4 	.word	0x200018c4

08000b68 <pid_handle>:



void pid_handle(uint8_t arg[])
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
    HAL_IWDG_Refresh(&hiwdg);
 8000b70:	481b      	ldr	r0, [pc, #108]	; (8000be0 <pid_handle+0x78>)
 8000b72:	f003 fc89 	bl	8004488 <HAL_IWDG_Refresh>
    switch(arg[3])
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3303      	adds	r3, #3
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b83      	cmp	r3, #131	; 0x83
 8000b7e:	d01a      	beq.n	8000bb6 <pid_handle+0x4e>
 8000b80:	2b83      	cmp	r3, #131	; 0x83
 8000b82:	dc28      	bgt.n	8000bd6 <pid_handle+0x6e>
 8000b84:	2b82      	cmp	r3, #130	; 0x82
 8000b86:	d012      	beq.n	8000bae <pid_handle+0x46>
 8000b88:	2b82      	cmp	r3, #130	; 0x82
 8000b8a:	dc24      	bgt.n	8000bd6 <pid_handle+0x6e>
 8000b8c:	2b81      	cmp	r3, #129	; 0x81
 8000b8e:	d00a      	beq.n	8000ba6 <pid_handle+0x3e>
 8000b90:	2b81      	cmp	r3, #129	; 0x81
 8000b92:	dc20      	bgt.n	8000bd6 <pid_handle+0x6e>
 8000b94:	2b03      	cmp	r3, #3
 8000b96:	d01a      	beq.n	8000bce <pid_handle+0x66>
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	dc1c      	bgt.n	8000bd6 <pid_handle+0x6e>
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d00e      	beq.n	8000bbe <pid_handle+0x56>
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d010      	beq.n	8000bc6 <pid_handle+0x5e>
        case 0x83: pid_set(arg); break;
        case 0x01: pid_report(arg); break;
        case 0x02: pid_report(arg); break;
        case 0x03: pid_report(arg); break;
    }
}
 8000ba4:	e017      	b.n	8000bd6 <pid_handle+0x6e>
        case 0x81: pid_set(arg); break;
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 f81c 	bl	8000be4 <pid_set>
 8000bac:	e013      	b.n	8000bd6 <pid_handle+0x6e>
        case 0x82: pid_set(arg); break;
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f000 f818 	bl	8000be4 <pid_set>
 8000bb4:	e00f      	b.n	8000bd6 <pid_handle+0x6e>
        case 0x83: pid_set(arg); break;
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f000 f814 	bl	8000be4 <pid_set>
 8000bbc:	e00b      	b.n	8000bd6 <pid_handle+0x6e>
        case 0x01: pid_report(arg); break;
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f000 f8aa 	bl	8000d18 <pid_report>
 8000bc4:	e007      	b.n	8000bd6 <pid_handle+0x6e>
        case 0x02: pid_report(arg); break;
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 f8a6 	bl	8000d18 <pid_report>
 8000bcc:	e003      	b.n	8000bd6 <pid_handle+0x6e>
        case 0x03: pid_report(arg); break;
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 f8a2 	bl	8000d18 <pid_report>
 8000bd4:	bf00      	nop
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20001060 	.word	0x20001060

08000be4 <pid_set>:

void pid_set(uint8_t arg[])
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
    HAL_IWDG_Refresh(&hiwdg);
 8000bec:	4841      	ldr	r0, [pc, #260]	; (8000cf4 <pid_set+0x110>)
 8000bee:	f003 fc4b 	bl	8004488 <HAL_IWDG_Refresh>
    switch(arg[3])
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3303      	adds	r3, #3
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b83      	cmp	r3, #131	; 0x83
 8000bfa:	d030      	beq.n	8000c5e <pid_set+0x7a>
 8000bfc:	2b83      	cmp	r3, #131	; 0x83
 8000bfe:	dc43      	bgt.n	8000c88 <pid_set+0xa4>
 8000c00:	2b81      	cmp	r3, #129	; 0x81
 8000c02:	d002      	beq.n	8000c0a <pid_set+0x26>
 8000c04:	2b82      	cmp	r3, #130	; 0x82
 8000c06:	d015      	beq.n	8000c34 <pid_set+0x50>
 8000c08:	e03e      	b.n	8000c88 <pid_set+0xa4>
    {
        case 0x81: kp = (arg[5]*256+arg[4])/10; para_list[0] = kp; break;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3305      	adds	r3, #5
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	021b      	lsls	r3, r3, #8
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	3204      	adds	r2, #4
 8000c16:	7812      	ldrb	r2, [r2, #0]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a37      	ldr	r2, [pc, #220]	; (8000cf8 <pid_set+0x114>)
 8000c1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c20:	1092      	asrs	r2, r2, #2
 8000c22:	17db      	asrs	r3, r3, #31
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	4a35      	ldr	r2, [pc, #212]	; (8000cfc <pid_set+0x118>)
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	4b34      	ldr	r3, [pc, #208]	; (8000cfc <pid_set+0x118>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a34      	ldr	r2, [pc, #208]	; (8000d00 <pid_set+0x11c>)
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	e029      	b.n	8000c88 <pid_set+0xa4>
        case 0x82: ki = (arg[5]*256+arg[4])/10; para_list[1] = ki; break;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3305      	adds	r3, #5
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	021b      	lsls	r3, r3, #8
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	3204      	adds	r2, #4
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a2c      	ldr	r2, [pc, #176]	; (8000cf8 <pid_set+0x114>)
 8000c46:	fb82 1203 	smull	r1, r2, r2, r3
 8000c4a:	1092      	asrs	r2, r2, #2
 8000c4c:	17db      	asrs	r3, r3, #31
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	4a2c      	ldr	r2, [pc, #176]	; (8000d04 <pid_set+0x120>)
 8000c52:	6013      	str	r3, [r2, #0]
 8000c54:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <pid_set+0x120>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a29      	ldr	r2, [pc, #164]	; (8000d00 <pid_set+0x11c>)
 8000c5a:	6053      	str	r3, [r2, #4]
 8000c5c:	e014      	b.n	8000c88 <pid_set+0xa4>
        case 0x83: kd = (arg[5]*256+arg[4])/10; para_list[2] = kd; break;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3305      	adds	r3, #5
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	021b      	lsls	r3, r3, #8
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	3204      	adds	r2, #4
 8000c6a:	7812      	ldrb	r2, [r2, #0]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a22      	ldr	r2, [pc, #136]	; (8000cf8 <pid_set+0x114>)
 8000c70:	fb82 1203 	smull	r1, r2, r2, r3
 8000c74:	1092      	asrs	r2, r2, #2
 8000c76:	17db      	asrs	r3, r3, #31
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	4a23      	ldr	r2, [pc, #140]	; (8000d08 <pid_set+0x124>)
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <pid_set+0x124>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a1f      	ldr	r2, [pc, #124]	; (8000d00 <pid_set+0x11c>)
 8000c84:	6093      	str	r3, [r2, #8]
 8000c86:	bf00      	nop
    }



    save_para(para_list, 8);
 8000c88:	2108      	movs	r1, #8
 8000c8a:	481d      	ldr	r0, [pc, #116]	; (8000d00 <pid_set+0x11c>)
 8000c8c:	f000 fc2c 	bl	80014e8 <save_para>


    reply_cmd[1] = 0xFF & ser_addr;
 8000c90:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <pid_set+0x128>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <pid_set+0x12c>)
 8000c98:	705a      	strb	r2, [r3, #1]
    reply_cmd[2] = arg[2];
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	789a      	ldrb	r2, [r3, #2]
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <pid_set+0x12c>)
 8000ca0:	709a      	strb	r2, [r3, #2]
    reply_cmd[3] = arg[3]-0x40U;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3303      	adds	r3, #3
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	3b40      	subs	r3, #64	; 0x40
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <pid_set+0x12c>)
 8000cae:	70da      	strb	r2, [r3, #3]
    reply_cmd[4] = arg[4];
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	791a      	ldrb	r2, [r3, #4]
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <pid_set+0x12c>)
 8000cb6:	711a      	strb	r2, [r3, #4]
    reply_cmd[5] = arg[5];
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	795a      	ldrb	r2, [r3, #5]
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <pid_set+0x12c>)
 8000cbe:	715a      	strb	r2, [r3, #5]
    uint16_t wReCRC = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	81fb      	strh	r3, [r7, #14]
    wReCRC = wCRCCheck_Uart_Data(&reply_cmd[0], 4);
 8000cc4:	2104      	movs	r1, #4
 8000cc6:	4812      	ldr	r0, [pc, #72]	; (8000d10 <pid_set+0x12c>)
 8000cc8:	f001 fa68 	bl	800219c <wCRCCheck_Uart_Data>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	81fb      	strh	r3, [r7, #14]
    reply_cmd[6] = (wReCRC & 0xFFU);
 8000cd0:	89fb      	ldrh	r3, [r7, #14]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <pid_set+0x12c>)
 8000cd6:	719a      	strb	r2, [r3, #6]
    reply_cmd[7] = ((wReCRC >> 8) & 0xFFU);
 8000cd8:	89fb      	ldrh	r3, [r7, #14]
 8000cda:	0a1b      	lsrs	r3, r3, #8
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <pid_set+0x12c>)
 8000ce2:	71da      	strb	r2, [r3, #7]
    reply(&huart2);
 8000ce4:	480b      	ldr	r0, [pc, #44]	; (8000d14 <pid_set+0x130>)
 8000ce6:	f000 fbcf 	bl	8001488 <reply>
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20001060 	.word	0x20001060
 8000cf8:	66666667 	.word	0x66666667
 8000cfc:	20001988 	.word	0x20001988
 8000d00:	2000194c 	.word	0x2000194c
 8000d04:	2000197c 	.word	0x2000197c
 8000d08:	20001974 	.word	0x20001974
 8000d0c:	20001984 	.word	0x20001984
 8000d10:	200018bc 	.word	0x200018bc
 8000d14:	200018c4 	.word	0x200018c4

08000d18 <pid_report>:


void pid_report(uint8_t arg[])
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    HAL_IWDG_Refresh(&hiwdg);
 8000d20:	482d      	ldr	r0, [pc, #180]	; (8000dd8 <pid_report+0xc0>)
 8000d22:	f003 fbb1 	bl	8004488 <HAL_IWDG_Refresh>
    reply_cmd[1] = 0xFF & ser_addr;
 8000d26:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <pid_report+0xc4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <pid_report+0xc8>)
 8000d2e:	705a      	strb	r2, [r3, #1]
    reply_cmd[2] = arg[2];
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	789a      	ldrb	r2, [r3, #2]
 8000d34:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <pid_report+0xc8>)
 8000d36:	709a      	strb	r2, [r3, #2]
    reply_cmd[3] = arg[3]+0x40U;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3303      	adds	r3, #3
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	3340      	adds	r3, #64	; 0x40
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <pid_report+0xc8>)
 8000d44:	70da      	strb	r2, [r3, #3]
    int32_t tmp = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
    switch(arg[3])
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3303      	adds	r3, #3
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d016      	beq.n	8000d82 <pid_report+0x6a>
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	dc1c      	bgt.n	8000d92 <pid_report+0x7a>
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d002      	beq.n	8000d62 <pid_report+0x4a>
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d008      	beq.n	8000d72 <pid_report+0x5a>
 8000d60:	e017      	b.n	8000d92 <pid_report+0x7a>
    {
        case 0x01: tmp = kp*10; break;
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <pid_report+0xcc>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4613      	mov	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	e00f      	b.n	8000d92 <pid_report+0x7a>
        case 0x02: tmp = ki*10; break;
 8000d72:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <pid_report+0xd0>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4613      	mov	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4413      	add	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	e007      	b.n	8000d92 <pid_report+0x7a>
        case 0x03: tmp = kd*10; break;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <pid_report+0xd4>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4613      	mov	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	bf00      	nop
    }

    reply_cmd[4] = tmp & 0xFFU;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <pid_report+0xc8>)
 8000d98:	711a      	strb	r2, [r3, #4]
    reply_cmd[5] = ((tmp >> 8) & 0xFFU);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	121b      	asrs	r3, r3, #8
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <pid_report+0xc8>)
 8000da2:	715a      	strb	r2, [r3, #5]

    uint16_t wReCRC = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	817b      	strh	r3, [r7, #10]
    wReCRC = wCRCCheck_Uart_Data(&reply_cmd[0], 4);
 8000da8:	2104      	movs	r1, #4
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <pid_report+0xc8>)
 8000dac:	f001 f9f6 	bl	800219c <wCRCCheck_Uart_Data>
 8000db0:	4603      	mov	r3, r0
 8000db2:	817b      	strh	r3, [r7, #10]
    reply_cmd[6] = (wReCRC & 0xFFU);
 8000db4:	897b      	ldrh	r3, [r7, #10]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <pid_report+0xc8>)
 8000dba:	719a      	strb	r2, [r3, #6]
    reply_cmd[7] = ((wReCRC >> 8) & 0xFFU);
 8000dbc:	897b      	ldrh	r3, [r7, #10]
 8000dbe:	0a1b      	lsrs	r3, r3, #8
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <pid_report+0xc8>)
 8000dc6:	71da      	strb	r2, [r3, #7]
    reply(&huart2);
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <pid_report+0xd8>)
 8000dca:	f000 fb5d 	bl	8001488 <reply>
}
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20001060 	.word	0x20001060
 8000ddc:	20001984 	.word	0x20001984
 8000de0:	200018bc 	.word	0x200018bc
 8000de4:	20001988 	.word	0x20001988
 8000de8:	2000197c 	.word	0x2000197c
 8000dec:	20001974 	.word	0x20001974
 8000df0:	200018c4 	.word	0x200018c4

08000df4 <dz_handle>:

void dz_handle(uint8_t arg[])
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
    HAL_IWDG_Refresh(&hiwdg);
 8000dfc:	480a      	ldr	r0, [pc, #40]	; (8000e28 <dz_handle+0x34>)
 8000dfe:	f003 fb43 	bl	8004488 <HAL_IWDG_Refresh>
    switch(arg[3])
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3303      	adds	r3, #3
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d005      	beq.n	8000e18 <dz_handle+0x24>
 8000e0c:	2b80      	cmp	r3, #128	; 0x80
 8000e0e:	d107      	bne.n	8000e20 <dz_handle+0x2c>
    {
        case 0x80: dz_set(arg); break;
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 f80b 	bl	8000e2c <dz_set>
 8000e16:	e003      	b.n	8000e20 <dz_handle+0x2c>
        case 0x00: dz_report(arg); break;
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 f865 	bl	8000ee8 <dz_report>
 8000e1e:	bf00      	nop
    }
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20001060 	.word	0x20001060

08000e2c <dz_set>:



void dz_set(uint8_t arg[])
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
    HAL_IWDG_Refresh(&hiwdg);
 8000e34:	4825      	ldr	r0, [pc, #148]	; (8000ecc <dz_set+0xa0>)
 8000e36:	f003 fb27 	bl	8004488 <HAL_IWDG_Refresh>
    reply_cmd[1] = 0xFF & ser_addr;
 8000e3a:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <dz_set+0xa4>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <dz_set+0xa8>)
 8000e42:	705a      	strb	r2, [r3, #1]
    dz = (arg[5]*256+arg[4])/10;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3305      	adds	r3, #5
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	3204      	adds	r2, #4
 8000e50:	7812      	ldrb	r2, [r2, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a20      	ldr	r2, [pc, #128]	; (8000ed8 <dz_set+0xac>)
 8000e56:	fb82 1203 	smull	r1, r2, r2, r3
 8000e5a:	1092      	asrs	r2, r2, #2
 8000e5c:	17db      	asrs	r3, r3, #31
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	4a1e      	ldr	r2, [pc, #120]	; (8000edc <dz_set+0xb0>)
 8000e62:	6013      	str	r3, [r2, #0]


    para_list[3] = dz;
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <dz_set+0xb0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a1d      	ldr	r2, [pc, #116]	; (8000ee0 <dz_set+0xb4>)
 8000e6a:	60d3      	str	r3, [r2, #12]
    save_para(para_list, 8);
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	481c      	ldr	r0, [pc, #112]	; (8000ee0 <dz_set+0xb4>)
 8000e70:	f000 fb3a 	bl	80014e8 <save_para>

    reply_cmd[2] = arg[2];
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	789a      	ldrb	r2, [r3, #2]
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <dz_set+0xa8>)
 8000e7a:	709a      	strb	r2, [r3, #2]
    reply_cmd[3] = arg[3]-0x40U;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3303      	adds	r3, #3
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	3b40      	subs	r3, #64	; 0x40
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <dz_set+0xa8>)
 8000e88:	70da      	strb	r2, [r3, #3]
    reply_cmd[4] = arg[4];
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	791a      	ldrb	r2, [r3, #4]
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <dz_set+0xa8>)
 8000e90:	711a      	strb	r2, [r3, #4]
    reply_cmd[5] = arg[5];
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	795a      	ldrb	r2, [r3, #5]
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <dz_set+0xa8>)
 8000e98:	715a      	strb	r2, [r3, #5]
    uint16_t wReCRC = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	81fb      	strh	r3, [r7, #14]
    wReCRC = wCRCCheck_Uart_Data(&reply_cmd[0], 4);
 8000e9e:	2104      	movs	r1, #4
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <dz_set+0xa8>)
 8000ea2:	f001 f97b 	bl	800219c <wCRCCheck_Uart_Data>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	81fb      	strh	r3, [r7, #14]
    reply_cmd[6] = (wReCRC & 0xFFU);
 8000eaa:	89fb      	ldrh	r3, [r7, #14]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <dz_set+0xa8>)
 8000eb0:	719a      	strb	r2, [r3, #6]
    reply_cmd[7] = ((wReCRC >> 8) & 0xFFU);
 8000eb2:	89fb      	ldrh	r3, [r7, #14]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <dz_set+0xa8>)
 8000ebc:	71da      	strb	r2, [r3, #7]
    reply(&huart2);
 8000ebe:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <dz_set+0xb8>)
 8000ec0:	f000 fae2 	bl	8001488 <reply>
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20001060 	.word	0x20001060
 8000ed0:	20001984 	.word	0x20001984
 8000ed4:	200018bc 	.word	0x200018bc
 8000ed8:	66666667 	.word	0x66666667
 8000edc:	20001970 	.word	0x20001970
 8000ee0:	2000194c 	.word	0x2000194c
 8000ee4:	200018c4 	.word	0x200018c4

08000ee8 <dz_report>:

void dz_report(uint8_t arg[])
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    HAL_IWDG_Refresh(&hiwdg);
 8000ef0:	481b      	ldr	r0, [pc, #108]	; (8000f60 <dz_report+0x78>)
 8000ef2:	f003 fac9 	bl	8004488 <HAL_IWDG_Refresh>
    reply_cmd[1] = 0xFF & ser_addr;
 8000ef6:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <dz_report+0x7c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <dz_report+0x80>)
 8000efe:	705a      	strb	r2, [r3, #1]
    reply_cmd[2] = arg[2];
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	789a      	ldrb	r2, [r3, #2]
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <dz_report+0x80>)
 8000f06:	709a      	strb	r2, [r3, #2]
    reply_cmd[3] = arg[3]+0x40U;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3303      	adds	r3, #3
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	3340      	adds	r3, #64	; 0x40
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <dz_report+0x80>)
 8000f14:	70da      	strb	r2, [r3, #3]
    reply_cmd[4] = dz & 0xFFU;
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <dz_report+0x84>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <dz_report+0x80>)
 8000f1e:	711a      	strb	r2, [r3, #4]
    reply_cmd[5] = ((dz >> 8) & 0xFFU);
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <dz_report+0x84>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	121b      	asrs	r3, r3, #8
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <dz_report+0x80>)
 8000f2a:	715a      	strb	r2, [r3, #5]
    uint16_t wReCRC = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	81fb      	strh	r3, [r7, #14]
    wReCRC = wCRCCheck_Uart_Data(&reply_cmd[0], 4);
 8000f30:	2104      	movs	r1, #4
 8000f32:	480d      	ldr	r0, [pc, #52]	; (8000f68 <dz_report+0x80>)
 8000f34:	f001 f932 	bl	800219c <wCRCCheck_Uart_Data>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	81fb      	strh	r3, [r7, #14]
    reply_cmd[6] = (wReCRC & 0xFFU);
 8000f3c:	89fb      	ldrh	r3, [r7, #14]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <dz_report+0x80>)
 8000f42:	719a      	strb	r2, [r3, #6]
    reply_cmd[7] = ((wReCRC >> 8) & 0xFFU);
 8000f44:	89fb      	ldrh	r3, [r7, #14]
 8000f46:	0a1b      	lsrs	r3, r3, #8
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <dz_report+0x80>)
 8000f4e:	71da      	strb	r2, [r3, #7]
    reply(&huart2);
 8000f50:	4807      	ldr	r0, [pc, #28]	; (8000f70 <dz_report+0x88>)
 8000f52:	f000 fa99 	bl	8001488 <reply>
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20001060 	.word	0x20001060
 8000f64:	20001984 	.word	0x20001984
 8000f68:	200018bc 	.word	0x200018bc
 8000f6c:	20001970 	.word	0x20001970
 8000f70:	200018c4 	.word	0x200018c4

08000f74 <zz_handle>:


void zz_handle(uint8_t arg[])
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    HAL_IWDG_Refresh(&hiwdg);
 8000f7c:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <zz_handle+0x34>)
 8000f7e:	f003 fa83 	bl	8004488 <HAL_IWDG_Refresh>
    switch(arg[3])
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3303      	adds	r3, #3
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d005      	beq.n	8000f98 <zz_handle+0x24>
 8000f8c:	2b80      	cmp	r3, #128	; 0x80
 8000f8e:	d107      	bne.n	8000fa0 <zz_handle+0x2c>
    {
        case 0x80: zz_set(arg); break;
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 f80b 	bl	8000fac <zz_set>
 8000f96:	e003      	b.n	8000fa0 <zz_handle+0x2c>
        case 0x00: zz_report(arg); break;
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f865 	bl	8001068 <zz_report>
 8000f9e:	bf00      	nop
    }
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20001060 	.word	0x20001060

08000fac <zz_set>:

void zz_set(uint8_t arg[])
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    HAL_IWDG_Refresh(&hiwdg);
 8000fb4:	4825      	ldr	r0, [pc, #148]	; (800104c <zz_set+0xa0>)
 8000fb6:	f003 fa67 	bl	8004488 <HAL_IWDG_Refresh>
    zz = (arg[5]*256+arg[4])/10;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3305      	adds	r3, #5
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	3204      	adds	r2, #4
 8000fc6:	7812      	ldrb	r2, [r2, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a21      	ldr	r2, [pc, #132]	; (8001050 <zz_set+0xa4>)
 8000fcc:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd0:	1092      	asrs	r2, r2, #2
 8000fd2:	17db      	asrs	r3, r3, #31
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	4a1f      	ldr	r2, [pc, #124]	; (8001054 <zz_set+0xa8>)
 8000fd8:	6013      	str	r3, [r2, #0]


    para_list[4] = zz;
 8000fda:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <zz_set+0xa8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <zz_set+0xac>)
 8000fe0:	6113      	str	r3, [r2, #16]
    save_para(para_list, 8);
 8000fe2:	2108      	movs	r1, #8
 8000fe4:	481c      	ldr	r0, [pc, #112]	; (8001058 <zz_set+0xac>)
 8000fe6:	f000 fa7f 	bl	80014e8 <save_para>


    reply_cmd[1] = 0xFF & ser_addr;
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <zz_set+0xb0>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <zz_set+0xb4>)
 8000ff2:	705a      	strb	r2, [r3, #1]
    reply_cmd[2] = arg[2];
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	789a      	ldrb	r2, [r3, #2]
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <zz_set+0xb4>)
 8000ffa:	709a      	strb	r2, [r3, #2]
    reply_cmd[3] = arg[3]+0x40U;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3303      	adds	r3, #3
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	3340      	adds	r3, #64	; 0x40
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <zz_set+0xb4>)
 8001008:	70da      	strb	r2, [r3, #3]
    reply_cmd[4] = arg[4];
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	791a      	ldrb	r2, [r3, #4]
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <zz_set+0xb4>)
 8001010:	711a      	strb	r2, [r3, #4]
    reply_cmd[5] = arg[5];
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	795a      	ldrb	r2, [r3, #5]
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <zz_set+0xb4>)
 8001018:	715a      	strb	r2, [r3, #5]
    uint16_t wReCRC = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	81fb      	strh	r3, [r7, #14]
    wReCRC = wCRCCheck_Uart_Data(&reply_cmd[0], 4);
 800101e:	2104      	movs	r1, #4
 8001020:	480f      	ldr	r0, [pc, #60]	; (8001060 <zz_set+0xb4>)
 8001022:	f001 f8bb 	bl	800219c <wCRCCheck_Uart_Data>
 8001026:	4603      	mov	r3, r0
 8001028:	81fb      	strh	r3, [r7, #14]
    reply_cmd[6] = (wReCRC & 0xFFU);
 800102a:	89fb      	ldrh	r3, [r7, #14]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <zz_set+0xb4>)
 8001030:	719a      	strb	r2, [r3, #6]
    reply_cmd[7] = ((wReCRC >> 8) & 0xFFU);
 8001032:	89fb      	ldrh	r3, [r7, #14]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	b29b      	uxth	r3, r3
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <zz_set+0xb4>)
 800103c:	71da      	strb	r2, [r3, #7]
    reply(&huart2);
 800103e:	4809      	ldr	r0, [pc, #36]	; (8001064 <zz_set+0xb8>)
 8001040:	f000 fa22 	bl	8001488 <reply>
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20001060 	.word	0x20001060
 8001050:	66666667 	.word	0x66666667
 8001054:	20001980 	.word	0x20001980
 8001058:	2000194c 	.word	0x2000194c
 800105c:	20001984 	.word	0x20001984
 8001060:	200018bc 	.word	0x200018bc
 8001064:	200018c4 	.word	0x200018c4

08001068 <zz_report>:

void zz_report(uint8_t arg[])
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    HAL_IWDG_Refresh(&hiwdg);
 8001070:	481b      	ldr	r0, [pc, #108]	; (80010e0 <zz_report+0x78>)
 8001072:	f003 fa09 	bl	8004488 <HAL_IWDG_Refresh>
    reply_cmd[1] = 0xFF & ser_addr;
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <zz_report+0x7c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <zz_report+0x80>)
 800107e:	705a      	strb	r2, [r3, #1]
    reply_cmd[2] = arg[2];
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	789a      	ldrb	r2, [r3, #2]
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <zz_report+0x80>)
 8001086:	709a      	strb	r2, [r3, #2]
    reply_cmd[3] = arg[3]+0x40U;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3303      	adds	r3, #3
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	3340      	adds	r3, #64	; 0x40
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <zz_report+0x80>)
 8001094:	70da      	strb	r2, [r3, #3]
    reply_cmd[4] = zz & 0xFFU;
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <zz_report+0x84>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <zz_report+0x80>)
 800109e:	711a      	strb	r2, [r3, #4]
    reply_cmd[5] = ((zz >> 8) & 0xFFU);
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <zz_report+0x84>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	121b      	asrs	r3, r3, #8
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <zz_report+0x80>)
 80010aa:	715a      	strb	r2, [r3, #5]
    uint16_t wReCRC = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	81fb      	strh	r3, [r7, #14]
    wReCRC = wCRCCheck_Uart_Data(&reply_cmd[0], 4);
 80010b0:	2104      	movs	r1, #4
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <zz_report+0x80>)
 80010b4:	f001 f872 	bl	800219c <wCRCCheck_Uart_Data>
 80010b8:	4603      	mov	r3, r0
 80010ba:	81fb      	strh	r3, [r7, #14]
    reply_cmd[6] = (wReCRC & 0xFFU);
 80010bc:	89fb      	ldrh	r3, [r7, #14]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <zz_report+0x80>)
 80010c2:	719a      	strb	r2, [r3, #6]
    reply_cmd[7] = ((wReCRC >> 8) & 0xFFU);
 80010c4:	89fb      	ldrh	r3, [r7, #14]
 80010c6:	0a1b      	lsrs	r3, r3, #8
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <zz_report+0x80>)
 80010ce:	71da      	strb	r2, [r3, #7]
    reply(&huart2);
 80010d0:	4807      	ldr	r0, [pc, #28]	; (80010f0 <zz_report+0x88>)
 80010d2:	f000 f9d9 	bl	8001488 <reply>
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20001060 	.word	0x20001060
 80010e4:	20001984 	.word	0x20001984
 80010e8:	200018bc 	.word	0x200018bc
 80010ec:	20001980 	.word	0x20001980
 80010f0:	200018c4 	.word	0x200018c4

080010f4 <prs_handle>:


void prs_handle(uint8_t arg[])
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    HAL_IWDG_Refresh(&hiwdg);
 80010fc:	480f      	ldr	r0, [pc, #60]	; (800113c <prs_handle+0x48>)
 80010fe:	f003 f9c3 	bl	8004488 <HAL_IWDG_Refresh>
    switch(arg[3])
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3303      	adds	r3, #3
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b80      	cmp	r3, #128	; 0x80
 800110a:	d006      	beq.n	800111a <prs_handle+0x26>
 800110c:	2b80      	cmp	r3, #128	; 0x80
 800110e:	dc10      	bgt.n	8001132 <prs_handle+0x3e>
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <prs_handle+0x2e>
 8001114:	2b0a      	cmp	r3, #10
 8001116:	d008      	beq.n	800112a <prs_handle+0x36>
    {
        case 0x80: prs_set(arg); break;
        case 0x00: prs_report(arg); break;
        case 0x0A: prs_set_point_report(arg); break;
    }
}
 8001118:	e00b      	b.n	8001132 <prs_handle+0x3e>
        case 0x80: prs_set(arg); break;
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f810 	bl	8001140 <prs_set>
 8001120:	e007      	b.n	8001132 <prs_handle+0x3e>
        case 0x00: prs_report(arg); break;
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f864 	bl	80011f0 <prs_report>
 8001128:	e003      	b.n	8001132 <prs_handle+0x3e>
        case 0x0A: prs_set_point_report(arg); break;
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f8b0 	bl	8001290 <prs_set_point_report>
 8001130:	bf00      	nop
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20001060 	.word	0x20001060

08001140 <prs_set>:

void prs_set(uint8_t arg[])
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
    HAL_IWDG_Refresh(&hiwdg);
 8001148:	4823      	ldr	r0, [pc, #140]	; (80011d8 <prs_set+0x98>)
 800114a:	f003 f99d 	bl	8004488 <HAL_IWDG_Refresh>
    aim_prs = (arg[5]*256+arg[4]);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3305      	adds	r3, #5
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	3204      	adds	r2, #4
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	4413      	add	r3, r2
 800115e:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <prs_set+0x9c>)
 8001160:	6013      	str	r3, [r2, #0]



    para_list[5] = aim_prs;
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <prs_set+0x9c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <prs_set+0xa0>)
 8001168:	6153      	str	r3, [r2, #20]
    save_para(para_list, 8);
 800116a:	2108      	movs	r1, #8
 800116c:	481c      	ldr	r0, [pc, #112]	; (80011e0 <prs_set+0xa0>)
 800116e:	f000 f9bb 	bl	80014e8 <save_para>


    pid_init();
 8001172:	f000 fd63 	bl	8001c3c <pid_init>
    reply_cmd[1] = 0xFF & ser_addr;
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <prs_set+0xa4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <prs_set+0xa8>)
 800117e:	705a      	strb	r2, [r3, #1]
    reply_cmd[2] = arg[2];
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	789a      	ldrb	r2, [r3, #2]
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <prs_set+0xa8>)
 8001186:	709a      	strb	r2, [r3, #2]
    reply_cmd[3] = arg[3]-0x40U;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3303      	adds	r3, #3
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	3b40      	subs	r3, #64	; 0x40
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <prs_set+0xa8>)
 8001194:	70da      	strb	r2, [r3, #3]
    reply_cmd[4] = arg[4];
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	791a      	ldrb	r2, [r3, #4]
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <prs_set+0xa8>)
 800119c:	711a      	strb	r2, [r3, #4]
    reply_cmd[5] = arg[5];
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	795a      	ldrb	r2, [r3, #5]
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <prs_set+0xa8>)
 80011a4:	715a      	strb	r2, [r3, #5]
    uint16_t wReCRC = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	81fb      	strh	r3, [r7, #14]
    wReCRC = wCRCCheck_Uart_Data(&reply_cmd[0], 4);
 80011aa:	2104      	movs	r1, #4
 80011ac:	480e      	ldr	r0, [pc, #56]	; (80011e8 <prs_set+0xa8>)
 80011ae:	f000 fff5 	bl	800219c <wCRCCheck_Uart_Data>
 80011b2:	4603      	mov	r3, r0
 80011b4:	81fb      	strh	r3, [r7, #14]
    reply_cmd[6] = (wReCRC & 0xFFU);
 80011b6:	89fb      	ldrh	r3, [r7, #14]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <prs_set+0xa8>)
 80011bc:	719a      	strb	r2, [r3, #6]
    reply_cmd[7] = ((wReCRC >> 8) & 0xFFU);
 80011be:	89fb      	ldrh	r3, [r7, #14]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <prs_set+0xa8>)
 80011c8:	71da      	strb	r2, [r3, #7]
    reply(&huart2);
 80011ca:	4808      	ldr	r0, [pc, #32]	; (80011ec <prs_set+0xac>)
 80011cc:	f000 f95c 	bl	8001488 <reply>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20001060 	.word	0x20001060
 80011dc:	20001978 	.word	0x20001978
 80011e0:	2000194c 	.word	0x2000194c
 80011e4:	20001984 	.word	0x20001984
 80011e8:	200018bc 	.word	0x200018bc
 80011ec:	200018c4 	.word	0x200018c4

080011f0 <prs_report>:

void prs_report(uint8_t arg[])
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
    HAL_IWDG_Refresh(&hiwdg);
 80011f8:	481f      	ldr	r0, [pc, #124]	; (8001278 <prs_report+0x88>)
 80011fa:	f003 f945 	bl	8004488 <HAL_IWDG_Refresh>
    int32_t rpt_prs = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
    rpt_prs = curr_prs/10;  //unit of rpt_prs is hPa, curr_prs is dPa
 8001202:	4b1e      	ldr	r3, [pc, #120]	; (800127c <prs_report+0x8c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <prs_report+0x90>)
 8001208:	fb82 1203 	smull	r1, r2, r2, r3
 800120c:	1092      	asrs	r2, r2, #2
 800120e:	17db      	asrs	r3, r3, #31
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	60fb      	str	r3, [r7, #12]
    //reply_cmd[0] = 0x5E;
    reply_cmd[1] = 0xFF & ser_addr;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <prs_report+0x94>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <prs_report+0x98>)
 800121c:	705a      	strb	r2, [r3, #1]
    reply_cmd[2] = arg[2];
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	789a      	ldrb	r2, [r3, #2]
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <prs_report+0x98>)
 8001224:	709a      	strb	r2, [r3, #2]
    reply_cmd[3] = arg[3]+0x40U;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3303      	adds	r3, #3
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	3340      	adds	r3, #64	; 0x40
 800122e:	b2da      	uxtb	r2, r3
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <prs_report+0x98>)
 8001232:	70da      	strb	r2, [r3, #3]
    reply_cmd[4] = rpt_prs & 0xFFU;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <prs_report+0x98>)
 800123a:	711a      	strb	r2, [r3, #4]
    reply_cmd[5] = ((rpt_prs >> 8) & 0xFFU);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	121b      	asrs	r3, r3, #8
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <prs_report+0x98>)
 8001244:	715a      	strb	r2, [r3, #5]
    uint16_t wReCRC = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	817b      	strh	r3, [r7, #10]
    wReCRC = wCRCCheck_Uart_Data(&reply_cmd[0], 4);
 800124a:	2104      	movs	r1, #4
 800124c:	480e      	ldr	r0, [pc, #56]	; (8001288 <prs_report+0x98>)
 800124e:	f000 ffa5 	bl	800219c <wCRCCheck_Uart_Data>
 8001252:	4603      	mov	r3, r0
 8001254:	817b      	strh	r3, [r7, #10]
    reply_cmd[6] = (wReCRC & 0xFFU);
 8001256:	897b      	ldrh	r3, [r7, #10]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <prs_report+0x98>)
 800125c:	719a      	strb	r2, [r3, #6]
    reply_cmd[7] = ((wReCRC >> 8) & 0xFFU);
 800125e:	897b      	ldrh	r3, [r7, #10]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	b29b      	uxth	r3, r3
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <prs_report+0x98>)
 8001268:	71da      	strb	r2, [r3, #7]
    reply(&huart2);
 800126a:	4808      	ldr	r0, [pc, #32]	; (800128c <prs_report+0x9c>)
 800126c:	f000 f90c 	bl	8001488 <reply>
}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20001060 	.word	0x20001060
 800127c:	20001948 	.word	0x20001948
 8001280:	66666667 	.word	0x66666667
 8001284:	20001984 	.word	0x20001984
 8001288:	200018bc 	.word	0x200018bc
 800128c:	200018c4 	.word	0x200018c4

08001290 <prs_set_point_report>:

void  prs_set_point_report(uint8_t arg[])
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    HAL_IWDG_Refresh(&hiwdg);
 8001298:	481c      	ldr	r0, [pc, #112]	; (800130c <prs_set_point_report+0x7c>)
 800129a:	f003 f8f5 	bl	8004488 <HAL_IWDG_Refresh>
    int32_t rpt_prs = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
    rpt_prs = aim_prs;  //unit of rpt_prs is hPa, aim_prs is dPa
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <prs_set_point_report+0x80>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	60fb      	str	r3, [r7, #12]
    reply_cmd[1] = 0xFF & ser_addr;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <prs_set_point_report+0x84>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <prs_set_point_report+0x88>)
 80012b0:	705a      	strb	r2, [r3, #1]
    reply_cmd[2] = arg[2];
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	789a      	ldrb	r2, [r3, #2]
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <prs_set_point_report+0x88>)
 80012b8:	709a      	strb	r2, [r3, #2]
    reply_cmd[3] = arg[3]+0x40U;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3303      	adds	r3, #3
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	3340      	adds	r3, #64	; 0x40
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <prs_set_point_report+0x88>)
 80012c6:	70da      	strb	r2, [r3, #3]
    reply_cmd[4] = rpt_prs & 0xFFU;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <prs_set_point_report+0x88>)
 80012ce:	711a      	strb	r2, [r3, #4]
    reply_cmd[5] = ((rpt_prs >> 8) & 0xFFU);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	121b      	asrs	r3, r3, #8
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <prs_set_point_report+0x88>)
 80012d8:	715a      	strb	r2, [r3, #5]
    uint16_t wReCRC = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	817b      	strh	r3, [r7, #10]
    wReCRC = wCRCCheck_Uart_Data(&reply_cmd[0], 4);
 80012de:	2104      	movs	r1, #4
 80012e0:	480d      	ldr	r0, [pc, #52]	; (8001318 <prs_set_point_report+0x88>)
 80012e2:	f000 ff5b 	bl	800219c <wCRCCheck_Uart_Data>
 80012e6:	4603      	mov	r3, r0
 80012e8:	817b      	strh	r3, [r7, #10]
    reply_cmd[6] = (wReCRC & 0xFFU);
 80012ea:	897b      	ldrh	r3, [r7, #10]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <prs_set_point_report+0x88>)
 80012f0:	719a      	strb	r2, [r3, #6]
    reply_cmd[7] = ((wReCRC >> 8) & 0xFFU);
 80012f2:	897b      	ldrh	r3, [r7, #10]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <prs_set_point_report+0x88>)
 80012fc:	71da      	strb	r2, [r3, #7]
    reply(&huart2);
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <prs_set_point_report+0x8c>)
 8001300:	f000 f8c2 	bl	8001488 <reply>
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20001060 	.word	0x20001060
 8001310:	20001978 	.word	0x20001978
 8001314:	20001984 	.word	0x20001984
 8001318:	200018bc 	.word	0x200018bc
 800131c:	200018c4 	.word	0x200018c4

08001320 <addr_handle>:



void addr_handle(uint8_t arg[])
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
    HAL_IWDG_Refresh(&hiwdg);
 8001328:	480a      	ldr	r0, [pc, #40]	; (8001354 <addr_handle+0x34>)
 800132a:	f003 f8ad 	bl	8004488 <HAL_IWDG_Refresh>
    switch(arg[3])
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3303      	adds	r3, #3
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <addr_handle+0x24>
 8001338:	2b80      	cmp	r3, #128	; 0x80
 800133a:	d107      	bne.n	800134c <addr_handle+0x2c>
    {
        case 0x80: addr_set(arg); break;
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 f80b 	bl	8001358 <addr_set>
 8001342:	e003      	b.n	800134c <addr_handle+0x2c>
        case 0x00: addr_report(arg); break;
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f85b 	bl	8001400 <addr_report>
 800134a:	bf00      	nop
    }
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20001060 	.word	0x20001060

08001358 <addr_set>:

void addr_set(uint8_t arg[])
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    HAL_IWDG_Refresh(&hiwdg);
 8001360:	4822      	ldr	r0, [pc, #136]	; (80013ec <addr_set+0x94>)
 8001362:	f003 f891 	bl	8004488 <HAL_IWDG_Refresh>
    ser_addr = (arg[5]*256+arg[4]);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3305      	adds	r3, #5
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	3204      	adds	r2, #4
 8001372:	7812      	ldrb	r2, [r2, #0]
 8001374:	4413      	add	r3, r2
 8001376:	4a1e      	ldr	r2, [pc, #120]	; (80013f0 <addr_set+0x98>)
 8001378:	6013      	str	r3, [r2, #0]
    para_list[6] = ser_addr;
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <addr_set+0x98>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <addr_set+0x9c>)
 8001380:	6193      	str	r3, [r2, #24]
    save_para(para_list, 8);
 8001382:	2108      	movs	r1, #8
 8001384:	481b      	ldr	r0, [pc, #108]	; (80013f4 <addr_set+0x9c>)
 8001386:	f000 f8af 	bl	80014e8 <save_para>
    reply_cmd[1] = 0xFF & ser_addr;
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <addr_set+0x98>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <addr_set+0xa0>)
 8001392:	705a      	strb	r2, [r3, #1]
    reply_cmd[2] = arg[2];
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	789a      	ldrb	r2, [r3, #2]
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <addr_set+0xa0>)
 800139a:	709a      	strb	r2, [r3, #2]
    reply_cmd[3] = arg[3]-0x40U;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3303      	adds	r3, #3
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	3b40      	subs	r3, #64	; 0x40
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <addr_set+0xa0>)
 80013a8:	70da      	strb	r2, [r3, #3]
    reply_cmd[4] = arg[4];
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	791a      	ldrb	r2, [r3, #4]
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <addr_set+0xa0>)
 80013b0:	711a      	strb	r2, [r3, #4]
    reply_cmd[5] = arg[5];
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	795a      	ldrb	r2, [r3, #5]
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <addr_set+0xa0>)
 80013b8:	715a      	strb	r2, [r3, #5]
    uint16_t wReCRC = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	81fb      	strh	r3, [r7, #14]
    wReCRC = wCRCCheck_Uart_Data(&reply_cmd[0], 4);
 80013be:	2104      	movs	r1, #4
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <addr_set+0xa0>)
 80013c2:	f000 feeb 	bl	800219c <wCRCCheck_Uart_Data>
 80013c6:	4603      	mov	r3, r0
 80013c8:	81fb      	strh	r3, [r7, #14]
    reply_cmd[6] = (wReCRC & 0xFFU);
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <addr_set+0xa0>)
 80013d0:	719a      	strb	r2, [r3, #6]
    reply_cmd[7] = ((wReCRC >> 8) & 0xFFU);
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <addr_set+0xa0>)
 80013dc:	71da      	strb	r2, [r3, #7]
    reply(&huart2);
 80013de:	4807      	ldr	r0, [pc, #28]	; (80013fc <addr_set+0xa4>)
 80013e0:	f000 f852 	bl	8001488 <reply>
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20001060 	.word	0x20001060
 80013f0:	20001984 	.word	0x20001984
 80013f4:	2000194c 	.word	0x2000194c
 80013f8:	200018bc 	.word	0x200018bc
 80013fc:	200018c4 	.word	0x200018c4

08001400 <addr_report>:

void addr_report(uint8_t arg[])
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
    HAL_IWDG_Refresh(&hiwdg);
 8001408:	481b      	ldr	r0, [pc, #108]	; (8001478 <addr_report+0x78>)
 800140a:	f003 f83d 	bl	8004488 <HAL_IWDG_Refresh>
    reply_cmd[1] = 0xFF & ser_addr;
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <addr_report+0x7c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <addr_report+0x80>)
 8001416:	705a      	strb	r2, [r3, #1]
    reply_cmd[2] = arg[2];
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	789a      	ldrb	r2, [r3, #2]
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <addr_report+0x80>)
 800141e:	709a      	strb	r2, [r3, #2]
    reply_cmd[3] = arg[3]+0x40U;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3303      	adds	r3, #3
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	3340      	adds	r3, #64	; 0x40
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <addr_report+0x80>)
 800142c:	70da      	strb	r2, [r3, #3]
    reply_cmd[4] = ser_addr & 0xFFU;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <addr_report+0x7c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <addr_report+0x80>)
 8001436:	711a      	strb	r2, [r3, #4]
    reply_cmd[5] = ((ser_addr >> 8) & 0xFFU);
 8001438:	4b10      	ldr	r3, [pc, #64]	; (800147c <addr_report+0x7c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	121b      	asrs	r3, r3, #8
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <addr_report+0x80>)
 8001442:	715a      	strb	r2, [r3, #5]
    uint16_t wReCRC = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	81fb      	strh	r3, [r7, #14]
    wReCRC = wCRCCheck_Uart_Data(&reply_cmd[0], 4);
 8001448:	2104      	movs	r1, #4
 800144a:	480d      	ldr	r0, [pc, #52]	; (8001480 <addr_report+0x80>)
 800144c:	f000 fea6 	bl	800219c <wCRCCheck_Uart_Data>
 8001450:	4603      	mov	r3, r0
 8001452:	81fb      	strh	r3, [r7, #14]
    reply_cmd[6] = (wReCRC & 0xFFU);
 8001454:	89fb      	ldrh	r3, [r7, #14]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <addr_report+0x80>)
 800145a:	719a      	strb	r2, [r3, #6]
    reply_cmd[7] = ((wReCRC >> 8) & 0xFFU);
 800145c:	89fb      	ldrh	r3, [r7, #14]
 800145e:	0a1b      	lsrs	r3, r3, #8
 8001460:	b29b      	uxth	r3, r3
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <addr_report+0x80>)
 8001466:	71da      	strb	r2, [r3, #7]
    reply(&huart2);
 8001468:	4806      	ldr	r0, [pc, #24]	; (8001484 <addr_report+0x84>)
 800146a:	f000 f80d 	bl	8001488 <reply>
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20001060 	.word	0x20001060
 800147c:	20001984 	.word	0x20001984
 8001480:	200018bc 	.word	0x200018bc
 8001484:	200018c4 	.word	0x200018c4

08001488 <reply>:

    tx_flag = 1;

}*/
void reply(UART_HandleTypeDef *huart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
    //HAL_IWDG_Refresh(&hiwdg);
    while(tx_flag<1)
 8001490:	e002      	b.n	8001498 <reply+0x10>
    {delay_us(50);}
 8001492:	2032      	movs	r0, #50	; 0x32
 8001494:	f000 f948 	bl	8001728 <delay_us>
    while(tx_flag<1)
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <reply+0x54>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f8      	beq.n	8001492 <reply+0xa>
    tx_flag--;
 80014a0:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <reply+0x54>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <reply+0x54>)
 80014aa:	701a      	strb	r2, [r3, #0]
    //{
        //HAL_UART_Transmit(&huart2, &reply_cmd[i], 1, 1);
        //i++;
    //}
    //while((huart->Instance->ISR & USART_ISR_TC) == 0)
    while((huart->Instance->ISR & USART_ISR_BUSY) != 0)
 80014ac:	e002      	b.n	80014b4 <reply+0x2c>
    {

        delay_us(50);
 80014ae:	2032      	movs	r0, #50	; 0x32
 80014b0:	f000 f93a 	bl	8001728 <delay_us>
    while((huart->Instance->ISR & USART_ISR_BUSY) != 0)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f5      	bne.n	80014ae <reply+0x26>
    }
    HAL_UART_Transmit(&huart2, &reply_cmd[0], 8, 2);
 80014c2:	2302      	movs	r3, #2
 80014c4:	2208      	movs	r2, #8
 80014c6:	4906      	ldr	r1, [pc, #24]	; (80014e0 <reply+0x58>)
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <reply+0x5c>)
 80014ca:	f005 f9b1 	bl	8006830 <HAL_UART_Transmit>
    //HAL_UART_Transmit_DMA(&huart2, &reply_cmd[0], 8);
    //while(HAL_UART_Transmit(&huart2, &reply_cmd[0], 8, 2) != HAL_OK){HAL_Delay(1);HAL_IWDG_Refresh(&hiwdg);};
    //SET_BIT(huart->Instance->ICR, USART_ICR_TCCF);

    tx_flag = 1;
 80014ce:	4b03      	ldr	r3, [pc, #12]	; (80014dc <reply+0x54>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]

    //HAL_UART_Transmit(&huart2, &reply_cmd[0], 8, 1);

}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20001094 	.word	0x20001094
 80014e0:	200018bc 	.word	0x200018bc
 80014e4:	200018c4 	.word	0x200018c4

080014e8 <save_para>:




void save_para(int32_t arg[], uint8_t len)
{
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]



	//printf("saving data");
    uint32_t Store_Start_Add = flash_addr;
 80014f4:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <save_para+0xb8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	61fb      	str	r3, [r7, #28]
    HAL_FLASH_Unlock();
 80014fa:	f001 fded 	bl	80030d8 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80014fe:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <save_para+0xbc>)
 8001500:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001504:	611a      	str	r2, [r3, #16]
    My_Flash.Banks = FLASH_BANK_1;
 8001506:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <save_para+0xc0>)
 8001508:	2201      	movs	r2, #1
 800150a:	605a      	str	r2, [r3, #4]
    My_Flash.TypeErase = FLASH_TYPEERASE_PAGES ;  //标明Flash执行页面只做擦除操作
 800150c:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <save_para+0xc0>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
    My_Flash.Page = 60; // 60 = (Store_Start_Add-0x8000000)/(2*1024);  声明要擦除的地址
 8001512:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <save_para+0xc0>)
 8001514:	223c      	movs	r2, #60	; 0x3c
 8001516:	609a      	str	r2, [r3, #8]
    My_Flash.NbPages = 1;
 8001518:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <save_para+0xc0>)
 800151a:	2201      	movs	r2, #1
 800151c:	60da      	str	r2, [r3, #12]
    //说明要擦除的页数，此参数必须是Min_Data = 1和Max_Data =(最大页数-初始页的值)之间的值
    uint32_t PageError = 0;                    //设置PageError,如果出现错误这个变量会被设置为出错的FLASH地址
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
    HAL_FLASHEx_Erase(&My_Flash, &PageError);  //调用擦除函数擦除,擦除PageError == 0xFFFFFFFF表示成功
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	4619      	mov	r1, r3
 8001528:	481f      	ldr	r0, [pc, #124]	; (80015a8 <save_para+0xc0>)
 800152a:	f001 febb 	bl	80032a4 <HAL_FLASHEx_Erase>

    //uint16_t Write_Flash_Data = my_add;
    for(int i = 0; i < (len/2); i++)
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	e027      	b.n	8001584 <save_para+0x9c>
    {
        //HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Store_Start_Add, arg[i]);
    	uint64_t flashwritedata = (uint64_t)(((uint64_t)(arg[i*2+1]) << 32) + arg[i*2]);
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	3304      	adds	r3, #4
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	0003      	movs	r3, r0
 8001550:	2200      	movs	r2, #0
 8001552:	69b9      	ldr	r1, [r7, #24]
 8001554:	00c9      	lsls	r1, r1, #3
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	4401      	add	r1, r0
 800155a:	6809      	ldr	r1, [r1, #0]
 800155c:	4608      	mov	r0, r1
 800155e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001562:	1814      	adds	r4, r2, r0
 8001564:	eb43 0501 	adc.w	r5, r3, r1
 8001568:	e9c7 4504 	strd	r4, r5, [r7, #16]
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Store_Start_Add, flashwritedata);
 800156c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001570:	69f9      	ldr	r1, [r7, #28]
 8001572:	2000      	movs	r0, #0
 8001574:	f001 fd44 	bl	8003000 <HAL_FLASH_Program>
        Store_Start_Add += 8;
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	3308      	adds	r3, #8
 800157c:	61fb      	str	r3, [r7, #28]
    for(int i = 0; i < (len/2); i++)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	3301      	adds	r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	085b      	lsrs	r3, r3, #1
 8001588:	b2db      	uxtb	r3, r3
 800158a:	461a      	mov	r2, r3
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	4293      	cmp	r3, r2
 8001590:	dbd0      	blt.n	8001534 <save_para+0x4c>
    }
    HAL_FLASH_Lock();
 8001592:	f001 fdc3 	bl	800311c <HAL_FLASH_Lock>
}
 8001596:	bf00      	nop
 8001598:	3720      	adds	r7, #32
 800159a:	46bd      	mov	sp, r7
 800159c:	bdb0      	pop	{r4, r5, r7, pc}
 800159e:	bf00      	nop
 80015a0:	20001090 	.word	0x20001090
 80015a4:	40022000 	.word	0x40022000
 80015a8:	200018a8 	.word	0x200018a8

080015ac <read_saved_para>:


void read_saved_para(uint8_t len)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
    uint32_t Store_Start_Add = flash_addr;
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <read_saved_para+0x70>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < (len/2); i++)
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	e01e      	b.n	8001600 <read_saved_para+0x54>
    {
    	uint64_t tmp;
        tmp = *(__IO uint64_t*)(Store_Start_Add);  //(__IO uint16_t )是读取该地址的参数值,其值为16位数据,一次读取两个字节，(__IO uint32_t )就一次读4个字节
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
        para_list[i*2] = (0xFFFFFFFF & tmp);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	4913      	ldr	r1, [pc, #76]	; (8001620 <read_saved_para+0x74>)
 80015d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        para_list[i*2+1] = (tmp >> 32);
 80015d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	000a      	movs	r2, r1
 80015e6:	2300      	movs	r3, #0
 80015e8:	6939      	ldr	r1, [r7, #16]
 80015ea:	0049      	lsls	r1, r1, #1
 80015ec:	3101      	adds	r1, #1
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <read_saved_para+0x74>)
 80015f0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        Store_Start_Add += 8;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3308      	adds	r3, #8
 80015f8:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < (len/2); i++)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	3301      	adds	r3, #1
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	085b      	lsrs	r3, r3, #1
 8001604:	b2db      	uxtb	r3, r3
 8001606:	461a      	mov	r2, r3
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4293      	cmp	r3, r2
 800160c:	dbd9      	blt.n	80015c2 <read_saved_para+0x16>
    }

}
 800160e:	bf00      	nop
 8001610:	bf00      	nop
 8001612:	371c      	adds	r7, #28
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	20001090 	.word	0x20001090
 8001620:	2000194c 	.word	0x2000194c

08001624 <para_init>:



void para_init()
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
    //flash_addr = 0x08000000 + (0x400*120);
    flash_addr = 0x0801E000;
 8001628:	4b34      	ldr	r3, [pc, #208]	; (80016fc <para_init+0xd8>)
 800162a:	4a35      	ldr	r2, [pc, #212]	; (8001700 <para_init+0xdc>)
 800162c:	601a      	str	r2, [r3, #0]
    //flash_addr = 0x08000000UL + (0x1E000UL); // 1024*120
	if(version == 0)
 800162e:	4b35      	ldr	r3, [pc, #212]	; (8001704 <para_init+0xe0>)
 8001630:	f993 3000 	ldrsb.w	r3, [r3]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d138      	bne.n	80016aa <para_init+0x86>
	{

		kp = 40;
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <para_init+0xe4>)
 800163a:	2228      	movs	r2, #40	; 0x28
 800163c:	601a      	str	r2, [r3, #0]
		ki = 1;
 800163e:	4b33      	ldr	r3, [pc, #204]	; (800170c <para_init+0xe8>)
 8001640:	2201      	movs	r2, #1
 8001642:	601a      	str	r2, [r3, #0]
		kd = 70;
 8001644:	4b32      	ldr	r3, [pc, #200]	; (8001710 <para_init+0xec>)
 8001646:	2246      	movs	r2, #70	; 0x46
 8001648:	601a      	str	r2, [r3, #0]
		dz = 5;
 800164a:	4b32      	ldr	r3, [pc, #200]	; (8001714 <para_init+0xf0>)
 800164c:	2205      	movs	r2, #5
 800164e:	601a      	str	r2, [r3, #0]
		zz = 0;
 8001650:	4b31      	ldr	r3, [pc, #196]	; (8001718 <para_init+0xf4>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
		aim_prs = 200UL;
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <para_init+0xf8>)
 8001658:	22c8      	movs	r2, #200	; 0xc8
 800165a:	601a      	str	r2, [r3, #0]
		ser_addr = 0xFFUL;
 800165c:	4b30      	ldr	r3, [pc, #192]	; (8001720 <para_init+0xfc>)
 800165e:	22ff      	movs	r2, #255	; 0xff
 8001660:	601a      	str	r2, [r3, #0]
	    para_list[0] = kp;
 8001662:	4b29      	ldr	r3, [pc, #164]	; (8001708 <para_init+0xe4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a2f      	ldr	r2, [pc, #188]	; (8001724 <para_init+0x100>)
 8001668:	6013      	str	r3, [r2, #0]
	    para_list[1] = ki;
 800166a:	4b28      	ldr	r3, [pc, #160]	; (800170c <para_init+0xe8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a2d      	ldr	r2, [pc, #180]	; (8001724 <para_init+0x100>)
 8001670:	6053      	str	r3, [r2, #4]
	    para_list[2] = kd;
 8001672:	4b27      	ldr	r3, [pc, #156]	; (8001710 <para_init+0xec>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a2b      	ldr	r2, [pc, #172]	; (8001724 <para_init+0x100>)
 8001678:	6093      	str	r3, [r2, #8]
	    para_list[3] = dz;
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <para_init+0xf0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a29      	ldr	r2, [pc, #164]	; (8001724 <para_init+0x100>)
 8001680:	60d3      	str	r3, [r2, #12]
	    para_list[4] = zz;
 8001682:	4b25      	ldr	r3, [pc, #148]	; (8001718 <para_init+0xf4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a27      	ldr	r2, [pc, #156]	; (8001724 <para_init+0x100>)
 8001688:	6113      	str	r3, [r2, #16]
	    para_list[5] = aim_prs;
 800168a:	4b24      	ldr	r3, [pc, #144]	; (800171c <para_init+0xf8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a25      	ldr	r2, [pc, #148]	; (8001724 <para_init+0x100>)
 8001690:	6153      	str	r3, [r2, #20]
	    para_list[6] = ser_addr;
 8001692:	4b23      	ldr	r3, [pc, #140]	; (8001720 <para_init+0xfc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a23      	ldr	r2, [pc, #140]	; (8001724 <para_init+0x100>)
 8001698:	6193      	str	r3, [r2, #24]
	    para_list[7] = 0xCCUL;
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <para_init+0x100>)
 800169c:	22cc      	movs	r2, #204	; 0xcc
 800169e:	61da      	str	r2, [r3, #28]
	    save_para(para_list, 8);
 80016a0:	2108      	movs	r1, #8
 80016a2:	4820      	ldr	r0, [pc, #128]	; (8001724 <para_init+0x100>)
 80016a4:	f7ff ff20 	bl	80014e8 <save_para>
	    ser_addr = para_list[6];
	    para_list[7] = 0xCCUL;

	}

}
 80016a8:	e026      	b.n	80016f8 <para_init+0xd4>
	}else if(version == 1)
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <para_init+0xe0>)
 80016ac:	f993 3000 	ldrsb.w	r3, [r3]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d121      	bne.n	80016f8 <para_init+0xd4>
	    read_saved_para(8);
 80016b4:	2008      	movs	r0, #8
 80016b6:	f7ff ff79 	bl	80015ac <read_saved_para>
	    kp = para_list[0];
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <para_init+0x100>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <para_init+0xe4>)
 80016c0:	6013      	str	r3, [r2, #0]
	    ki = para_list[1];
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <para_init+0x100>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4a11      	ldr	r2, [pc, #68]	; (800170c <para_init+0xe8>)
 80016c8:	6013      	str	r3, [r2, #0]
	    kd = para_list[2];
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <para_init+0x100>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	4a10      	ldr	r2, [pc, #64]	; (8001710 <para_init+0xec>)
 80016d0:	6013      	str	r3, [r2, #0]
	    dz = para_list[3];
 80016d2:	4b14      	ldr	r3, [pc, #80]	; (8001724 <para_init+0x100>)
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <para_init+0xf0>)
 80016d8:	6013      	str	r3, [r2, #0]
	    zz = para_list[4];
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <para_init+0x100>)
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <para_init+0xf4>)
 80016e0:	6013      	str	r3, [r2, #0]
	    aim_prs = para_list[5];
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <para_init+0x100>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a0d      	ldr	r2, [pc, #52]	; (800171c <para_init+0xf8>)
 80016e8:	6013      	str	r3, [r2, #0]
	    ser_addr = para_list[6];
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <para_init+0x100>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	4a0c      	ldr	r2, [pc, #48]	; (8001720 <para_init+0xfc>)
 80016f0:	6013      	str	r3, [r2, #0]
	    para_list[7] = 0xCCUL;
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <para_init+0x100>)
 80016f4:	22cc      	movs	r2, #204	; 0xcc
 80016f6:	61da      	str	r2, [r3, #28]
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20001090 	.word	0x20001090
 8001700:	0801e000 	.word	0x0801e000
 8001704:	20000000 	.word	0x20000000
 8001708:	20001988 	.word	0x20001988
 800170c:	2000197c 	.word	0x2000197c
 8001710:	20001974 	.word	0x20001974
 8001714:	20001970 	.word	0x20001970
 8001718:	20001980 	.word	0x20001980
 800171c:	20001978 	.word	0x20001978
 8001720:	20001984 	.word	0x20001984
 8001724:	2000194c 	.word	0x2000194c

08001728 <delay_us>:

#include "cmsis_os.h"


void delay_us(__IO uint32_t delay)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	//not stable, use 1ms delay instead;
	osDelay(1);
 8001730:	2001      	movs	r0, #1
 8001732:	f006 fb5b 	bl	8007dec <osDelay>
            while ((val <= last) || (val > curr));
        }
        delay -= temp;
    }*/

}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <MX_DMA_Init+0x48>)
 8001748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800174a:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <MX_DMA_Init+0x48>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6493      	str	r3, [r2, #72]	; 0x48
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <MX_DMA_Init+0x48>)
 8001754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2105      	movs	r1, #5
 8001762:	2010      	movs	r0, #16
 8001764:	f001 fa3c 	bl	8002be0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001768:	2010      	movs	r0, #16
 800176a:	f001 fa55 	bl	8002c18 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2105      	movs	r1, #5
 8001772:	2011      	movs	r0, #17
 8001774:	f001 fa34 	bl	8002be0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001778:	2011      	movs	r0, #17
 800177a:	f001 fa4d 	bl	8002c18 <HAL_NVIC_EnableIRQ>

}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000

0800178c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800179c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	4a06      	ldr	r2, [pc, #24]	; (80017bc <vApplicationGetIdleTaskMemory+0x30>)
 80017a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	200000bc 	.word	0x200000bc
 80017bc:	20000110 	.word	0x20000110

080017c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80017c0:	b5b0      	push	{r4, r5, r7, lr}
 80017c2:	b09c      	sub	sp, #112	; 0x70
 80017c4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80017c6:	4b27      	ldr	r3, [pc, #156]	; (8001864 <MX_FREERTOS_Init+0xa4>)
 80017c8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80017cc:	461d      	mov	r5, r3
 80017ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80017da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f006 fab7 	bl	8007d54 <osThreadCreate>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4a1f      	ldr	r2, [pc, #124]	; (8001868 <MX_FREERTOS_Init+0xa8>)
 80017ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of pidTask */
  osThreadDef(pidTask, StartPID, osPriorityHigh, 0, 128);
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <MX_FREERTOS_Init+0xac>)
 80017ee:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80017f2:	461d      	mov	r5, r3
 80017f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pidTaskHandle = osThreadCreate(osThread(pidTask), NULL);
 8001800:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f006 faa4 	bl	8007d54 <osThreadCreate>
 800180c:	4603      	mov	r3, r0
 800180e:	4a18      	ldr	r2, [pc, #96]	; (8001870 <MX_FREERTOS_Init+0xb0>)
 8001810:	6013      	str	r3, [r2, #0]

  /* definition and creation of logTask */
  osThreadDef(logTask, StartLogTask, osPriorityLow, 0, 128);
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <MX_FREERTOS_Init+0xb4>)
 8001814:	f107 041c 	add.w	r4, r7, #28
 8001818:	461d      	mov	r5, r3
 800181a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800181c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800181e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001822:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  logTaskHandle = osThreadCreate(osThread(logTask), NULL);
 8001826:	f107 031c 	add.w	r3, r7, #28
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f006 fa91 	bl	8007d54 <osThreadCreate>
 8001832:	4603      	mov	r3, r0
 8001834:	4a10      	ldr	r2, [pc, #64]	; (8001878 <MX_FREERTOS_Init+0xb8>)
 8001836:	6013      	str	r3, [r2, #0]

  /* definition and creation of cmdTask */
  osThreadDef(cmdTask, StartCmdTask, osPriorityHigh, 0, 128);
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <MX_FREERTOS_Init+0xbc>)
 800183a:	463c      	mov	r4, r7
 800183c:	461d      	mov	r5, r3
 800183e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001842:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001846:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cmdTaskHandle = osThreadCreate(osThread(cmdTask), NULL);
 800184a:	463b      	mov	r3, r7
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f006 fa80 	bl	8007d54 <osThreadCreate>
 8001854:	4603      	mov	r3, r0
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <MX_FREERTOS_Init+0xc0>)
 8001858:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800185a:	bf00      	nop
 800185c:	3770      	adds	r7, #112	; 0x70
 800185e:	46bd      	mov	sp, r7
 8001860:	bdb0      	pop	{r4, r5, r7, pc}
 8001862:	bf00      	nop
 8001864:	0800a160 	.word	0x0800a160
 8001868:	2000198c 	.word	0x2000198c
 800186c:	0800a17c 	.word	0x0800a17c
 8001870:	20001998 	.word	0x20001998
 8001874:	0800a198 	.word	0x0800a198
 8001878:	20001990 	.word	0x20001990
 800187c:	0800a1b4 	.word	0x0800a1b4
 8001880:	20001994 	.word	0x20001994

08001884 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 800188c:	200a      	movs	r0, #10
 800188e:	f006 faad 	bl	8007dec <osDelay>
 8001892:	e7fb      	b.n	800188c <StartDefaultTask+0x8>

08001894 <StartPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPID */
void StartPID(void const * argument)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPID */
  /* Infinite loop */
  for(;;)
  {
	pid_run();
 800189c:	f000 f9f2 	bl	8001c84 <pid_run>
 80018a0:	e7fc      	b.n	800189c <StartPID+0x8>

080018a2 <StartLogTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLogTask */
void StartLogTask(void const * argument)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLogTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 80018aa:	200a      	movs	r0, #10
 80018ac:	f006 fa9e 	bl	8007dec <osDelay>
 80018b0:	e7fb      	b.n	80018aa <StartLogTask+0x8>

080018b2 <StartCmdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCmdTask */
void StartCmdTask(void const * argument)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCmdTask */
  /* Infinite loop */
  for(;;)
  {
	  serial2_thread_entry();
 80018ba:	f000 fbbb 	bl	8002034 <serial2_thread_entry>
 80018be:	e7fc      	b.n	80018ba <StartCmdTask+0x8>

080018c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <MX_GPIO_Init+0x90>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <MX_GPIO_Init+0x90>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e2:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <MX_GPIO_Init+0x90>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <MX_GPIO_Init+0x90>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	4a17      	ldr	r2, [pc, #92]	; (8001950 <MX_GPIO_Init+0x90>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <MX_GPIO_Init+0x90>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <MX_GPIO_Init+0x90>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	4a11      	ldr	r2, [pc, #68]	; (8001950 <MX_GPIO_Init+0x90>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <MX_GPIO_Init+0x90>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2110      	movs	r1, #16
 8001922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001926:	f001 ff4d 	bl	80037c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800192a:	2310      	movs	r3, #16
 800192c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192e:	2301      	movs	r3, #1
 8001930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001932:	2302      	movs	r3, #2
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	4619      	mov	r1, r3
 8001940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001944:	f001 fdd4 	bl	80034f0 <HAL_GPIO_Init>

}
 8001948:	bf00      	nop
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40021000 	.word	0x40021000

08001954 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <MX_I2C1_Init+0x74>)
 800195a:	4a1c      	ldr	r2, [pc, #112]	; (80019cc <MX_I2C1_Init+0x78>)
 800195c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <MX_I2C1_Init+0x74>)
 8001960:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <MX_I2C1_Init+0x7c>)
 8001962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <MX_I2C1_Init+0x74>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <MX_I2C1_Init+0x74>)
 800196c:	2201      	movs	r2, #1
 800196e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001970:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <MX_I2C1_Init+0x74>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <MX_I2C1_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <MX_I2C1_Init+0x74>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_I2C1_Init+0x74>)
 8001984:	2200      	movs	r2, #0
 8001986:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_I2C1_Init+0x74>)
 800198a:	2200      	movs	r2, #0
 800198c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800198e:	480e      	ldr	r0, [pc, #56]	; (80019c8 <MX_I2C1_Init+0x74>)
 8001990:	f001 ff30 	bl	80037f4 <HAL_I2C_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800199a:	f000 f949 	bl	8001c30 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800199e:	2100      	movs	r1, #0
 80019a0:	4809      	ldr	r0, [pc, #36]	; (80019c8 <MX_I2C1_Init+0x74>)
 80019a2:	f002 fc8b 	bl	80042bc <HAL_I2CEx_ConfigAnalogFilter>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019ac:	f000 f940 	bl	8001c30 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019b0:	2100      	movs	r1, #0
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_I2C1_Init+0x74>)
 80019b4:	f002 fccd 	bl	8004352 <HAL_I2CEx_ConfigDigitalFilter>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019be:	f000 f937 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000199c 	.word	0x2000199c
 80019cc:	40005400 	.word	0x40005400
 80019d0:	10909cec 	.word	0x10909cec

080019d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b09e      	sub	sp, #120	; 0x78
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	2254      	movs	r2, #84	; 0x54
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f007 fbc1 	bl	800917c <memset>
  if(i2cHandle->Instance==I2C1)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a1f      	ldr	r2, [pc, #124]	; (8001a7c <HAL_I2C_MspInit+0xa8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d137      	bne.n	8001a74 <HAL_I2C_MspInit+0xa0>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a04:	2340      	movs	r3, #64	; 0x40
 8001a06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	4618      	mov	r0, r3
 8001a12:	f003 fc05 	bl	8005220 <HAL_RCCEx_PeriphCLKConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a1c:	f000 f908 	bl	8001c30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <HAL_I2C_MspInit+0xac>)
 8001a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a24:	4a16      	ldr	r2, [pc, #88]	; (8001a80 <HAL_I2C_MspInit+0xac>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <HAL_I2C_MspInit+0xac>)
 8001a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a38:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a3c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a3e:	2312      	movs	r3, #18
 8001a40:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a52:	4619      	mov	r1, r3
 8001a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a58:	f001 fd4a 	bl	80034f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <HAL_I2C_MspInit+0xac>)
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a60:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <HAL_I2C_MspInit+0xac>)
 8001a62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a66:	6593      	str	r3, [r2, #88]	; 0x58
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_I2C_MspInit+0xac>)
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a74:	bf00      	nop
 8001a76:	3778      	adds	r7, #120	; 0x78
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40005400 	.word	0x40005400
 8001a80:	40021000 	.word	0x40021000

08001a84 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <MX_IWDG_Init+0x34>)
 8001a8a:	4a0c      	ldr	r2, [pc, #48]	; (8001abc <MX_IWDG_Init+0x38>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <MX_IWDG_Init+0x34>)
 8001a90:	2203      	movs	r2, #3
 8001a92:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <MX_IWDG_Init+0x34>)
 8001a96:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001a9a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 100;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_IWDG_Init+0x34>)
 8001a9e:	2264      	movs	r2, #100	; 0x64
 8001aa0:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_IWDG_Init+0x34>)
 8001aa4:	f002 fca1 	bl	80043ea <HAL_IWDG_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_IWDG_Init+0x2e>
  {
    Error_Handler();
 8001aae:	f000 f8bf 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20001060 	.word	0x20001060
 8001abc:	40003000 	.word	0x40003000

08001ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac2:	b091      	sub	sp, #68	; 0x44
 8001ac4:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ac6:	f000 ff9a 	bl	80029fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aca:	f000 f84d 	bl	8001b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ace:	f7ff fef7 	bl	80018c0 <MX_GPIO_Init>

  MX_TIM2_Init();
 8001ad2:	f000 fd29 	bl	8002528 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001ad6:	f000 fe27 	bl	8002728 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001ada:	f7ff ff3b 	bl	8001954 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001ade:	f000 fdf3 	bl	80026c8 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001ae2:	f7ff fe2d 	bl	8001740 <MX_DMA_Init>
  MX_IWDG_Init();
 8001ae6:	f7ff ffcd 	bl	8001a84 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  valve_stat = 0;
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <main+0x90>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
  HAL_IWDG_Refresh(&hiwdg);
 8001af0:	4818      	ldr	r0, [pc, #96]	; (8001b54 <main+0x94>)
 8001af2:	f002 fcc9 	bl	8004488 <HAL_IWDG_Refresh>
  i2c_init(hi2c1);
 8001af6:	4e18      	ldr	r6, [pc, #96]	; (8001b58 <main+0x98>)
 8001af8:	466d      	mov	r5, sp
 8001afa:	f106 0410 	add.w	r4, r6, #16
 8001afe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b0a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b0e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001b12:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001b16:	f7fe fd27 	bl	8000568 <i2c_init>
  para_init();
 8001b1a:	f7ff fd83 	bl	8001624 <para_init>
  uart2_init();
 8001b1e:	f000 fb1d 	bl	800215c <uart2_init>
  reply_init();
 8001b22:	f7fe feaf 	bl	8000884 <reply_init>
  HAL_IWDG_Refresh(&hiwdg);
 8001b26:	480b      	ldr	r0, [pc, #44]	; (8001b54 <main+0x94>)
 8001b28:	f002 fcae 	bl	8004488 <HAL_IWDG_Refresh>
  //save_para(para_list,8);
  printf("init done!");
 8001b2c:	480b      	ldr	r0, [pc, #44]	; (8001b5c <main+0x9c>)
 8001b2e:	f007 fb2d 	bl	800918c <iprintf>
  //while(HAL_UART_Receive_IT(&huart2, (uint8_t*)&aRxBuffer, 1)!=HAL_OK){HAL_Delay(1);};
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&aRxBuffer, 1);
 8001b32:	2201      	movs	r2, #1
 8001b34:	490a      	ldr	r1, [pc, #40]	; (8001b60 <main+0xa0>)
 8001b36:	480b      	ldr	r0, [pc, #44]	; (8001b64 <main+0xa4>)
 8001b38:	f004 ff0e 	bl	8006958 <HAL_UART_Receive_IT>
  //HAL_UART_Receive_DMA(&huart2, (uint8_t*)&aRxBuffer, 1);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001b3c:	f7ff fe40 	bl	80017c0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001b40:	f006 f901 	bl	8007d46 <osKernelStart>
 8001b44:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  //}
  /* USER CODE END 3 */
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3704      	adds	r7, #4
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000196e 	.word	0x2000196e
 8001b54:	20001060 	.word	0x20001060
 8001b58:	2000199c 	.word	0x2000199c
 8001b5c:	0800a1d0 	.word	0x0800a1d0
 8001b60:	200018b8 	.word	0x200018b8
 8001b64:	200018c4 	.word	0x200018c4

08001b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b096      	sub	sp, #88	; 0x58
 8001b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	2244      	movs	r2, #68	; 0x44
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f007 fb00 	bl	800917c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b8e:	f002 fc99 	bl	80044c4 <HAL_PWREx_ControlVoltageScaling>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b98:	f000 f84a 	bl	8001c30 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001b9c:	2309      	movs	r3, #9
 8001b9e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ba0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ba4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001baa:	2302      	movs	r3, #2
 8001bac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001bb6:	2314      	movs	r3, #20
 8001bb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001bba:	2307      	movs	r3, #7
 8001bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 fcd0 	bl	8004570 <HAL_RCC_OscConfig>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001bd6:	f000 f82b 	bl	8001c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bda:	230f      	movs	r3, #15
 8001bdc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bde:	2303      	movs	r3, #3
 8001be0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bee:	463b      	mov	r3, r7
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 f8dc 	bl	8004db0 <HAL_RCC_ClockConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001bfe:	f000 f817 	bl	8001c30 <Error_Handler>
  }
}
 8001c02:	bf00      	nop
 8001c04:	3758      	adds	r7, #88	; 0x58
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d101      	bne.n	8001c22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c1e:	f000 ff07 	bl	8002a30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40001400 	.word	0x40001400

08001c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c34:	b672      	cpsid	i
}
 8001c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <Error_Handler+0x8>
	...

08001c3c <pid_init>:

int32_t *prs_list;


void pid_init(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
    TIM2->CCR1 = 99;
 8001c40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c44:	2263      	movs	r2, #99	; 0x63
 8001c46:	635a      	str	r2, [r3, #52]	; 0x34
    TIM2->CCR2 = 99;
 8001c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c4c:	2263      	movs	r2, #99	; 0x63
 8001c4e:	639a      	str	r2, [r3, #56]	; 0x38
    err_curr = 0;
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <pid_init+0x38>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
    err_sum = 0;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <pid_init+0x3c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
    err_last = 0;
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <pid_init+0x40>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
    pwm_value = 0;
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <pid_init+0x44>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20001098 	.word	0x20001098
 8001c78:	200000b4 	.word	0x200000b4
 8001c7c:	200000b8 	.word	0x200000b8
 8001c80:	200018a4 	.word	0x200018a4

08001c84 <pid_run>:


void pid_run(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0

    prs_list = air_pressure();
 8001c88:	f7fe fcc0 	bl	800060c <air_pressure>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4a65      	ldr	r2, [pc, #404]	; (8001e24 <pid_run+0x1a0>)
 8001c90:	6013      	str	r3, [r2, #0]
    curr_prs = prs_list[4]; //unit is dPa
 8001c92:	4b64      	ldr	r3, [pc, #400]	; (8001e24 <pid_run+0x1a0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	4a63      	ldr	r2, [pc, #396]	; (8001e28 <pid_run+0x1a4>)
 8001c9a:	6013      	str	r3, [r2, #0]
    err_curr = aim_prs*10 - curr_prs; //unit is dPa
 8001c9c:	4b63      	ldr	r3, [pc, #396]	; (8001e2c <pid_run+0x1a8>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b5f      	ldr	r3, [pc, #380]	; (8001e28 <pid_run+0x1a4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	4a5f      	ldr	r2, [pc, #380]	; (8001e30 <pid_run+0x1ac>)
 8001cb2:	6013      	str	r3, [r2, #0]
    if (abs(err_curr) <= dz*10)
 8001cb4:	4b5e      	ldr	r3, [pc, #376]	; (8001e30 <pid_run+0x1ac>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001cbc:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001cc0:	4b5c      	ldr	r3, [pc, #368]	; (8001e34 <pid_run+0x1b0>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4299      	cmp	r1, r3
 8001cce:	dc02      	bgt.n	8001cd6 <pid_run+0x52>
    {
        pid_init();
 8001cd0:	f7ff ffb4 	bl	8001c3c <pid_init>
 8001cd4:	e0a0      	b.n	8001e18 <pid_run+0x194>
    }
    else
    {
        err_sum = err_sum + err_curr;
 8001cd6:	4b58      	ldr	r3, [pc, #352]	; (8001e38 <pid_run+0x1b4>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4b55      	ldr	r3, [pc, #340]	; (8001e30 <pid_run+0x1ac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a55      	ldr	r2, [pc, #340]	; (8001e38 <pid_run+0x1b4>)
 8001ce2:	6013      	str	r3, [r2, #0]

        pwm_value =(int32_t)(kp*err_curr/10 + ki*err_sum/1000000 + kd*(err_curr-err_last)/10);
 8001ce4:	4b55      	ldr	r3, [pc, #340]	; (8001e3c <pid_run+0x1b8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a51      	ldr	r2, [pc, #324]	; (8001e30 <pid_run+0x1ac>)
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	4a53      	ldr	r2, [pc, #332]	; (8001e40 <pid_run+0x1bc>)
 8001cf2:	fb82 1203 	smull	r1, r2, r2, r3
 8001cf6:	1092      	asrs	r2, r2, #2
 8001cf8:	17db      	asrs	r3, r3, #31
 8001cfa:	1ad2      	subs	r2, r2, r3
 8001cfc:	4b51      	ldr	r3, [pc, #324]	; (8001e44 <pid_run+0x1c0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	494d      	ldr	r1, [pc, #308]	; (8001e38 <pid_run+0x1b4>)
 8001d02:	6809      	ldr	r1, [r1, #0]
 8001d04:	fb01 f303 	mul.w	r3, r1, r3
 8001d08:	494f      	ldr	r1, [pc, #316]	; (8001e48 <pid_run+0x1c4>)
 8001d0a:	fb81 0103 	smull	r0, r1, r1, r3
 8001d0e:	1489      	asrs	r1, r1, #18
 8001d10:	17db      	asrs	r3, r3, #31
 8001d12:	1acb      	subs	r3, r1, r3
 8001d14:	441a      	add	r2, r3
 8001d16:	4b46      	ldr	r3, [pc, #280]	; (8001e30 <pid_run+0x1ac>)
 8001d18:	6819      	ldr	r1, [r3, #0]
 8001d1a:	4b4c      	ldr	r3, [pc, #304]	; (8001e4c <pid_run+0x1c8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	1acb      	subs	r3, r1, r3
 8001d20:	494b      	ldr	r1, [pc, #300]	; (8001e50 <pid_run+0x1cc>)
 8001d22:	6809      	ldr	r1, [r1, #0]
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	4945      	ldr	r1, [pc, #276]	; (8001e40 <pid_run+0x1bc>)
 8001d2a:	fb81 0103 	smull	r0, r1, r1, r3
 8001d2e:	1089      	asrs	r1, r1, #2
 8001d30:	17db      	asrs	r3, r3, #31
 8001d32:	1acb      	subs	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	4a47      	ldr	r2, [pc, #284]	; (8001e54 <pid_run+0x1d0>)
 8001d38:	6013      	str	r3, [r2, #0]
        //HAL_IWDG_Refresh(&hiwdg);


        if(abs(pwm_value) > 100)
 8001d3a:	4b46      	ldr	r3, [pc, #280]	; (8001e54 <pid_run+0x1d0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	bfb8      	it	lt
 8001d42:	425b      	neglt	r3, r3
 8001d44:	2b64      	cmp	r3, #100	; 0x64
 8001d46:	dd0f      	ble.n	8001d68 <pid_run+0xe4>
        {
            if(pwm_value > 0)
 8001d48:	4b42      	ldr	r3, [pc, #264]	; (8001e54 <pid_run+0x1d0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	dd03      	ble.n	8001d58 <pid_run+0xd4>
            {
                pwm_value = 100;
 8001d50:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <pid_run+0x1d0>)
 8001d52:	2264      	movs	r2, #100	; 0x64
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	e007      	b.n	8001d68 <pid_run+0xe4>
            }else if(pwm_value < 0)
 8001d58:	4b3e      	ldr	r3, [pc, #248]	; (8001e54 <pid_run+0x1d0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	da03      	bge.n	8001d68 <pid_run+0xe4>
            {
                pwm_value = -100;
 8001d60:	4b3c      	ldr	r3, [pc, #240]	; (8001e54 <pid_run+0x1d0>)
 8001d62:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8001d66:	601a      	str	r2, [r3, #0]
        }
        else if(pwm_value < 25)
        {
            pwm_value = 1;
        }*/
        err_last = err_curr;
 8001d68:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <pid_run+0x1ac>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a37      	ldr	r2, [pc, #220]	; (8001e4c <pid_run+0x1c8>)
 8001d6e:	6013      	str	r3, [r2, #0]
        if(pwm_value > 0 )//NORMAL > 0
 8001d70:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <pid_run+0x1d0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	dd21      	ble.n	8001dbc <pid_run+0x138>
        {
            pwm_value = abs(pwm_value);
 8001d78:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <pid_run+0x1d0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	bfb8      	it	lt
 8001d80:	425b      	neglt	r3, r3
 8001d82:	4a34      	ldr	r2, [pc, #208]	; (8001e54 <pid_run+0x1d0>)
 8001d84:	6013      	str	r3, [r2, #0]
            pwm_value = pwm_value*6/10+25;
 8001d86:	4b33      	ldr	r3, [pc, #204]	; (8001e54 <pid_run+0x1d0>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4a2b      	ldr	r2, [pc, #172]	; (8001e40 <pid_run+0x1bc>)
 8001d94:	fb82 1203 	smull	r1, r2, r2, r3
 8001d98:	1092      	asrs	r2, r2, #2
 8001d9a:	17db      	asrs	r3, r3, #31
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	3319      	adds	r3, #25
 8001da0:	4a2c      	ldr	r2, [pc, #176]	; (8001e54 <pid_run+0x1d0>)
 8001da2:	6013      	str	r3, [r2, #0]

            TIM2->CCR1 = 99-(pwm_value);//air in
 8001da4:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <pid_run+0x1d0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 8001dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001db0:	635a      	str	r2, [r3, #52]	; 0x34
            TIM2->CCR2 = 99 ;
 8001db2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001db6:	2263      	movs	r2, #99	; 0x63
 8001db8:	639a      	str	r2, [r3, #56]	; 0x38
 8001dba:	e02d      	b.n	8001e18 <pid_run+0x194>
        }
        else if (pwm_value < 0 )
 8001dbc:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <pid_run+0x1d0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	da21      	bge.n	8001e08 <pid_run+0x184>
        {
            pwm_value = abs(pwm_value);
 8001dc4:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <pid_run+0x1d0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bfb8      	it	lt
 8001dcc:	425b      	neglt	r3, r3
 8001dce:	4a21      	ldr	r2, [pc, #132]	; (8001e54 <pid_run+0x1d0>)
 8001dd0:	6013      	str	r3, [r2, #0]
            pwm_value = pwm_value*6/10+25;
 8001dd2:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <pid_run+0x1d0>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <pid_run+0x1bc>)
 8001de0:	fb82 1203 	smull	r1, r2, r2, r3
 8001de4:	1092      	asrs	r2, r2, #2
 8001de6:	17db      	asrs	r3, r3, #31
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	3319      	adds	r3, #25
 8001dec:	4a19      	ldr	r2, [pc, #100]	; (8001e54 <pid_run+0x1d0>)
 8001dee:	6013      	str	r3, [r2, #0]

            TIM2->CCR1 = 99;
 8001df0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001df4:	2263      	movs	r2, #99	; 0x63
 8001df6:	635a      	str	r2, [r3, #52]	; 0x34
            TIM2->CCR2 = 99-(pwm_value);//air release
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <pid_run+0x1d0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 8001e00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e04:	639a      	str	r2, [r3, #56]	; 0x38
 8001e06:	e007      	b.n	8001e18 <pid_run+0x194>
        }
        else
        {
            TIM2->CCR1 = 99;
 8001e08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e0c:	2263      	movs	r2, #99	; 0x63
 8001e0e:	635a      	str	r2, [r3, #52]	; 0x34
            TIM2->CCR2 = 99;
 8001e10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e14:	2263      	movs	r2, #99	; 0x63
 8001e16:	639a      	str	r2, [r3, #56]	; 0x38
        }

    }
    HAL_IWDG_Refresh(&hiwdg);
 8001e18:	480f      	ldr	r0, [pc, #60]	; (8001e58 <pid_run+0x1d4>)
 8001e1a:	f002 fb35 	bl	8004488 <HAL_IWDG_Refresh>
    //printf("pid_running \r\n");
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200019e8 	.word	0x200019e8
 8001e28:	20001948 	.word	0x20001948
 8001e2c:	20001978 	.word	0x20001978
 8001e30:	20001098 	.word	0x20001098
 8001e34:	20001970 	.word	0x20001970
 8001e38:	200000b4 	.word	0x200000b4
 8001e3c:	20001988 	.word	0x20001988
 8001e40:	66666667 	.word	0x66666667
 8001e44:	2000197c 	.word	0x2000197c
 8001e48:	431bde83 	.word	0x431bde83
 8001e4c:	200000b8 	.word	0x200000b8
 8001e50:	20001974 	.word	0x20001974
 8001e54:	200018a4 	.word	0x200018a4
 8001e58:	20001060 	.word	0x20001060

08001e5c <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
    UNUSED(huart);

    __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_PE);
 8001e64:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <HAL_UART_RxCpltCallback+0xf0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_FE);
 8001e6c:	4b37      	ldr	r3, [pc, #220]	; (8001f4c <HAL_UART_RxCpltCallback+0xf0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2202      	movs	r2, #2
 8001e72:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_NE);
 8001e74:	4b35      	ldr	r3, [pc, #212]	; (8001f4c <HAL_UART_RxCpltCallback+0xf0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2204      	movs	r2, #4
 8001e7a:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_ORE);
 8001e7c:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <HAL_UART_RxCpltCallback+0xf0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2208      	movs	r2, #8
 8001e82:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_RXNE);
 8001e84:	4b31      	ldr	r3, [pc, #196]	; (8001f4c <HAL_UART_RxCpltCallback+0xf0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_CMF);
 8001e8c:	4b2f      	ldr	r3, [pc, #188]	; (8001f4c <HAL_UART_RxCpltCallback+0xf0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e94:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_BUSY);
 8001e96:	4b2d      	ldr	r3, [pc, #180]	; (8001f4c <HAL_UART_RxCpltCallback+0xf0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e9e:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_TXE);
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <HAL_UART_RxCpltCallback+0xf0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2280      	movs	r2, #128	; 0x80
 8001ea6:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_IDLE);
 8001ea8:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <HAL_UART_RxCpltCallback+0xf0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2210      	movs	r2, #16
 8001eae:	621a      	str	r2, [r3, #32]

    //__HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_);
    if(huart == &huart2){
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a26      	ldr	r2, [pc, #152]	; (8001f4c <HAL_UART_RxCpltCallback+0xf0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d145      	bne.n	8001f44 <HAL_UART_RxCpltCallback+0xe8>
    //if(huart->Instance == USART2 ){
    	if(rx_index < buff_size)
 8001eb8:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <HAL_UART_RxCpltCallback+0xf4>)
 8001eba:	881a      	ldrh	r2, [r3, #0]
 8001ebc:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_UART_RxCpltCallback+0xf8>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d215      	bcs.n	8001ef0 <HAL_UART_RxCpltCallback+0x94>
    	{
    		rx_buffer[rx_index] = aRxBuffer;
 8001ec4:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <HAL_UART_RxCpltCallback+0xfc>)
 8001ec6:	7819      	ldrb	r1, [r3, #0]
 8001ec8:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <HAL_UART_RxCpltCallback+0xf4>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	b289      	uxth	r1, r1
 8001ed0:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <HAL_UART_RxCpltCallback+0x100>)
 8001ed2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    		rx_index++;
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <HAL_UART_RxCpltCallback+0xf4>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	3301      	adds	r3, #1
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <HAL_UART_RxCpltCallback+0xf4>)
 8001ee0:	801a      	strh	r2, [r3, #0]
    		rx_flag++;
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <HAL_UART_RxCpltCallback+0x104>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_UART_RxCpltCallback+0x104>)
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	e017      	b.n	8001f20 <HAL_UART_RxCpltCallback+0xc4>
    	}else{
    		rx_index = 0;
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <HAL_UART_RxCpltCallback+0xf4>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	801a      	strh	r2, [r3, #0]
    		rx_buffer[rx_index] = aRxBuffer;
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_UART_RxCpltCallback+0xfc>)
 8001ef8:	7819      	ldrb	r1, [r3, #0]
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_UART_RxCpltCallback+0xf4>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	b289      	uxth	r1, r1
 8001f02:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <HAL_UART_RxCpltCallback+0x100>)
 8001f04:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    		rx_index++;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_UART_RxCpltCallback+0xf4>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <HAL_UART_RxCpltCallback+0xf4>)
 8001f12:	801a      	strh	r2, [r3, #0]
    		rx_flag++;
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_UART_RxCpltCallback+0x104>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <HAL_UART_RxCpltCallback+0x104>)
 8001f1e:	701a      	strb	r2, [r3, #0]

    	}
    	data_bytes ++;
 8001f20:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_UART_RxCpltCallback+0x108>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	3301      	adds	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_UART_RxCpltCallback+0x108>)
 8001f2a:	801a      	strh	r2, [r3, #0]
        ////huart->Instance->RQR |= USART_RQR_RXFRQ;
        //SET_BIT(huart->Instance->RQR, USART_RQR_RXFRQ);
        //SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
    }*/
    	//HAL_UART_Receive_IT(&huart2, (uint8_t*)&aRxBuffer, 1);
    	while(HAL_UART_Receive_IT(&huart2, (uint8_t*)&aRxBuffer, 1)!=HAL_OK){osDelay(1);};
 8001f2c:	e002      	b.n	8001f34 <HAL_UART_RxCpltCallback+0xd8>
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f005 ff5c 	bl	8007dec <osDelay>
 8001f34:	2201      	movs	r2, #1
 8001f36:	4908      	ldr	r1, [pc, #32]	; (8001f58 <HAL_UART_RxCpltCallback+0xfc>)
 8001f38:	4804      	ldr	r0, [pc, #16]	; (8001f4c <HAL_UART_RxCpltCallback+0xf0>)
 8001f3a:	f004 fd0d 	bl	8006958 <HAL_UART_Receive_IT>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f4      	bne.n	8001f2e <HAL_UART_RxCpltCallback+0xd2>
    	//HAL_UART_Receive_DMA(&huart2, (uint8_t*)&aRxBuffer, 1);

    	//HAL_IWDG_Refresh(&hiwdg);

    }
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200018c4 	.word	0x200018c4
 8001f50:	2000196c 	.word	0x2000196c
 8001f54:	20000002 	.word	0x20000002
 8001f58:	200018b8 	.word	0x200018b8
 8001f5c:	200010a0 	.word	0x200010a0
 8001f60:	2000196f 	.word	0x2000196f
 8001f64:	2000109c 	.word	0x2000109c

08001f68 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback (UART_HandleTypeDef * huart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <HAL_UART_ErrorCallback+0x20>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d102      	bne.n	8001f7e <HAL_UART_ErrorCallback+0x16>
	{
		printf("uart2 err \r\n");
 8001f78:	4804      	ldr	r0, [pc, #16]	; (8001f8c <HAL_UART_ErrorCallback+0x24>)
 8001f7a:	f007 f98d 	bl	8009298 <puts>
	}
	//HAL_UART_Receive_IT(&UART1_Handler,(u8 *)aRxBuffer, RXBUFFERSIZE);

}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200018c4 	.word	0x200018c4
 8001f8c:	0800a1dc 	.word	0x0800a1dc

08001f90 <read_1_byte>:


//static int read_1_byte(uint8_t *buffer)
void read_1_byte()
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
		//while(HAL_UART_Receive_DMA(&huart2, (uint8_t*)&aRxBuffer, 1)!=HAL_OK){osDelay(1);};
        while(rx_flag<1)
 8001f94:	e005      	b.n	8001fa2 <read_1_byte+0x12>
        {delay_us(100);HAL_IWDG_Refresh(&hiwdg);}
 8001f96:	2064      	movs	r0, #100	; 0x64
 8001f98:	f7ff fbc6 	bl	8001728 <delay_us>
 8001f9c:	481e      	ldr	r0, [pc, #120]	; (8002018 <read_1_byte+0x88>)
 8001f9e:	f002 fa73 	bl	8004488 <HAL_IWDG_Refresh>
        while(rx_flag<1)
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	; (800201c <read_1_byte+0x8c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f5      	beq.n	8001f96 <read_1_byte+0x6>
        //{delay_us(100);}
        rx_flag--;
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <read_1_byte+0x8c>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	; (800201c <read_1_byte+0x8c>)
 8001fb4:	701a      	strb	r2, [r3, #0]

        if(read_index < buff_size)
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <read_1_byte+0x90>)
 8001fb8:	881a      	ldrh	r2, [r3, #0]
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <read_1_byte+0x94>)
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d20f      	bcs.n	8001fe2 <read_1_byte+0x52>
        {
            //buffer = &rx_buffer[read_index];
            sig_head = rx_buffer[read_index];
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <read_1_byte+0x90>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4b17      	ldr	r3, [pc, #92]	; (8002028 <read_1_byte+0x98>)
 8001fca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <read_1_byte+0x9c>)
 8001fd2:	701a      	strb	r2, [r3, #0]
            read_index++;
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <read_1_byte+0x90>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	4b10      	ldr	r3, [pc, #64]	; (8002020 <read_1_byte+0x90>)
 8001fde:	801a      	strh	r2, [r3, #0]
 8001fe0:	e011      	b.n	8002006 <read_1_byte+0x76>
        }else{
            read_index = 0;
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <read_1_byte+0x90>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	801a      	strh	r2, [r3, #0]
            //buffer = &rx_buffer[read_index];
            sig_head = rx_buffer[read_index];
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <read_1_byte+0x90>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <read_1_byte+0x98>)
 8001ff0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <read_1_byte+0x9c>)
 8001ff8:	701a      	strb	r2, [r3, #0]
            read_index++;
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <read_1_byte+0x90>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	3301      	adds	r3, #1
 8002000:	b29a      	uxth	r2, r3
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <read_1_byte+0x90>)
 8002004:	801a      	strh	r2, [r3, #0]
        }

        data_bytes--;
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <read_1_byte+0xa0>)
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	3b01      	subs	r3, #1
 800200c:	b29a      	uxth	r2, r3
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <read_1_byte+0xa0>)
 8002010:	801a      	strh	r2, [r3, #0]
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20001060 	.word	0x20001060
 800201c:	2000196f 	.word	0x2000196f
 8002020:	2000108c 	.word	0x2000108c
 8002024:	20000002 	.word	0x20000002
 8002028:	200010a0 	.word	0x200010a0
 800202c:	200018a0 	.word	0x200018a0
 8002030:	2000109c 	.word	0x2000109c

08002034 <serial2_thread_entry>:




void serial2_thread_entry()
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
    //uint8_t sig_head;
    uint8_t cmd_words[8];
    cmd_words[0] = 0x5EU;
 800203a:	235e      	movs	r3, #94	; 0x5e
 800203c:	703b      	strb	r3, [r7, #0]

    while (1)
    {


        int i = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
        /*while (read_1_byte() != 1)
        {++++++++++++++++++++++++++++
            rt_sem_take(&rx2_sem, RT_WAITING_FOREVER);
        }*/
        //HAL_UART_Transmit(&huart2, &test_words[0], 3, 2);
        read_1_byte();
 8002042:	f7ff ffa5 	bl	8001f90 <read_1_byte>
        HAL_IWDG_Refresh(&hiwdg);
 8002046:	4840      	ldr	r0, [pc, #256]	; (8002148 <serial2_thread_entry+0x114>)
 8002048:	f002 fa1e 	bl	8004488 <HAL_IWDG_Refresh>
        //rt_kprintf("10ok");
        if (sig_head == 0x5EU)
 800204c:	4b3f      	ldr	r3, [pc, #252]	; (800214c <serial2_thread_entry+0x118>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b5e      	cmp	r3, #94	; 0x5e
 8002052:	d175      	bne.n	8002140 <serial2_thread_entry+0x10c>
        {
            cmd_words[0] = sig_head;
 8002054:	4b3d      	ldr	r3, [pc, #244]	; (800214c <serial2_thread_entry+0x118>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	703b      	strb	r3, [r7, #0]
            i = 1;
 800205a:	2301      	movs	r3, #1
 800205c:	60fb      	str	r3, [r7, #12]

            while(i < sizeof(cmd_words)/sizeof(uint8_t)){
 800205e:	e00b      	b.n	8002078 <serial2_thread_entry+0x44>
                //read_1_byte(&sig_head);
                read_1_byte();
 8002060:	f7ff ff96 	bl	8001f90 <read_1_byte>
                cmd_words[i] = sig_head;
 8002064:	4b39      	ldr	r3, [pc, #228]	; (800214c <serial2_thread_entry+0x118>)
 8002066:	7819      	ldrb	r1, [r3, #0]
 8002068:	463a      	mov	r2, r7
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4413      	add	r3, r2
 800206e:	460a      	mov	r2, r1
 8002070:	701a      	strb	r2, [r3, #0]
                i +=1 ;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3301      	adds	r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
            while(i < sizeof(cmd_words)/sizeof(uint8_t)){
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b07      	cmp	r3, #7
 800207c:	d9f0      	bls.n	8002060 <serial2_thread_entry+0x2c>

            }
            i -= 1;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3b01      	subs	r3, #1
 8002082:	60fb      	str	r3, [r7, #12]
            if((cmd_words[1] == ser_addr) || (cmd_words[1] == 0xFFU))
 8002084:	787b      	ldrb	r3, [r7, #1]
 8002086:	461a      	mov	r2, r3
 8002088:	4b31      	ldr	r3, [pc, #196]	; (8002150 <serial2_thread_entry+0x11c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d002      	beq.n	8002096 <serial2_thread_entry+0x62>
 8002090:	787b      	ldrb	r3, [r7, #1]
 8002092:	2bff      	cmp	r3, #255	; 0xff
 8002094:	d141      	bne.n	800211a <serial2_thread_entry+0xe6>
            {
                uint16_t wReCRC = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	817b      	strh	r3, [r7, #10]
                wReCRC = wCRCCheck_Uart_Data(&cmd_words[0], 4);
 800209a:	463b      	mov	r3, r7
 800209c:	2104      	movs	r1, #4
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f87c 	bl	800219c <wCRCCheck_Uart_Data>
 80020a4:	4603      	mov	r3, r0
 80020a6:	817b      	strh	r3, [r7, #10]

                if (((cmd_words[6] == (wReCRC & 0xFFU)) && (cmd_words[7] == ((wReCRC >> 8) & 0xFFU))) || ((cmd_words[6] == 0xAAU) && (cmd_words[7] == 0xBBU)))
 80020a8:	79bb      	ldrb	r3, [r7, #6]
 80020aa:	461a      	mov	r2, r3
 80020ac:	897b      	ldrh	r3, [r7, #10]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d107      	bne.n	80020c4 <serial2_thread_entry+0x90>
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	461a      	mov	r2, r3
 80020b8:	897b      	ldrh	r3, [r7, #10]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	b29b      	uxth	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d005      	beq.n	80020d0 <serial2_thread_entry+0x9c>
 80020c4:	79bb      	ldrb	r3, [r7, #6]
 80020c6:	2baa      	cmp	r3, #170	; 0xaa
 80020c8:	d108      	bne.n	80020dc <serial2_thread_entry+0xa8>
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	2bbb      	cmp	r3, #187	; 0xbb
 80020ce:	d105      	bne.n	80020dc <serial2_thread_entry+0xa8>

                {
                    cmd_deliver(cmd_words, sizeof(cmd_words)/sizeof(cmd_words[0]));
 80020d0:	463b      	mov	r3, r7
 80020d2:	2108      	movs	r1, #8
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fbfb 	bl	80008d0 <cmd_deliver>
            {
 80020da:	e031      	b.n	8002140 <serial2_thread_entry+0x10c>
                }else{//CRC error
                    cmd_words[3] = 0xFFU;
 80020dc:	23ff      	movs	r3, #255	; 0xff
 80020de:	70fb      	strb	r3, [r7, #3]
                    cmd_words[4] = 0x07U;
 80020e0:	2307      	movs	r3, #7
 80020e2:	713b      	strb	r3, [r7, #4]
                    while(tx_flag<1)
 80020e4:	e002      	b.n	80020ec <serial2_thread_entry+0xb8>
                    //{delay_us(50); HAL_IWDG_Refresh(&hiwdg);}
                    {delay_us(50);}
 80020e6:	2032      	movs	r0, #50	; 0x32
 80020e8:	f7ff fb1e 	bl	8001728 <delay_us>
                    while(tx_flag<1)
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <serial2_thread_entry+0x120>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f8      	beq.n	80020e6 <serial2_thread_entry+0xb2>
                    tx_flag--;
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <serial2_thread_entry+0x120>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	4b15      	ldr	r3, [pc, #84]	; (8002154 <serial2_thread_entry+0x120>)
 80020fe:	701a      	strb	r2, [r3, #0]
                    //rt_sem_take(&tx2_sem, RT_WAITING_FOREVER);
                    //HAL_UART_Transmit_DMA(&huart2, &cmd_words[0], 8);
                    HAL_UART_Transmit(&huart2, &cmd_words[0], 8, 2);
 8002100:	4639      	mov	r1, r7
 8002102:	2302      	movs	r3, #2
 8002104:	2208      	movs	r2, #8
 8002106:	4814      	ldr	r0, [pc, #80]	; (8002158 <serial2_thread_entry+0x124>)
 8002108:	f004 fb92 	bl	8006830 <HAL_UART_Transmit>
                    //while(HAL_UART_Transmit(&huart2, &cmd_words[0], 8, 2) != HAL_OK){osDelay(1); HAL_IWDG_Refresh(&hiwdg);};
                    //rt_thread_mdelay(1);
                    tx_flag = 1;
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <serial2_thread_entry+0x120>)
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
            {
 8002112:	e015      	b.n	8002140 <serial2_thread_entry+0x10c>
                //while((HAL_UART_Transmit(&huart2, &cmd_words[0], 8, 1) != HAL_OK) && dog<7)
                //while(dog<7)
                //{
                while(tx_flag<1)
                //{delay_us(50); HAL_IWDG_Refresh(&hiwdg);}
                {delay_us(50);}
 8002114:	2032      	movs	r0, #50	; 0x32
 8002116:	f7ff fb07 	bl	8001728 <delay_us>
                while(tx_flag<1)
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <serial2_thread_entry+0x120>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f8      	beq.n	8002114 <serial2_thread_entry+0xe0>
                tx_flag--;
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <serial2_thread_entry+0x120>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	3b01      	subs	r3, #1
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <serial2_thread_entry+0x120>)
 800212c:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart2, &cmd_words[0], 8, 2);
 800212e:	4639      	mov	r1, r7
 8002130:	2302      	movs	r3, #2
 8002132:	2208      	movs	r2, #8
 8002134:	4808      	ldr	r0, [pc, #32]	; (8002158 <serial2_thread_entry+0x124>)
 8002136:	f004 fb7b 	bl	8006830 <HAL_UART_Transmit>
                //HAL_UART_Transmit_DMA(&huart2, &cmd_words[0], 8);
                //while(HAL_UART_Transmit(&huart2, &cmd_words[0], 8, 2) != HAL_OK){osDelay(1); HAL_IWDG_Refresh(&hiwdg);};
                //rt_thread_mdelay(1);
                tx_flag = 1;
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <serial2_thread_entry+0x120>)
 800213c:	2201      	movs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
                //    dog++;
                //}
                //rt_sem_release(&tx2_sem);
            }
        }
        i=0;
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
    {
 8002144:	e77b      	b.n	800203e <serial2_thread_entry+0xa>
 8002146:	bf00      	nop
 8002148:	20001060 	.word	0x20001060
 800214c:	200018a0 	.word	0x200018a0
 8002150:	20001984 	.word	0x20001984
 8002154:	20001094 	.word	0x20001094
 8002158:	200018c4 	.word	0x200018c4

0800215c <uart2_init>:





void uart2_init(void){
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

    rx_index = 0;
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <uart2_init+0x2c>)
 8002162:	2200      	movs	r2, #0
 8002164:	801a      	strh	r2, [r3, #0]
    read_index = 0;
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <uart2_init+0x30>)
 8002168:	2200      	movs	r2, #0
 800216a:	801a      	strh	r2, [r3, #0]
    data_bytes = 0;
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <uart2_init+0x34>)
 800216e:	2200      	movs	r2, #0
 8002170:	801a      	strh	r2, [r3, #0]
    rx_flag = 0;
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <uart2_init+0x38>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
    tx_flag = 1;
 8002178:	4b07      	ldr	r3, [pc, #28]	; (8002198 <uart2_init+0x3c>)
 800217a:	2201      	movs	r2, #1
 800217c:	701a      	strb	r2, [r3, #0]
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	2000196c 	.word	0x2000196c
 800218c:	2000108c 	.word	0x2000108c
 8002190:	2000109c 	.word	0x2000109c
 8002194:	2000196f 	.word	0x2000196f
 8002198:	20001094 	.word	0x20001094

0800219c <wCRCCheck_Uart_Data>:


uint16_t wCRCCheck_Uart_Data(uint8_t *bpData, uint8_t bLen)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	70fb      	strb	r3, [r7, #3]
    uint8_t i, j;
    uint8_t bTemp = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	737b      	strb	r3, [r7, #13]
    uint16_t wResulrCrc = 0xffff;
 80021ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021b0:	817b      	strh	r3, [r7, #10]
    if (bLen == 0) {
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d030      	beq.n	800221a <wCRCCheck_Uart_Data+0x7e>
        goto Exit;
    }

    for (i = 1; i < bLen; i++) {
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	e028      	b.n	8002210 <wCRCCheck_Uart_Data+0x74>
        bTemp = *(bpData + 2 + i);  //bpData[3:6) (3 bytes) were used to perform CRC
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	3302      	adds	r3, #2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	737b      	strb	r3, [r7, #13]
        for (j = 0; j < 8; j++) {
 80021ca:	2300      	movs	r3, #0
 80021cc:	73bb      	strb	r3, [r7, #14]
 80021ce:	e019      	b.n	8002204 <wCRCCheck_Uart_Data+0x68>
            if (((wResulrCrc ^ bTemp) & 0x0001) != 0)
 80021d0:	897a      	ldrh	r2, [r7, #10]
 80021d2:	7b7b      	ldrb	r3, [r7, #13]
 80021d4:	4053      	eors	r3, r2
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d009      	beq.n	80021f2 <wCRCCheck_Uart_Data+0x56>
                    {
                wResulrCrc >>= 1;
 80021de:	897b      	ldrh	r3, [r7, #10]
 80021e0:	085b      	lsrs	r3, r3, #1
 80021e2:	817b      	strh	r3, [r7, #10]
                wResulrCrc ^= 0x1021;
 80021e4:	897b      	ldrh	r3, [r7, #10]
 80021e6:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80021ea:	f083 0301 	eor.w	r3, r3, #1
 80021ee:	817b      	strh	r3, [r7, #10]
 80021f0:	e002      	b.n	80021f8 <wCRCCheck_Uart_Data+0x5c>
            } else {
                wResulrCrc >>= 1;
 80021f2:	897b      	ldrh	r3, [r7, #10]
 80021f4:	085b      	lsrs	r3, r3, #1
 80021f6:	817b      	strh	r3, [r7, #10]
            }
            bTemp >>= 1;
 80021f8:	7b7b      	ldrb	r3, [r7, #13]
 80021fa:	085b      	lsrs	r3, r3, #1
 80021fc:	737b      	strb	r3, [r7, #13]
        for (j = 0; j < 8; j++) {
 80021fe:	7bbb      	ldrb	r3, [r7, #14]
 8002200:	3301      	adds	r3, #1
 8002202:	73bb      	strb	r3, [r7, #14]
 8002204:	7bbb      	ldrb	r3, [r7, #14]
 8002206:	2b07      	cmp	r3, #7
 8002208:	d9e2      	bls.n	80021d0 <wCRCCheck_Uart_Data+0x34>
    for (i = 1; i < bLen; i++) {
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	3301      	adds	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	429a      	cmp	r2, r3
 8002216:	d3d2      	bcc.n	80021be <wCRCCheck_Uart_Data+0x22>
        }
    }
    Exit: return wResulrCrc + 1;
 8002218:	e000      	b.n	800221c <wCRCCheck_Uart_Data+0x80>
        goto Exit;
 800221a:	bf00      	nop
    Exit: return wResulrCrc + 1;
 800221c:	897b      	ldrh	r3, [r7, #10]
 800221e:	3301      	adds	r3, #1
 8002220:	b29b      	uxth	r3, r3
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_MspInit+0x4c>)
 8002238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223a:	4a10      	ldr	r2, [pc, #64]	; (800227c <HAL_MspInit+0x4c>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6613      	str	r3, [r2, #96]	; 0x60
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <HAL_MspInit+0x4c>)
 8002244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_MspInit+0x4c>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	4a0a      	ldr	r2, [pc, #40]	; (800227c <HAL_MspInit+0x4c>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	6593      	str	r3, [r2, #88]	; 0x58
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <HAL_MspInit+0x4c>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	210f      	movs	r1, #15
 800226a:	f06f 0001 	mvn.w	r0, #1
 800226e:	f000 fcb7 	bl	8002be0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000

08002280 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08c      	sub	sp, #48	; 0x30
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8002290:	2200      	movs	r2, #0
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	2037      	movs	r0, #55	; 0x37
 8002296:	f000 fca3 	bl	8002be0 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800229a:	2037      	movs	r0, #55	; 0x37
 800229c:	f000 fcbc 	bl	8002c18 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80022a0:	4b1e      	ldr	r3, [pc, #120]	; (800231c <HAL_InitTick+0x9c>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	4a1d      	ldr	r2, [pc, #116]	; (800231c <HAL_InitTick+0x9c>)
 80022a6:	f043 0320 	orr.w	r3, r3, #32
 80022aa:	6593      	str	r3, [r2, #88]	; 0x58
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <HAL_InitTick+0x9c>)
 80022ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022b8:	f107 0210 	add.w	r2, r7, #16
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 ff1a 	bl	80050fc <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80022c8:	f002 feec 	bl	80050a4 <HAL_RCC_GetPCLK1Freq>
 80022cc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	4a13      	ldr	r2, [pc, #76]	; (8002320 <HAL_InitTick+0xa0>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	0c9b      	lsrs	r3, r3, #18
 80022d8:	3b01      	subs	r3, #1
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_InitTick+0xa4>)
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <HAL_InitTick+0xa8>)
 80022e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_InitTick+0xa4>)
 80022e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022e8:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80022ea:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <HAL_InitTick+0xa4>)
 80022ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ee:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_InitTick+0xa4>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_InitTick+0xa4>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80022fc:	4809      	ldr	r0, [pc, #36]	; (8002324 <HAL_InitTick+0xa4>)
 80022fe:	f003 fa75 	bl	80057ec <HAL_TIM_Base_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d104      	bne.n	8002312 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002308:	4806      	ldr	r0, [pc, #24]	; (8002324 <HAL_InitTick+0xa4>)
 800230a:	f003 fad1 	bl	80058b0 <HAL_TIM_Base_Start_IT>
 800230e:	4603      	mov	r3, r0
 8002310:	e000      	b.n	8002314 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
}
 8002314:	4618      	mov	r0, r3
 8002316:	3730      	adds	r7, #48	; 0x30
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	431bde83 	.word	0x431bde83
 8002324:	200019ec 	.word	0x200019ec
 8002328:	40001400 	.word	0x40001400

0800232c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002330:	e7fe      	b.n	8002330 <NMI_Handler+0x4>

08002332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002336:	e7fe      	b.n	8002336 <HardFault_Handler+0x4>

08002338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800233c:	e7fe      	b.n	800233c <MemManage_Handler+0x4>

0800233e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002342:	e7fe      	b.n	8002342 <BusFault_Handler+0x4>

08002344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002348:	e7fe      	b.n	8002348 <UsageFault_Handler+0x4>

0800234a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <DMA1_Channel6_IRQHandler+0x10>)
 800235e:	f000 fda0 	bl	8002ea2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20001a84 	.word	0x20001a84

0800236c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <DMA1_Channel7_IRQHandler+0x10>)
 8002372:	f000 fd96 	bl	8002ea2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20001acc 	.word	0x20001acc

08002380 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002384:	4802      	ldr	r0, [pc, #8]	; (8002390 <USART1_IRQHandler+0x10>)
 8002386:	f004 fb3d 	bl	8006a04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20001b14 	.word	0x20001b14

08002394 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002398:	4802      	ldr	r0, [pc, #8]	; (80023a4 <USART2_IRQHandler+0x10>)
 800239a:	f004 fb33 	bl	8006a04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200018c4 	.word	0x200018c4

080023a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <TIM7_IRQHandler+0x10>)
 80023ae:	f003 fc09 	bl	8005bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	200019ec 	.word	0x200019ec

080023bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	e00a      	b.n	80023e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023ce:	f3af 8000 	nop.w
 80023d2:	4601      	mov	r1, r0
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	60ba      	str	r2, [r7, #8]
 80023da:	b2ca      	uxtb	r2, r1
 80023dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3301      	adds	r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	dbf0      	blt.n	80023ce <_read+0x12>
	}

return len;
 80023ec:	687b      	ldr	r3, [r7, #4]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	e009      	b.n	800241c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	60ba      	str	r2, [r7, #8]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f000 f947 	bl	80026a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3301      	adds	r3, #1
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	429a      	cmp	r2, r3
 8002422:	dbf1      	blt.n	8002408 <_write+0x12>
	}
	return len;
 8002424:	687b      	ldr	r3, [r7, #4]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <_close>:

int _close(int file)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
	return -1;
 8002436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002456:	605a      	str	r2, [r3, #4]
	return 0;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <_isatty>:

int _isatty(int file)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
	return 1;
 800246e:	2301      	movs	r3, #1
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
	return 0;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024a0:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <_sbrk+0x5c>)
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <_sbrk+0x60>)
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <_sbrk+0x64>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <_sbrk+0x64>)
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <_sbrk+0x68>)
 80024b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <_sbrk+0x64>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d207      	bcs.n	80024d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024c8:	f006 fe20 	bl	800910c <__errno>
 80024cc:	4603      	mov	r3, r0
 80024ce:	220c      	movs	r2, #12
 80024d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	e009      	b.n	80024ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <_sbrk+0x64>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <_sbrk+0x64>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <_sbrk+0x64>)
 80024e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ea:	68fb      	ldr	r3, [r7, #12]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	2000c000 	.word	0x2000c000
 80024f8:	00000400 	.word	0x00000400
 80024fc:	20000310 	.word	0x20000310
 8002500:	20001bb0 	.word	0x20001bb0

08002504 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <SystemInit+0x20>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	4a05      	ldr	r2, [pc, #20]	; (8002524 <SystemInit+0x20>)
 8002510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	; 0x28
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800252e:	f107 031c 	add.w	r3, r7, #28
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800253a:	463b      	mov	r3, r7
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
 8002548:	615a      	str	r2, [r3, #20]
 800254a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <MX_TIM2_Init+0xd4>)
 800254e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002552:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8002554:	4b29      	ldr	r3, [pc, #164]	; (80025fc <MX_TIM2_Init+0xd4>)
 8002556:	222f      	movs	r2, #47	; 0x2f
 8002558:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255a:	4b28      	ldr	r3, [pc, #160]	; (80025fc <MX_TIM2_Init+0xd4>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002560:	4b26      	ldr	r3, [pc, #152]	; (80025fc <MX_TIM2_Init+0xd4>)
 8002562:	2263      	movs	r2, #99	; 0x63
 8002564:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002566:	4b25      	ldr	r3, [pc, #148]	; (80025fc <MX_TIM2_Init+0xd4>)
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256c:	4b23      	ldr	r3, [pc, #140]	; (80025fc <MX_TIM2_Init+0xd4>)
 800256e:	2200      	movs	r2, #0
 8002570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002572:	4822      	ldr	r0, [pc, #136]	; (80025fc <MX_TIM2_Init+0xd4>)
 8002574:	f003 f9f0 	bl	8005958 <HAL_TIM_PWM_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800257e:	f7ff fb57 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002586:	2300      	movs	r3, #0
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800258a:	f107 031c 	add.w	r3, r7, #28
 800258e:	4619      	mov	r1, r3
 8002590:	481a      	ldr	r0, [pc, #104]	; (80025fc <MX_TIM2_Init+0xd4>)
 8002592:	f004 f87b 	bl	800668c <HAL_TIMEx_MasterConfigSynchronization>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800259c:	f7ff fb48 	bl	8001c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025a0:	2360      	movs	r3, #96	; 0x60
 80025a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80025a4:	2332      	movs	r3, #50	; 0x32
 80025a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025b0:	463b      	mov	r3, r7
 80025b2:	2200      	movs	r2, #0
 80025b4:	4619      	mov	r1, r3
 80025b6:	4811      	ldr	r0, [pc, #68]	; (80025fc <MX_TIM2_Init+0xd4>)
 80025b8:	f003 fc24 	bl	8005e04 <HAL_TIM_PWM_ConfigChannel>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80025c2:	f7ff fb35 	bl	8001c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025c6:	463b      	mov	r3, r7
 80025c8:	2204      	movs	r2, #4
 80025ca:	4619      	mov	r1, r3
 80025cc:	480b      	ldr	r0, [pc, #44]	; (80025fc <MX_TIM2_Init+0xd4>)
 80025ce:	f003 fc19 	bl	8005e04 <HAL_TIM_PWM_ConfigChannel>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80025d8:	f7ff fb2a 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80025dc:	2100      	movs	r1, #0
 80025de:	4807      	ldr	r0, [pc, #28]	; (80025fc <MX_TIM2_Init+0xd4>)
 80025e0:	f003 fa12 	bl	8005a08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80025e4:	2104      	movs	r1, #4
 80025e6:	4805      	ldr	r0, [pc, #20]	; (80025fc <MX_TIM2_Init+0xd4>)
 80025e8:	f003 fa0e 	bl	8005a08 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025ec:	4803      	ldr	r0, [pc, #12]	; (80025fc <MX_TIM2_Init+0xd4>)
 80025ee:	f000 f825 	bl	800263c <HAL_TIM_MspPostInit>

}
 80025f2:	bf00      	nop
 80025f4:	3728      	adds	r7, #40	; 0x28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20001a38 	.word	0x20001a38

08002600 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002610:	d10b      	bne.n	800262a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_TIM_PWM_MspInit+0x38>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002616:	4a08      	ldr	r2, [pc, #32]	; (8002638 <HAL_TIM_PWM_MspInit+0x38>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6593      	str	r3, [r2, #88]	; 0x58
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_TIM_PWM_MspInit+0x38>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000

0800263c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265c:	d11c      	bne.n	8002698 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <HAL_TIM_MspPostInit+0x64>)
 8002660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002662:	4a0f      	ldr	r2, [pc, #60]	; (80026a0 <HAL_TIM_MspPostInit+0x64>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800266a:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <HAL_TIM_MspPostInit+0x64>)
 800266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002676:	2322      	movs	r3, #34	; 0x22
 8002678:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2300      	movs	r3, #0
 8002684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002686:	2301      	movs	r3, #1
 8002688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268a:	f107 030c 	add.w	r3, r7, #12
 800268e:	4619      	mov	r1, r3
 8002690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002694:	f000 ff2c 	bl	80034f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002698:	bf00      	nop
 800269a:	3720      	adds	r7, #32
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000

080026a4 <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80026ac:	1d39      	adds	r1, r7, #4
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	2201      	movs	r2, #1
 80026b4:	4803      	ldr	r0, [pc, #12]	; (80026c4 <__io_putchar+0x20>)
 80026b6:	f004 f8bb 	bl	8006830 <HAL_UART_Transmit>
  return ch;
 80026ba:	687b      	ldr	r3, [r7, #4]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20001b14 	.word	0x20001b14

080026c8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026cc:	4b14      	ldr	r3, [pc, #80]	; (8002720 <MX_USART1_UART_Init+0x58>)
 80026ce:	4a15      	ldr	r2, [pc, #84]	; (8002724 <MX_USART1_UART_Init+0x5c>)
 80026d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <MX_USART1_UART_Init+0x58>)
 80026d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026da:	4b11      	ldr	r3, [pc, #68]	; (8002720 <MX_USART1_UART_Init+0x58>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026e0:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <MX_USART1_UART_Init+0x58>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <MX_USART1_UART_Init+0x58>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <MX_USART1_UART_Init+0x58>)
 80026ee:	220c      	movs	r2, #12
 80026f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <MX_USART1_UART_Init+0x58>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <MX_USART1_UART_Init+0x58>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <MX_USART1_UART_Init+0x58>)
 8002700:	2200      	movs	r2, #0
 8002702:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <MX_USART1_UART_Init+0x58>)
 8002706:	2200      	movs	r2, #0
 8002708:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800270a:	4805      	ldr	r0, [pc, #20]	; (8002720 <MX_USART1_UART_Init+0x58>)
 800270c:	f004 f842 	bl	8006794 <HAL_UART_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002716:	f7ff fa8b 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20001b14 	.word	0x20001b14
 8002724:	40013800 	.word	0x40013800

08002728 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800272c:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <MX_USART2_UART_Init+0x70>)
 800272e:	4a1b      	ldr	r2, [pc, #108]	; (800279c <MX_USART2_UART_Init+0x74>)
 8002730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002732:	4b19      	ldr	r3, [pc, #100]	; (8002798 <MX_USART2_UART_Init+0x70>)
 8002734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800273a:	4b17      	ldr	r3, [pc, #92]	; (8002798 <MX_USART2_UART_Init+0x70>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002740:	4b15      	ldr	r3, [pc, #84]	; (8002798 <MX_USART2_UART_Init+0x70>)
 8002742:	2200      	movs	r2, #0
 8002744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002746:	4b14      	ldr	r3, [pc, #80]	; (8002798 <MX_USART2_UART_Init+0x70>)
 8002748:	2200      	movs	r2, #0
 800274a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <MX_USART2_UART_Init+0x70>)
 800274e:	220c      	movs	r2, #12
 8002750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <MX_USART2_UART_Init+0x70>)
 8002754:	2200      	movs	r2, #0
 8002756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <MX_USART2_UART_Init+0x70>)
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <MX_USART2_UART_Init+0x70>)
 8002760:	2200      	movs	r2, #0
 8002762:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <MX_USART2_UART_Init+0x70>)
 8002766:	2230      	movs	r2, #48	; 0x30
 8002768:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <MX_USART2_UART_Init+0x70>)
 800276c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002770:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <MX_USART2_UART_Init+0x70>)
 8002774:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002778:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800277a:	4807      	ldr	r0, [pc, #28]	; (8002798 <MX_USART2_UART_Init+0x70>)
 800277c:	f004 f80a 	bl	8006794 <HAL_UART_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_USART2_UART_Init+0x62>
  {
    Error_Handler();
 8002786:	f7ff fa53 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
 // while(HAL_UART_Receive_IT(&huart2, (uint8_t*)&aRxBuffer, 1)!=HAL_OK){HAL_Delay(1);};
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&aRxBuffer, 1);
 800278a:	2201      	movs	r2, #1
 800278c:	4904      	ldr	r1, [pc, #16]	; (80027a0 <MX_USART2_UART_Init+0x78>)
 800278e:	4802      	ldr	r0, [pc, #8]	; (8002798 <MX_USART2_UART_Init+0x70>)
 8002790:	f004 f8e2 	bl	8006958 <HAL_UART_Receive_IT>
  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);	// VERY IMPORTANT

  /* USER CODE END USART2_Init 2 */

}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}
 8002798:	200018c4 	.word	0x200018c4
 800279c:	40004400 	.word	0x40004400
 80027a0:	200018b8 	.word	0x200018b8

080027a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b0a0      	sub	sp, #128	; 0x80
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027bc:	f107 0318 	add.w	r3, r7, #24
 80027c0:	2254      	movs	r2, #84	; 0x54
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f006 fcd9 	bl	800917c <memset>
  if(uartHandle->Instance==USART1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a6f      	ldr	r2, [pc, #444]	; (800298c <HAL_UART_MspInit+0x1e8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d13e      	bne.n	8002852 <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80027d4:	2301      	movs	r3, #1
 80027d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80027d8:	2300      	movs	r3, #0
 80027da:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027dc:	f107 0318 	add.w	r3, r7, #24
 80027e0:	4618      	mov	r0, r3
 80027e2:	f002 fd1d 	bl	8005220 <HAL_RCCEx_PeriphCLKConfig>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80027ec:	f7ff fa20 	bl	8001c30 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027f0:	4b67      	ldr	r3, [pc, #412]	; (8002990 <HAL_UART_MspInit+0x1ec>)
 80027f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f4:	4a66      	ldr	r2, [pc, #408]	; (8002990 <HAL_UART_MspInit+0x1ec>)
 80027f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027fa:	6613      	str	r3, [r2, #96]	; 0x60
 80027fc:	4b64      	ldr	r3, [pc, #400]	; (8002990 <HAL_UART_MspInit+0x1ec>)
 80027fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002808:	4b61      	ldr	r3, [pc, #388]	; (8002990 <HAL_UART_MspInit+0x1ec>)
 800280a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280c:	4a60      	ldr	r2, [pc, #384]	; (8002990 <HAL_UART_MspInit+0x1ec>)
 800280e:	f043 0302 	orr.w	r3, r3, #2
 8002812:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002814:	4b5e      	ldr	r3, [pc, #376]	; (8002990 <HAL_UART_MspInit+0x1ec>)
 8002816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002820:	23c0      	movs	r3, #192	; 0xc0
 8002822:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002830:	2307      	movs	r3, #7
 8002832:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002834:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002838:	4619      	mov	r1, r3
 800283a:	4856      	ldr	r0, [pc, #344]	; (8002994 <HAL_UART_MspInit+0x1f0>)
 800283c:	f000 fe58 	bl	80034f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002840:	2200      	movs	r2, #0
 8002842:	2105      	movs	r1, #5
 8002844:	2025      	movs	r0, #37	; 0x25
 8002846:	f000 f9cb 	bl	8002be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800284a:	2025      	movs	r0, #37	; 0x25
 800284c:	f000 f9e4 	bl	8002c18 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002850:	e098      	b.n	8002984 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART2)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a50      	ldr	r2, [pc, #320]	; (8002998 <HAL_UART_MspInit+0x1f4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	f040 8093 	bne.w	8002984 <HAL_UART_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800285e:	2302      	movs	r3, #2
 8002860:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002862:	2300      	movs	r3, #0
 8002864:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002866:	f107 0318 	add.w	r3, r7, #24
 800286a:	4618      	mov	r0, r3
 800286c:	f002 fcd8 	bl	8005220 <HAL_RCCEx_PeriphCLKConfig>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002876:	f7ff f9db 	bl	8001c30 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800287a:	4b45      	ldr	r3, [pc, #276]	; (8002990 <HAL_UART_MspInit+0x1ec>)
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287e:	4a44      	ldr	r2, [pc, #272]	; (8002990 <HAL_UART_MspInit+0x1ec>)
 8002880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002884:	6593      	str	r3, [r2, #88]	; 0x58
 8002886:	4b42      	ldr	r3, [pc, #264]	; (8002990 <HAL_UART_MspInit+0x1ec>)
 8002888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	4b3f      	ldr	r3, [pc, #252]	; (8002990 <HAL_UART_MspInit+0x1ec>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	4a3e      	ldr	r2, [pc, #248]	; (8002990 <HAL_UART_MspInit+0x1ec>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800289e:	4b3c      	ldr	r3, [pc, #240]	; (8002990 <HAL_UART_MspInit+0x1ec>)
 80028a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028aa:	230c      	movs	r3, #12
 80028ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b6:	2303      	movs	r3, #3
 80028b8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028ba:	2307      	movs	r3, #7
 80028bc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028c2:	4619      	mov	r1, r3
 80028c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c8:	f000 fe12 	bl	80034f0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80028cc:	4b33      	ldr	r3, [pc, #204]	; (800299c <HAL_UART_MspInit+0x1f8>)
 80028ce:	4a34      	ldr	r2, [pc, #208]	; (80029a0 <HAL_UART_MspInit+0x1fc>)
 80028d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80028d2:	4b32      	ldr	r3, [pc, #200]	; (800299c <HAL_UART_MspInit+0x1f8>)
 80028d4:	2202      	movs	r2, #2
 80028d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028d8:	4b30      	ldr	r3, [pc, #192]	; (800299c <HAL_UART_MspInit+0x1f8>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028de:	4b2f      	ldr	r3, [pc, #188]	; (800299c <HAL_UART_MspInit+0x1f8>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028e4:	4b2d      	ldr	r3, [pc, #180]	; (800299c <HAL_UART_MspInit+0x1f8>)
 80028e6:	2280      	movs	r2, #128	; 0x80
 80028e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ea:	4b2c      	ldr	r3, [pc, #176]	; (800299c <HAL_UART_MspInit+0x1f8>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028f0:	4b2a      	ldr	r3, [pc, #168]	; (800299c <HAL_UART_MspInit+0x1f8>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80028f6:	4b29      	ldr	r3, [pc, #164]	; (800299c <HAL_UART_MspInit+0x1f8>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028fc:	4b27      	ldr	r3, [pc, #156]	; (800299c <HAL_UART_MspInit+0x1f8>)
 80028fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002902:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002904:	4825      	ldr	r0, [pc, #148]	; (800299c <HAL_UART_MspInit+0x1f8>)
 8002906:	f000 f995 	bl	8002c34 <HAL_DMA_Init>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8002910:	f7ff f98e 	bl	8001c30 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a21      	ldr	r2, [pc, #132]	; (800299c <HAL_UART_MspInit+0x1f8>)
 8002918:	671a      	str	r2, [r3, #112]	; 0x70
 800291a:	4a20      	ldr	r2, [pc, #128]	; (800299c <HAL_UART_MspInit+0x1f8>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002920:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <HAL_UART_MspInit+0x200>)
 8002922:	4a21      	ldr	r2, [pc, #132]	; (80029a8 <HAL_UART_MspInit+0x204>)
 8002924:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8002926:	4b1f      	ldr	r3, [pc, #124]	; (80029a4 <HAL_UART_MspInit+0x200>)
 8002928:	2202      	movs	r2, #2
 800292a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800292c:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <HAL_UART_MspInit+0x200>)
 800292e:	2210      	movs	r2, #16
 8002930:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002932:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <HAL_UART_MspInit+0x200>)
 8002934:	2200      	movs	r2, #0
 8002936:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002938:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <HAL_UART_MspInit+0x200>)
 800293a:	2280      	movs	r2, #128	; 0x80
 800293c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800293e:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_UART_MspInit+0x200>)
 8002940:	2200      	movs	r2, #0
 8002942:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002944:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <HAL_UART_MspInit+0x200>)
 8002946:	2200      	movs	r2, #0
 8002948:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800294a:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <HAL_UART_MspInit+0x200>)
 800294c:	2200      	movs	r2, #0
 800294e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002950:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <HAL_UART_MspInit+0x200>)
 8002952:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002956:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002958:	4812      	ldr	r0, [pc, #72]	; (80029a4 <HAL_UART_MspInit+0x200>)
 800295a:	f000 f96b 	bl	8002c34 <HAL_DMA_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8002964:	f7ff f964 	bl	8001c30 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <HAL_UART_MspInit+0x200>)
 800296c:	66da      	str	r2, [r3, #108]	; 0x6c
 800296e:	4a0d      	ldr	r2, [pc, #52]	; (80029a4 <HAL_UART_MspInit+0x200>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002974:	2200      	movs	r2, #0
 8002976:	2105      	movs	r1, #5
 8002978:	2026      	movs	r0, #38	; 0x26
 800297a:	f000 f931 	bl	8002be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800297e:	2026      	movs	r0, #38	; 0x26
 8002980:	f000 f94a 	bl	8002c18 <HAL_NVIC_EnableIRQ>
}
 8002984:	bf00      	nop
 8002986:	3780      	adds	r7, #128	; 0x80
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40013800 	.word	0x40013800
 8002990:	40021000 	.word	0x40021000
 8002994:	48000400 	.word	0x48000400
 8002998:	40004400 	.word	0x40004400
 800299c:	20001a84 	.word	0x20001a84
 80029a0:	4002006c 	.word	0x4002006c
 80029a4:	20001acc 	.word	0x20001acc
 80029a8:	40020080 	.word	0x40020080

080029ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80029ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029b0:	f7ff fda8 	bl	8002504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029b4:	480c      	ldr	r0, [pc, #48]	; (80029e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80029b6:	490d      	ldr	r1, [pc, #52]	; (80029ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80029b8:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <LoopForever+0xe>)
  movs r3, #0
 80029ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029bc:	e002      	b.n	80029c4 <LoopCopyDataInit>

080029be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029c2:	3304      	adds	r3, #4

080029c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029c8:	d3f9      	bcc.n	80029be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ca:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029cc:	4c0a      	ldr	r4, [pc, #40]	; (80029f8 <LoopForever+0x16>)
  movs r3, #0
 80029ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d0:	e001      	b.n	80029d6 <LoopFillZerobss>

080029d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d4:	3204      	adds	r2, #4

080029d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029d8:	d3fb      	bcc.n	80029d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029da:	f006 fb9d 	bl	8009118 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029de:	f7ff f86f 	bl	8001ac0 <main>

080029e2 <LoopForever>:

LoopForever:
    b LoopForever
 80029e2:	e7fe      	b.n	80029e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029e4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80029e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029ec:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80029f0:	0800a2e0 	.word	0x0800a2e0
  ldr r2, =_sbss
 80029f4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80029f8:	20001bac 	.word	0x20001bac

080029fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029fc:	e7fe      	b.n	80029fc <ADC1_IRQHandler>

080029fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a08:	2003      	movs	r0, #3
 8002a0a:	f000 f8de 	bl	8002bca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a0e:	200f      	movs	r0, #15
 8002a10:	f7ff fc36 	bl	8002280 <HAL_InitTick>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	71fb      	strb	r3, [r7, #7]
 8002a1e:	e001      	b.n	8002a24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a20:	f7ff fc06 	bl	8002230 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a24:	79fb      	ldrb	r3, [r7, #7]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_IncTick+0x20>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_IncTick+0x24>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <HAL_IncTick+0x24>)
 8002a42:	6013      	str	r3, [r2, #0]
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	2000000c 	.word	0x2000000c
 8002a54:	20001b98 	.word	0x20001b98

08002a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <HAL_GetTick+0x14>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20001b98 	.word	0x20001b98

08002a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa2:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	60d3      	str	r3, [r2, #12]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	0a1b      	lsrs	r3, r3, #8
 8002ac2:	f003 0307 	and.w	r3, r3, #7
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	db0b      	blt.n	8002afe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	f003 021f 	and.w	r2, r3, #31
 8002aec:	4907      	ldr	r1, [pc, #28]	; (8002b0c <__NVIC_EnableIRQ+0x38>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2001      	movs	r0, #1
 8002af6:	fa00 f202 	lsl.w	r2, r0, r2
 8002afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000e100 	.word	0xe000e100

08002b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	db0a      	blt.n	8002b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	490c      	ldr	r1, [pc, #48]	; (8002b5c <__NVIC_SetPriority+0x4c>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	0112      	lsls	r2, r2, #4
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	440b      	add	r3, r1
 8002b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b38:	e00a      	b.n	8002b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4908      	ldr	r1, [pc, #32]	; (8002b60 <__NVIC_SetPriority+0x50>)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	3b04      	subs	r3, #4
 8002b48:	0112      	lsls	r2, r2, #4
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	761a      	strb	r2, [r3, #24]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000e100 	.word	0xe000e100
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	; 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f1c3 0307 	rsb	r3, r3, #7
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	bf28      	it	cs
 8002b82:	2304      	movcs	r3, #4
 8002b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d902      	bls.n	8002b94 <NVIC_EncodePriority+0x30>
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3b03      	subs	r3, #3
 8002b92:	e000      	b.n	8002b96 <NVIC_EncodePriority+0x32>
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bac:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	43d9      	mvns	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	4313      	orrs	r3, r2
         );
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff ff4c 	bl	8002a70 <__NVIC_SetPriorityGrouping>
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf2:	f7ff ff61 	bl	8002ab8 <__NVIC_GetPriorityGrouping>
 8002bf6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	6978      	ldr	r0, [r7, #20]
 8002bfe:	f7ff ffb1 	bl	8002b64 <NVIC_EncodePriority>
 8002c02:	4602      	mov	r2, r0
 8002c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff ff80 	bl	8002b10 <__NVIC_SetPriority>
}
 8002c10:	bf00      	nop
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff ff54 	bl	8002ad4 <__NVIC_EnableIRQ>
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e098      	b.n	8002d78 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4b4d      	ldr	r3, [pc, #308]	; (8002d84 <HAL_DMA_Init+0x150>)
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d80f      	bhi.n	8002c72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	4b4b      	ldr	r3, [pc, #300]	; (8002d88 <HAL_DMA_Init+0x154>)
 8002c5a:	4413      	add	r3, r2
 8002c5c:	4a4b      	ldr	r2, [pc, #300]	; (8002d8c <HAL_DMA_Init+0x158>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	009a      	lsls	r2, r3, #2
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a48      	ldr	r2, [pc, #288]	; (8002d90 <HAL_DMA_Init+0x15c>)
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c70:	e00e      	b.n	8002c90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	4b46      	ldr	r3, [pc, #280]	; (8002d94 <HAL_DMA_Init+0x160>)
 8002c7a:	4413      	add	r3, r2
 8002c7c:	4a43      	ldr	r2, [pc, #268]	; (8002d8c <HAL_DMA_Init+0x158>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	091b      	lsrs	r3, r3, #4
 8002c84:	009a      	lsls	r2, r3, #2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a42      	ldr	r2, [pc, #264]	; (8002d98 <HAL_DMA_Init+0x164>)
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002caa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002cb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ccc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cea:	d039      	beq.n	8002d60 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	4a27      	ldr	r2, [pc, #156]	; (8002d90 <HAL_DMA_Init+0x15c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d11a      	bne.n	8002d2c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002cf6:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <HAL_DMA_Init+0x168>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	f003 031c 	and.w	r3, r3, #28
 8002d02:	210f      	movs	r1, #15
 8002d04:	fa01 f303 	lsl.w	r3, r1, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	4924      	ldr	r1, [pc, #144]	; (8002d9c <HAL_DMA_Init+0x168>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d10:	4b22      	ldr	r3, [pc, #136]	; (8002d9c <HAL_DMA_Init+0x168>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1c:	f003 031c 	and.w	r3, r3, #28
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	491d      	ldr	r1, [pc, #116]	; (8002d9c <HAL_DMA_Init+0x168>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]
 8002d2a:	e019      	b.n	8002d60 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d2c:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <HAL_DMA_Init+0x16c>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d34:	f003 031c 	and.w	r3, r3, #28
 8002d38:	210f      	movs	r1, #15
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	4917      	ldr	r1, [pc, #92]	; (8002da0 <HAL_DMA_Init+0x16c>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d46:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <HAL_DMA_Init+0x16c>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6859      	ldr	r1, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f003 031c 	and.w	r3, r3, #28
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	4911      	ldr	r1, [pc, #68]	; (8002da0 <HAL_DMA_Init+0x16c>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	40020407 	.word	0x40020407
 8002d88:	bffdfff8 	.word	0xbffdfff8
 8002d8c:	cccccccd 	.word	0xcccccccd
 8002d90:	40020000 	.word	0x40020000
 8002d94:	bffdfbf8 	.word	0xbffdfbf8
 8002d98:	40020400 	.word	0x40020400
 8002d9c:	400200a8 	.word	0x400200a8
 8002da0:	400204a8 	.word	0x400204a8

08002da4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d008      	beq.n	8002dce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e022      	b.n	8002e14 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 020e 	bic.w	r2, r2, #14
 8002ddc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	f003 021c 	and.w	r2, r3, #28
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002e00:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d005      	beq.n	8002e44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
 8002e42:	e029      	b.n	8002e98 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 020e 	bic.w	r2, r2, #14
 8002e52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e68:	f003 021c 	and.w	r2, r3, #28
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	2101      	movs	r1, #1
 8002e72:	fa01 f202 	lsl.w	r2, r1, r2
 8002e76:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	4798      	blx	r3
    }
  }
  return status;
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	f003 031c 	and.w	r3, r3, #28
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d026      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x7a>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d021      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d107      	bne.n	8002ef6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0204 	bic.w	r2, r2, #4
 8002ef4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	f003 021c 	and.w	r2, r3, #28
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	2104      	movs	r1, #4
 8002f04:	fa01 f202 	lsl.w	r2, r1, r2
 8002f08:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d071      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002f1a:	e06c      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	f003 031c 	and.w	r3, r3, #28
 8002f24:	2202      	movs	r2, #2
 8002f26:	409a      	lsls	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d02e      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xec>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d029      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 020a 	bic.w	r2, r2, #10
 8002f56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f64:	f003 021c 	and.w	r2, r3, #28
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	2102      	movs	r1, #2
 8002f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f72:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d038      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f8c:	e033      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	f003 031c 	and.w	r3, r3, #28
 8002f96:	2208      	movs	r2, #8
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d02a      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x156>
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d025      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 020e 	bic.w	r2, r2, #14
 8002fba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	f003 021c 	and.w	r2, r3, #28
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	2101      	movs	r1, #1
 8002fca:	fa01 f202 	lsl.w	r2, r1, r2
 8002fce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d004      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ff6:	bf00      	nop
 8002ff8:	bf00      	nop
}
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003012:	4b2f      	ldr	r3, [pc, #188]	; (80030d0 <HAL_FLASH_Program+0xd0>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_FLASH_Program+0x1e>
 800301a:	2302      	movs	r3, #2
 800301c:	e053      	b.n	80030c6 <HAL_FLASH_Program+0xc6>
 800301e:	4b2c      	ldr	r3, [pc, #176]	; (80030d0 <HAL_FLASH_Program+0xd0>)
 8003020:	2201      	movs	r2, #1
 8003022:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003024:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003028:	f000 f888 	bl	800313c <FLASH_WaitForLastOperation>
 800302c:	4603      	mov	r3, r0
 800302e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003030:	7dfb      	ldrb	r3, [r7, #23]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d143      	bne.n	80030be <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003036:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <HAL_FLASH_Program+0xd0>)
 8003038:	2200      	movs	r2, #0
 800303a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800303c:	4b25      	ldr	r3, [pc, #148]	; (80030d4 <HAL_FLASH_Program+0xd4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	d009      	beq.n	800305c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003048:	4b22      	ldr	r3, [pc, #136]	; (80030d4 <HAL_FLASH_Program+0xd4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a21      	ldr	r2, [pc, #132]	; (80030d4 <HAL_FLASH_Program+0xd4>)
 800304e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003052:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003054:	4b1e      	ldr	r3, [pc, #120]	; (80030d0 <HAL_FLASH_Program+0xd0>)
 8003056:	2202      	movs	r2, #2
 8003058:	771a      	strb	r2, [r3, #28]
 800305a:	e002      	b.n	8003062 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800305c:	4b1c      	ldr	r3, [pc, #112]	; (80030d0 <HAL_FLASH_Program+0xd0>)
 800305e:	2200      	movs	r2, #0
 8003060:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d107      	bne.n	8003078 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800306c:	68b8      	ldr	r0, [r7, #8]
 800306e:	f000 f8bd 	bl	80031ec <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003072:	2301      	movs	r3, #1
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	e010      	b.n	800309a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d002      	beq.n	8003084 <HAL_FLASH_Program+0x84>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d10a      	bne.n	800309a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	4619      	mov	r1, r3
 8003088:	68b8      	ldr	r0, [r7, #8]
 800308a:	f000 f8d5 	bl	8003238 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b02      	cmp	r3, #2
 8003092:	d102      	bne.n	800309a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003094:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003098:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800309a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800309e:	f000 f84d 	bl	800313c <FLASH_WaitForLastOperation>
 80030a2:	4603      	mov	r3, r0
 80030a4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d006      	beq.n	80030ba <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80030ac:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <HAL_FLASH_Program+0xd4>)
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	4907      	ldr	r1, [pc, #28]	; (80030d4 <HAL_FLASH_Program+0xd4>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80030ba:	f000 f9cf 	bl	800345c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80030be:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <HAL_FLASH_Program+0xd0>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]

  return status;
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000010 	.word	0x20000010
 80030d4:	40022000 	.word	0x40022000

080030d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_FLASH_Unlock+0x38>)
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	da0b      	bge.n	8003102 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_FLASH_Unlock+0x38>)
 80030ec:	4a09      	ldr	r2, [pc, #36]	; (8003114 <HAL_FLASH_Unlock+0x3c>)
 80030ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80030f0:	4b07      	ldr	r3, [pc, #28]	; (8003110 <HAL_FLASH_Unlock+0x38>)
 80030f2:	4a09      	ldr	r2, [pc, #36]	; (8003118 <HAL_FLASH_Unlock+0x40>)
 80030f4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_FLASH_Unlock+0x38>)
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	da01      	bge.n	8003102 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003102:	79fb      	ldrb	r3, [r7, #7]
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	40022000 	.word	0x40022000
 8003114:	45670123 	.word	0x45670123
 8003118:	cdef89ab 	.word	0xcdef89ab

0800311c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_FLASH_Lock+0x1c>)
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	4a04      	ldr	r2, [pc, #16]	; (8003138 <HAL_FLASH_Lock+0x1c>)
 8003126:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800312a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40022000 	.word	0x40022000

0800313c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003144:	f7ff fc88 	bl	8002a58 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800314a:	e00d      	b.n	8003168 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003152:	d009      	beq.n	8003168 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003154:	f7ff fc80 	bl	8002a58 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	429a      	cmp	r2, r3
 8003162:	d801      	bhi.n	8003168 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e036      	b.n	80031d6 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003168:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <FLASH_WaitForLastOperation+0xa4>)
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1eb      	bne.n	800314c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003174:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <FLASH_WaitForLastOperation+0xa4>)
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <FLASH_WaitForLastOperation+0xa8>)
 800317a:	4013      	ands	r3, r2
 800317c:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01e      	beq.n	80031c2 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003184:	4b18      	ldr	r3, [pc, #96]	; (80031e8 <FLASH_WaitForLastOperation+0xac>)
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4313      	orrs	r3, r2
 800318c:	4a16      	ldr	r2, [pc, #88]	; (80031e8 <FLASH_WaitForLastOperation+0xac>)
 800318e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d007      	beq.n	80031aa <FLASH_WaitForLastOperation+0x6e>
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <FLASH_WaitForLastOperation+0xa4>)
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80031a4:	490e      	ldr	r1, [pc, #56]	; (80031e0 <FLASH_WaitForLastOperation+0xa4>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	618b      	str	r3, [r1, #24]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d004      	beq.n	80031be <FLASH_WaitForLastOperation+0x82>
 80031b4:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <FLASH_WaitForLastOperation+0xa4>)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80031bc:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e009      	b.n	80031d6 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80031c2:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <FLASH_WaitForLastOperation+0xa4>)
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80031ce:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <FLASH_WaitForLastOperation+0xa4>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40022000 	.word	0x40022000
 80031e4:	0002c3fa 	.word	0x0002c3fa
 80031e8:	20000010 	.word	0x20000010

080031ec <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80031f8:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <FLASH_Program_DoubleWord+0x48>)
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	4a0d      	ldr	r2, [pc, #52]	; (8003234 <FLASH_Program_DoubleWord+0x48>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800320a:	f3bf 8f6f 	isb	sy
}
 800320e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003210:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	000a      	movs	r2, r1
 800321e:	2300      	movs	r3, #0
 8003220:	68f9      	ldr	r1, [r7, #12]
 8003222:	3104      	adds	r1, #4
 8003224:	4613      	mov	r3, r2
 8003226:	600b      	str	r3, [r1, #0]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	40022000 	.word	0x40022000

08003238 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	; 0x24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003242:	2340      	movs	r3, #64	; 0x40
 8003244:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800324e:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <FLASH_Program_Fast+0x68>)
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	4a13      	ldr	r2, [pc, #76]	; (80032a0 <FLASH_Program_Fast+0x68>)
 8003254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003258:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800325a:	f3ef 8310 	mrs	r3, PRIMASK
 800325e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003260:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003262:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003264:	b672      	cpsid	i
}
 8003266:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	3304      	adds	r3, #4
 8003274:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	3304      	adds	r3, #4
 800327a:	617b      	str	r3, [r7, #20]
    row_index--;
 800327c:	7ffb      	ldrb	r3, [r7, #31]
 800327e:	3b01      	subs	r3, #1
 8003280:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8003282:	7ffb      	ldrb	r3, [r7, #31]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1ef      	bne.n	8003268 <FLASH_Program_Fast+0x30>
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f383 8810 	msr	PRIMASK, r3
}
 8003292:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003294:	bf00      	nop
 8003296:	3724      	adds	r7, #36	; 0x24
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	40022000 	.word	0x40022000

080032a4 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80032ae:	4b48      	ldr	r3, [pc, #288]	; (80033d0 <HAL_FLASHEx_Erase+0x12c>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_FLASHEx_Erase+0x16>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e085      	b.n	80033c6 <HAL_FLASHEx_Erase+0x122>
 80032ba:	4b45      	ldr	r3, [pc, #276]	; (80033d0 <HAL_FLASHEx_Erase+0x12c>)
 80032bc:	2201      	movs	r2, #1
 80032be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032c4:	f7ff ff3a 	bl	800313c <FLASH_WaitForLastOperation>
 80032c8:	4603      	mov	r3, r0
 80032ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d175      	bne.n	80033be <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80032d2:	4b3f      	ldr	r3, [pc, #252]	; (80033d0 <HAL_FLASHEx_Erase+0x12c>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80032d8:	4b3e      	ldr	r3, [pc, #248]	; (80033d4 <HAL_FLASHEx_Erase+0x130>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80032e4:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <HAL_FLASHEx_Erase+0x130>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d009      	beq.n	8003304 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80032f0:	4b38      	ldr	r3, [pc, #224]	; (80033d4 <HAL_FLASHEx_Erase+0x130>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a37      	ldr	r2, [pc, #220]	; (80033d4 <HAL_FLASHEx_Erase+0x130>)
 80032f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032fa:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80032fc:	4b34      	ldr	r3, [pc, #208]	; (80033d0 <HAL_FLASHEx_Erase+0x12c>)
 80032fe:	2203      	movs	r2, #3
 8003300:	771a      	strb	r2, [r3, #28]
 8003302:	e016      	b.n	8003332 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003304:	4b32      	ldr	r3, [pc, #200]	; (80033d0 <HAL_FLASHEx_Erase+0x12c>)
 8003306:	2201      	movs	r2, #1
 8003308:	771a      	strb	r2, [r3, #28]
 800330a:	e012      	b.n	8003332 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800330c:	4b31      	ldr	r3, [pc, #196]	; (80033d4 <HAL_FLASHEx_Erase+0x130>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003314:	2b00      	cmp	r3, #0
 8003316:	d009      	beq.n	800332c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003318:	4b2e      	ldr	r3, [pc, #184]	; (80033d4 <HAL_FLASHEx_Erase+0x130>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2d      	ldr	r2, [pc, #180]	; (80033d4 <HAL_FLASHEx_Erase+0x130>)
 800331e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003322:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003324:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <HAL_FLASHEx_Erase+0x12c>)
 8003326:	2202      	movs	r2, #2
 8003328:	771a      	strb	r2, [r3, #28]
 800332a:	e002      	b.n	8003332 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800332c:	4b28      	ldr	r3, [pc, #160]	; (80033d0 <HAL_FLASHEx_Erase+0x12c>)
 800332e:	2200      	movs	r2, #0
 8003330:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d111      	bne.n	800335e <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f84a 	bl	80033d8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003344:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003348:	f7ff fef8 	bl	800313c <FLASH_WaitForLastOperation>
 800334c:	4603      	mov	r3, r0
 800334e:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <HAL_FLASHEx_Erase+0x130>)
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	4a1f      	ldr	r2, [pc, #124]	; (80033d4 <HAL_FLASHEx_Erase+0x130>)
 8003356:	f023 0304 	bic.w	r3, r3, #4
 800335a:	6153      	str	r3, [r2, #20]
 800335c:	e02d      	b.n	80033ba <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f04f 32ff 	mov.w	r2, #4294967295
 8003364:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	e01d      	b.n	80033aa <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4619      	mov	r1, r3
 8003374:	68b8      	ldr	r0, [r7, #8]
 8003376:	f000 f84d 	bl	8003414 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800337a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800337e:	f7ff fedd 	bl	800313c <FLASH_WaitForLastOperation>
 8003382:	4603      	mov	r3, r0
 8003384:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003386:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <HAL_FLASHEx_Erase+0x130>)
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	4a12      	ldr	r2, [pc, #72]	; (80033d4 <HAL_FLASHEx_Erase+0x130>)
 800338c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003390:	f023 0302 	bic.w	r3, r3, #2
 8003394:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	601a      	str	r2, [r3, #0]
          break;
 80033a2:	e00a      	b.n	80033ba <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	3301      	adds	r3, #1
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	4413      	add	r3, r2
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d3d9      	bcc.n	800336e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80033ba:	f000 f84f 	bl	800345c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80033be:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <HAL_FLASHEx_Erase+0x12c>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]

  return status;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000010 	.word	0x20000010
 80033d4:	40022000 	.word	0x40022000

080033d8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d005      	beq.n	80033f6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <FLASH_MassErase+0x38>)
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	4a08      	ldr	r2, [pc, #32]	; (8003410 <FLASH_MassErase+0x38>)
 80033f0:	f043 0304 	orr.w	r3, r3, #4
 80033f4:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <FLASH_MassErase+0x38>)
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	4a05      	ldr	r2, [pc, #20]	; (8003410 <FLASH_MassErase+0x38>)
 80033fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003400:	6153      	str	r3, [r2, #20]
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40022000 	.word	0x40022000

08003414 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800341e:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <FLASH_PageErase+0x44>)
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800342e:	490a      	ldr	r1, [pc, #40]	; (8003458 <FLASH_PageErase+0x44>)
 8003430:	4313      	orrs	r3, r2
 8003432:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003434:	4b08      	ldr	r3, [pc, #32]	; (8003458 <FLASH_PageErase+0x44>)
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	4a07      	ldr	r2, [pc, #28]	; (8003458 <FLASH_PageErase+0x44>)
 800343a:	f043 0302 	orr.w	r3, r3, #2
 800343e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <FLASH_PageErase+0x44>)
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	4a04      	ldr	r2, [pc, #16]	; (8003458 <FLASH_PageErase+0x44>)
 8003446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344a:	6153      	str	r3, [r2, #20]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40022000 	.word	0x40022000

0800345c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003462:	4b21      	ldr	r3, [pc, #132]	; (80034e8 <FLASH_FlushCaches+0x8c>)
 8003464:	7f1b      	ldrb	r3, [r3, #28]
 8003466:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d002      	beq.n	8003474 <FLASH_FlushCaches+0x18>
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	2b03      	cmp	r3, #3
 8003472:	d117      	bne.n	80034a4 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003474:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <FLASH_FlushCaches+0x90>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1c      	ldr	r2, [pc, #112]	; (80034ec <FLASH_FlushCaches+0x90>)
 800347a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800347e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003480:	4b1a      	ldr	r3, [pc, #104]	; (80034ec <FLASH_FlushCaches+0x90>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a19      	ldr	r2, [pc, #100]	; (80034ec <FLASH_FlushCaches+0x90>)
 8003486:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	4b17      	ldr	r3, [pc, #92]	; (80034ec <FLASH_FlushCaches+0x90>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a16      	ldr	r2, [pc, #88]	; (80034ec <FLASH_FlushCaches+0x90>)
 8003492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003496:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003498:	4b14      	ldr	r3, [pc, #80]	; (80034ec <FLASH_FlushCaches+0x90>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a13      	ldr	r2, [pc, #76]	; (80034ec <FLASH_FlushCaches+0x90>)
 800349e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034a2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d002      	beq.n	80034b0 <FLASH_FlushCaches+0x54>
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d111      	bne.n	80034d4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80034b0:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <FLASH_FlushCaches+0x90>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a0d      	ldr	r2, [pc, #52]	; (80034ec <FLASH_FlushCaches+0x90>)
 80034b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034ba:	6013      	str	r3, [r2, #0]
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <FLASH_FlushCaches+0x90>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a0a      	ldr	r2, [pc, #40]	; (80034ec <FLASH_FlushCaches+0x90>)
 80034c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034c6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80034c8:	4b08      	ldr	r3, [pc, #32]	; (80034ec <FLASH_FlushCaches+0x90>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a07      	ldr	r2, [pc, #28]	; (80034ec <FLASH_FlushCaches+0x90>)
 80034ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034d2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <FLASH_FlushCaches+0x8c>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	771a      	strb	r2, [r3, #28]
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000010 	.word	0x20000010
 80034ec:	40022000 	.word	0x40022000

080034f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034fe:	e148      	b.n	8003792 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	2101      	movs	r1, #1
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	fa01 f303 	lsl.w	r3, r1, r3
 800350c:	4013      	ands	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 813a 	beq.w	800378c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d005      	beq.n	8003530 <HAL_GPIO_Init+0x40>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d130      	bne.n	8003592 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	2203      	movs	r2, #3
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003566:	2201      	movs	r2, #1
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4013      	ands	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	f003 0201 	and.w	r2, r3, #1
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	2b03      	cmp	r3, #3
 800359c:	d017      	beq.n	80035ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	2203      	movs	r2, #3
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d123      	bne.n	8003622 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	08da      	lsrs	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3208      	adds	r2, #8
 80035e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	220f      	movs	r2, #15
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	691a      	ldr	r2, [r3, #16]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	08da      	lsrs	r2, r3, #3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3208      	adds	r2, #8
 800361c:	6939      	ldr	r1, [r7, #16]
 800361e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	2203      	movs	r2, #3
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4013      	ands	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0203 	and.w	r2, r3, #3
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8094 	beq.w	800378c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003664:	4b52      	ldr	r3, [pc, #328]	; (80037b0 <HAL_GPIO_Init+0x2c0>)
 8003666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003668:	4a51      	ldr	r2, [pc, #324]	; (80037b0 <HAL_GPIO_Init+0x2c0>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6613      	str	r3, [r2, #96]	; 0x60
 8003670:	4b4f      	ldr	r3, [pc, #316]	; (80037b0 <HAL_GPIO_Init+0x2c0>)
 8003672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800367c:	4a4d      	ldr	r2, [pc, #308]	; (80037b4 <HAL_GPIO_Init+0x2c4>)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	089b      	lsrs	r3, r3, #2
 8003682:	3302      	adds	r3, #2
 8003684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003688:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	220f      	movs	r2, #15
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4013      	ands	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036a6:	d00d      	beq.n	80036c4 <HAL_GPIO_Init+0x1d4>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a43      	ldr	r2, [pc, #268]	; (80037b8 <HAL_GPIO_Init+0x2c8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d007      	beq.n	80036c0 <HAL_GPIO_Init+0x1d0>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a42      	ldr	r2, [pc, #264]	; (80037bc <HAL_GPIO_Init+0x2cc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d101      	bne.n	80036bc <HAL_GPIO_Init+0x1cc>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e004      	b.n	80036c6 <HAL_GPIO_Init+0x1d6>
 80036bc:	2307      	movs	r3, #7
 80036be:	e002      	b.n	80036c6 <HAL_GPIO_Init+0x1d6>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <HAL_GPIO_Init+0x1d6>
 80036c4:	2300      	movs	r3, #0
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	f002 0203 	and.w	r2, r2, #3
 80036cc:	0092      	lsls	r2, r2, #2
 80036ce:	4093      	lsls	r3, r2
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036d6:	4937      	ldr	r1, [pc, #220]	; (80037b4 <HAL_GPIO_Init+0x2c4>)
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	089b      	lsrs	r3, r3, #2
 80036dc:	3302      	adds	r3, #2
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036e4:	4b36      	ldr	r3, [pc, #216]	; (80037c0 <HAL_GPIO_Init+0x2d0>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	43db      	mvns	r3, r3
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4013      	ands	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003708:	4a2d      	ldr	r2, [pc, #180]	; (80037c0 <HAL_GPIO_Init+0x2d0>)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800370e:	4b2c      	ldr	r3, [pc, #176]	; (80037c0 <HAL_GPIO_Init+0x2d0>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	43db      	mvns	r3, r3
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4013      	ands	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003732:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <HAL_GPIO_Init+0x2d0>)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003738:	4b21      	ldr	r3, [pc, #132]	; (80037c0 <HAL_GPIO_Init+0x2d0>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	43db      	mvns	r3, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4013      	ands	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800375c:	4a18      	ldr	r2, [pc, #96]	; (80037c0 <HAL_GPIO_Init+0x2d0>)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003762:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <HAL_GPIO_Init+0x2d0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	43db      	mvns	r3, r3
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4013      	ands	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003786:	4a0e      	ldr	r2, [pc, #56]	; (80037c0 <HAL_GPIO_Init+0x2d0>)
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	3301      	adds	r3, #1
 8003790:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	f47f aeaf 	bne.w	8003500 <HAL_GPIO_Init+0x10>
  }
}
 80037a2:	bf00      	nop
 80037a4:	bf00      	nop
 80037a6:	371c      	adds	r7, #28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40010000 	.word	0x40010000
 80037b8:	48000400 	.word	0x48000400
 80037bc:	48000800 	.word	0x48000800
 80037c0:	40010400 	.word	0x40010400

080037c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	807b      	strh	r3, [r7, #2]
 80037d0:	4613      	mov	r3, r2
 80037d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037d4:	787b      	ldrb	r3, [r7, #1]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037da:	887a      	ldrh	r2, [r7, #2]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037e0:	e002      	b.n	80037e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037e2:	887a      	ldrh	r2, [r7, #2]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e081      	b.n	800390a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fe f8da 	bl	80019d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2224      	movs	r2, #36	; 0x24
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003844:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003854:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d107      	bne.n	800386e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	e006      	b.n	800387c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800387a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d104      	bne.n	800388e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800388c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800389c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69d9      	ldr	r1, [r3, #28]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1a      	ldr	r2, [r3, #32]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	4608      	mov	r0, r1
 800391e:	4611      	mov	r1, r2
 8003920:	461a      	mov	r2, r3
 8003922:	4603      	mov	r3, r0
 8003924:	817b      	strh	r3, [r7, #10]
 8003926:	460b      	mov	r3, r1
 8003928:	813b      	strh	r3, [r7, #8]
 800392a:	4613      	mov	r3, r2
 800392c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b20      	cmp	r3, #32
 8003938:	f040 80f9 	bne.w	8003b2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_I2C_Mem_Write+0x34>
 8003942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003944:	2b00      	cmp	r3, #0
 8003946:	d105      	bne.n	8003954 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800394e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0ed      	b.n	8003b30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <HAL_I2C_Mem_Write+0x4e>
 800395e:	2302      	movs	r3, #2
 8003960:	e0e6      	b.n	8003b30 <HAL_I2C_Mem_Write+0x21c>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800396a:	f7ff f875 	bl	8002a58 <HAL_GetTick>
 800396e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	2319      	movs	r3, #25
 8003976:	2201      	movs	r2, #1
 8003978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 fac3 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0d1      	b.n	8003b30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2221      	movs	r2, #33	; 0x21
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2240      	movs	r2, #64	; 0x40
 8003998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a3a      	ldr	r2, [r7, #32]
 80039a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039b4:	88f8      	ldrh	r0, [r7, #6]
 80039b6:	893a      	ldrh	r2, [r7, #8]
 80039b8:	8979      	ldrh	r1, [r7, #10]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	4603      	mov	r3, r0
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f9d3 	bl	8003d70 <I2C_RequestMemoryWrite>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0a9      	b.n	8003b30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2bff      	cmp	r3, #255	; 0xff
 80039e4:	d90e      	bls.n	8003a04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	22ff      	movs	r2, #255	; 0xff
 80039ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	8979      	ldrh	r1, [r7, #10]
 80039f4:	2300      	movs	r3, #0
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fc2b 	bl	8004258 <I2C_TransferConfig>
 8003a02:	e00f      	b.n	8003a24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	8979      	ldrh	r1, [r7, #10]
 8003a16:	2300      	movs	r3, #0
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 fc1a 	bl	8004258 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 faad 	bl	8003f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e07b      	b.n	8003b30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	781a      	ldrb	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d034      	beq.n	8003adc <HAL_I2C_Mem_Write+0x1c8>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d130      	bne.n	8003adc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	2200      	movs	r2, #0
 8003a82:	2180      	movs	r1, #128	; 0x80
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fa3f 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e04d      	b.n	8003b30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2bff      	cmp	r3, #255	; 0xff
 8003a9c:	d90e      	bls.n	8003abc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	22ff      	movs	r2, #255	; 0xff
 8003aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	8979      	ldrh	r1, [r7, #10]
 8003aac:	2300      	movs	r3, #0
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 fbcf 	bl	8004258 <I2C_TransferConfig>
 8003aba:	e00f      	b.n	8003adc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	8979      	ldrh	r1, [r7, #10]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fbbe 	bl	8004258 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d19e      	bne.n	8003a24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fa8c 	bl	8004008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e01a      	b.n	8003b30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2220      	movs	r2, #32
 8003b00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <HAL_I2C_Mem_Write+0x224>)
 8003b0e:	400b      	ands	r3, r1
 8003b10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e000      	b.n	8003b30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003b2e:	2302      	movs	r3, #2
  }
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	fe00e800 	.word	0xfe00e800

08003b3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	4608      	mov	r0, r1
 8003b46:	4611      	mov	r1, r2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	817b      	strh	r3, [r7, #10]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	813b      	strh	r3, [r7, #8]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	f040 80fd 	bne.w	8003d5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <HAL_I2C_Mem_Read+0x34>
 8003b6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0f1      	b.n	8003d60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_I2C_Mem_Read+0x4e>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e0ea      	b.n	8003d60 <HAL_I2C_Mem_Read+0x224>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b92:	f7fe ff61 	bl	8002a58 <HAL_GetTick>
 8003b96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	2319      	movs	r3, #25
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f9af 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0d5      	b.n	8003d60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2222      	movs	r2, #34	; 0x22
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2240      	movs	r2, #64	; 0x40
 8003bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a3a      	ldr	r2, [r7, #32]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bdc:	88f8      	ldrh	r0, [r7, #6]
 8003bde:	893a      	ldrh	r2, [r7, #8]
 8003be0:	8979      	ldrh	r1, [r7, #10]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	4603      	mov	r3, r0
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f913 	bl	8003e18 <I2C_RequestMemoryRead>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0ad      	b.n	8003d60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2bff      	cmp	r3, #255	; 0xff
 8003c0c:	d90e      	bls.n	8003c2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	22ff      	movs	r2, #255	; 0xff
 8003c12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	8979      	ldrh	r1, [r7, #10]
 8003c1c:	4b52      	ldr	r3, [pc, #328]	; (8003d68 <HAL_I2C_Mem_Read+0x22c>)
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 fb17 	bl	8004258 <I2C_TransferConfig>
 8003c2a:	e00f      	b.n	8003c4c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	8979      	ldrh	r1, [r7, #10]
 8003c3e:	4b4a      	ldr	r3, [pc, #296]	; (8003d68 <HAL_I2C_Mem_Read+0x22c>)
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 fb06 	bl	8004258 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c52:	2200      	movs	r2, #0
 8003c54:	2104      	movs	r1, #4
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 f956 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e07c      	b.n	8003d60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d034      	beq.n	8003d0c <HAL_I2C_Mem_Read+0x1d0>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d130      	bne.n	8003d0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2180      	movs	r1, #128	; 0x80
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f927 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e04d      	b.n	8003d60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2bff      	cmp	r3, #255	; 0xff
 8003ccc:	d90e      	bls.n	8003cec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	22ff      	movs	r2, #255	; 0xff
 8003cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	8979      	ldrh	r1, [r7, #10]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 fab7 	bl	8004258 <I2C_TransferConfig>
 8003cea:	e00f      	b.n	8003d0c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	8979      	ldrh	r1, [r7, #10]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 faa6 	bl	8004258 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d19a      	bne.n	8003c4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f974 	bl	8004008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e01a      	b.n	8003d60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6859      	ldr	r1, [r3, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <HAL_I2C_Mem_Read+0x230>)
 8003d3e:	400b      	ands	r3, r1
 8003d40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	e000      	b.n	8003d60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003d5e:	2302      	movs	r3, #2
  }
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	80002400 	.word	0x80002400
 8003d6c:	fe00e800 	.word	0xfe00e800

08003d70 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	4608      	mov	r0, r1
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4603      	mov	r3, r0
 8003d80:	817b      	strh	r3, [r7, #10]
 8003d82:	460b      	mov	r3, r1
 8003d84:	813b      	strh	r3, [r7, #8]
 8003d86:	4613      	mov	r3, r2
 8003d88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	8979      	ldrh	r1, [r7, #10]
 8003d90:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <I2C_RequestMemoryWrite+0xa4>)
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 fa5d 	bl	8004258 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	69b9      	ldr	r1, [r7, #24]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f8f0 	bl	8003f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e02c      	b.n	8003e0c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d105      	bne.n	8003dc4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003db8:	893b      	ldrh	r3, [r7, #8]
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	629a      	str	r2, [r3, #40]	; 0x28
 8003dc2:	e015      	b.n	8003df0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dc4:	893b      	ldrh	r3, [r7, #8]
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	69b9      	ldr	r1, [r7, #24]
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f8d6 	bl	8003f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e012      	b.n	8003e0c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003de6:	893b      	ldrh	r3, [r7, #8]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2200      	movs	r2, #0
 8003df8:	2180      	movs	r1, #128	; 0x80
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f884 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	80002000 	.word	0x80002000

08003e18 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	4608      	mov	r0, r1
 8003e22:	4611      	mov	r1, r2
 8003e24:	461a      	mov	r2, r3
 8003e26:	4603      	mov	r3, r0
 8003e28:	817b      	strh	r3, [r7, #10]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	813b      	strh	r3, [r7, #8]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	8979      	ldrh	r1, [r7, #10]
 8003e38:	4b20      	ldr	r3, [pc, #128]	; (8003ebc <I2C_RequestMemoryRead+0xa4>)
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 fa0a 	bl	8004258 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	69b9      	ldr	r1, [r7, #24]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f89d 	bl	8003f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e02c      	b.n	8003eb2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e58:	88fb      	ldrh	r3, [r7, #6]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d105      	bne.n	8003e6a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e5e:	893b      	ldrh	r3, [r7, #8]
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	629a      	str	r2, [r3, #40]	; 0x28
 8003e68:	e015      	b.n	8003e96 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e6a:	893b      	ldrh	r3, [r7, #8]
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e78:	69fa      	ldr	r2, [r7, #28]
 8003e7a:	69b9      	ldr	r1, [r7, #24]
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f883 	bl	8003f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e012      	b.n	8003eb2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e8c:	893b      	ldrh	r3, [r7, #8]
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2140      	movs	r1, #64	; 0x40
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f831 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	80002000 	.word	0x80002000

08003ec0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d103      	bne.n	8003ede <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2200      	movs	r2, #0
 8003edc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d007      	beq.n	8003efc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	619a      	str	r2, [r3, #24]
  }
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f18:	e022      	b.n	8003f60 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f20:	d01e      	beq.n	8003f60 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f22:	f7fe fd99 	bl	8002a58 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d302      	bcc.n	8003f38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d113      	bne.n	8003f60 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3c:	f043 0220 	orr.w	r2, r3, #32
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e00f      	b.n	8003f80 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699a      	ldr	r2, [r3, #24]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	bf0c      	ite	eq
 8003f70:	2301      	moveq	r3, #1
 8003f72:	2300      	movne	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d0cd      	beq.n	8003f1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f94:	e02c      	b.n	8003ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f870 	bl	8004080 <I2C_IsErrorOccurred>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e02a      	b.n	8004000 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb0:	d01e      	beq.n	8003ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb2:	f7fe fd51 	bl	8002a58 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d302      	bcc.n	8003fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d113      	bne.n	8003ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fcc:	f043 0220 	orr.w	r2, r3, #32
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e007      	b.n	8004000 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d1cb      	bne.n	8003f96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004014:	e028      	b.n	8004068 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f830 	bl	8004080 <I2C_IsErrorOccurred>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e026      	b.n	8004078 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402a:	f7fe fd15 	bl	8002a58 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	429a      	cmp	r2, r3
 8004038:	d302      	bcc.n	8004040 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d113      	bne.n	8004068 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004044:	f043 0220 	orr.w	r2, r3, #32
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e007      	b.n	8004078 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b20      	cmp	r3, #32
 8004074:	d1cf      	bne.n	8004016 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08a      	sub	sp, #40	; 0x28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800409a:	2300      	movs	r3, #0
 800409c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d075      	beq.n	8004198 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2210      	movs	r2, #16
 80040b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040b4:	e056      	b.n	8004164 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040bc:	d052      	beq.n	8004164 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040be:	f7fe fccb 	bl	8002a58 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d302      	bcc.n	80040d4 <I2C_IsErrorOccurred+0x54>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d147      	bne.n	8004164 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f6:	d12e      	bne.n	8004156 <I2C_IsErrorOccurred+0xd6>
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040fe:	d02a      	beq.n	8004156 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	2b20      	cmp	r3, #32
 8004104:	d027      	beq.n	8004156 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004114:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004116:	f7fe fc9f 	bl	8002a58 <HAL_GetTick>
 800411a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800411c:	e01b      	b.n	8004156 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800411e:	f7fe fc9b 	bl	8002a58 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b19      	cmp	r3, #25
 800412a:	d914      	bls.n	8004156 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004130:	f043 0220 	orr.w	r2, r3, #32
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b20      	cmp	r3, #32
 8004162:	d1dc      	bne.n	800411e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b20      	cmp	r3, #32
 8004170:	d003      	beq.n	800417a <I2C_IsErrorOccurred+0xfa>
 8004172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004176:	2b00      	cmp	r3, #0
 8004178:	d09d      	beq.n	80040b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800417a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800417e:	2b00      	cmp	r3, #0
 8004180:	d103      	bne.n	800418a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2220      	movs	r2, #32
 8004188:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	f043 0304 	orr.w	r3, r3, #4
 8004190:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00b      	beq.n	80041c2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	f043 0301 	orr.w	r3, r3, #1
 80041b0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00b      	beq.n	80041e4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	f043 0308 	orr.w	r3, r3, #8
 80041d2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	f043 0302 	orr.w	r3, r3, #2
 80041f4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800420a:	2b00      	cmp	r3, #0
 800420c:	d01c      	beq.n	8004248 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f7ff fe56 	bl	8003ec0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6859      	ldr	r1, [r3, #4]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <I2C_IsErrorOccurred+0x1d4>)
 8004220:	400b      	ands	r3, r1
 8004222:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	431a      	orrs	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800424c:	4618      	mov	r0, r3
 800424e:	3728      	adds	r7, #40	; 0x28
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	fe00e800 	.word	0xfe00e800

08004258 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	607b      	str	r3, [r7, #4]
 8004262:	460b      	mov	r3, r1
 8004264:	817b      	strh	r3, [r7, #10]
 8004266:	4613      	mov	r3, r2
 8004268:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800426a:	897b      	ldrh	r3, [r7, #10]
 800426c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004270:	7a7b      	ldrb	r3, [r7, #9]
 8004272:	041b      	lsls	r3, r3, #16
 8004274:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004278:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	4313      	orrs	r3, r2
 8004282:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004286:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	0d5b      	lsrs	r3, r3, #21
 8004292:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004296:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <I2C_TransferConfig+0x60>)
 8004298:	430b      	orrs	r3, r1
 800429a:	43db      	mvns	r3, r3
 800429c:	ea02 0103 	and.w	r1, r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80042aa:	bf00      	nop
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	03ff63ff 	.word	0x03ff63ff

080042bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	d138      	bne.n	8004344 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042dc:	2302      	movs	r3, #2
 80042de:	e032      	b.n	8004346 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2224      	movs	r2, #36	; 0x24
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800430e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6819      	ldr	r1, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	e000      	b.n	8004346 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004344:	2302      	movs	r3, #2
  }
}
 8004346:	4618      	mov	r0, r3
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b20      	cmp	r3, #32
 8004366:	d139      	bne.n	80043dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004372:	2302      	movs	r3, #2
 8004374:	e033      	b.n	80043de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2224      	movs	r2, #36	; 0x24
 8004382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0201 	bic.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	e000      	b.n	80043de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e041      	b.n	8004480 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004404:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f245 5255 	movw	r2, #21845	; 0x5555
 800440e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6852      	ldr	r2, [r2, #4]
 8004418:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6892      	ldr	r2, [r2, #8]
 8004422:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004424:	f7fe fb18 	bl	8002a58 <HAL_GetTick>
 8004428:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800442a:	e00f      	b.n	800444c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800442c:	f7fe fb14 	bl	8002a58 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b31      	cmp	r3, #49	; 0x31
 8004438:	d908      	bls.n	800444c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e019      	b.n	8004480 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e8      	bne.n	800442c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	429a      	cmp	r2, r3
 8004466:	d005      	beq.n	8004474 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	68d2      	ldr	r2, [r2, #12]
 8004470:	611a      	str	r2, [r3, #16]
 8004472:	e004      	b.n	800447e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800447c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004498:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40007000 	.word	0x40007000

080044c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d2:	d130      	bne.n	8004536 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80044d4:	4b23      	ldr	r3, [pc, #140]	; (8004564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044e0:	d038      	beq.n	8004554 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044e2:	4b20      	ldr	r3, [pc, #128]	; (8004564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044ea:	4a1e      	ldr	r2, [pc, #120]	; (8004564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044f2:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2232      	movs	r2, #50	; 0x32
 80044f8:	fb02 f303 	mul.w	r3, r2, r3
 80044fc:	4a1b      	ldr	r2, [pc, #108]	; (800456c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80044fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004502:	0c9b      	lsrs	r3, r3, #18
 8004504:	3301      	adds	r3, #1
 8004506:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004508:	e002      	b.n	8004510 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3b01      	subs	r3, #1
 800450e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004510:	4b14      	ldr	r3, [pc, #80]	; (8004564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451c:	d102      	bne.n	8004524 <HAL_PWREx_ControlVoltageScaling+0x60>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f2      	bne.n	800450a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004524:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800452c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004530:	d110      	bne.n	8004554 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e00f      	b.n	8004556 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800453e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004542:	d007      	beq.n	8004554 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004544:	4b07      	ldr	r3, [pc, #28]	; (8004564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800454c:	4a05      	ldr	r2, [pc, #20]	; (8004564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800454e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004552:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40007000 	.word	0x40007000
 8004568:	20000004 	.word	0x20000004
 800456c:	431bde83 	.word	0x431bde83

08004570 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d102      	bne.n	8004584 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	f000 bc11 	b.w	8004da6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004584:	4ba0      	ldr	r3, [pc, #640]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 030c 	and.w	r3, r3, #12
 800458c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800458e:	4b9e      	ldr	r3, [pc, #632]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80e4 	beq.w	800476e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <HAL_RCC_OscConfig+0x4c>
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	2b0c      	cmp	r3, #12
 80045b0:	f040 808b 	bne.w	80046ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	f040 8087 	bne.w	80046ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045bc:	4b92      	ldr	r3, [pc, #584]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_OscConfig+0x64>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e3e8      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1a      	ldr	r2, [r3, #32]
 80045d8:	4b8b      	ldr	r3, [pc, #556]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d004      	beq.n	80045ee <HAL_RCC_OscConfig+0x7e>
 80045e4:	4b88      	ldr	r3, [pc, #544]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ec:	e005      	b.n	80045fa <HAL_RCC_OscConfig+0x8a>
 80045ee:	4b86      	ldr	r3, [pc, #536]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 80045f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d223      	bcs.n	8004646 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fdac 	bl	8005160 <RCC_SetFlashLatencyFromMSIRange>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e3c9      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004612:	4b7d      	ldr	r3, [pc, #500]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a7c      	ldr	r2, [pc, #496]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 8004618:	f043 0308 	orr.w	r3, r3, #8
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	4b7a      	ldr	r3, [pc, #488]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	4977      	ldr	r1, [pc, #476]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 800462c:	4313      	orrs	r3, r2
 800462e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004630:	4b75      	ldr	r3, [pc, #468]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	4972      	ldr	r1, [pc, #456]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 8004640:	4313      	orrs	r3, r2
 8004642:	604b      	str	r3, [r1, #4]
 8004644:	e025      	b.n	8004692 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004646:	4b70      	ldr	r3, [pc, #448]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a6f      	ldr	r2, [pc, #444]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 800464c:	f043 0308 	orr.w	r3, r3, #8
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	4b6d      	ldr	r3, [pc, #436]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	496a      	ldr	r1, [pc, #424]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 8004660:	4313      	orrs	r3, r2
 8004662:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004664:	4b68      	ldr	r3, [pc, #416]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	4965      	ldr	r1, [pc, #404]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 8004674:	4313      	orrs	r3, r2
 8004676:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d109      	bne.n	8004692 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fd6c 	bl	8005160 <RCC_SetFlashLatencyFromMSIRange>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e389      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004692:	f000 fc6f 	bl	8004f74 <HAL_RCC_GetSysClockFreq>
 8004696:	4602      	mov	r2, r0
 8004698:	4b5b      	ldr	r3, [pc, #364]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	495a      	ldr	r1, [pc, #360]	; (800480c <HAL_RCC_OscConfig+0x29c>)
 80046a4:	5ccb      	ldrb	r3, [r1, r3]
 80046a6:	f003 031f 	and.w	r3, r3, #31
 80046aa:	fa22 f303 	lsr.w	r3, r2, r3
 80046ae:	4a58      	ldr	r2, [pc, #352]	; (8004810 <HAL_RCC_OscConfig+0x2a0>)
 80046b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80046b2:	4b58      	ldr	r3, [pc, #352]	; (8004814 <HAL_RCC_OscConfig+0x2a4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fd fde2 	bl	8002280 <HAL_InitTick>
 80046bc:	4603      	mov	r3, r0
 80046be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d052      	beq.n	800476c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	e36d      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d032      	beq.n	8004738 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046d2:	4b4d      	ldr	r3, [pc, #308]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a4c      	ldr	r2, [pc, #304]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046de:	f7fe f9bb 	bl	8002a58 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046e6:	f7fe f9b7 	bl	8002a58 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e356      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046f8:	4b43      	ldr	r3, [pc, #268]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0f0      	beq.n	80046e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004704:	4b40      	ldr	r3, [pc, #256]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a3f      	ldr	r2, [pc, #252]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 800470a:	f043 0308 	orr.w	r3, r3, #8
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	4b3d      	ldr	r3, [pc, #244]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	493a      	ldr	r1, [pc, #232]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 800471e:	4313      	orrs	r3, r2
 8004720:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004722:	4b39      	ldr	r3, [pc, #228]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	021b      	lsls	r3, r3, #8
 8004730:	4935      	ldr	r1, [pc, #212]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 8004732:	4313      	orrs	r3, r2
 8004734:	604b      	str	r3, [r1, #4]
 8004736:	e01a      	b.n	800476e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004738:	4b33      	ldr	r3, [pc, #204]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a32      	ldr	r2, [pc, #200]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 800473e:	f023 0301 	bic.w	r3, r3, #1
 8004742:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004744:	f7fe f988 	bl	8002a58 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800474c:	f7fe f984 	bl	8002a58 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e323      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800475e:	4b2a      	ldr	r3, [pc, #168]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x1dc>
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800476c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d073      	beq.n	8004862 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b08      	cmp	r3, #8
 800477e:	d005      	beq.n	800478c <HAL_RCC_OscConfig+0x21c>
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2b0c      	cmp	r3, #12
 8004784:	d10e      	bne.n	80047a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b03      	cmp	r3, #3
 800478a:	d10b      	bne.n	80047a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800478c:	4b1e      	ldr	r3, [pc, #120]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d063      	beq.n	8004860 <HAL_RCC_OscConfig+0x2f0>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d15f      	bne.n	8004860 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e300      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ac:	d106      	bne.n	80047bc <HAL_RCC_OscConfig+0x24c>
 80047ae:	4b16      	ldr	r3, [pc, #88]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a15      	ldr	r2, [pc, #84]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 80047b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	e01d      	b.n	80047f8 <HAL_RCC_OscConfig+0x288>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x270>
 80047c6:	4b10      	ldr	r3, [pc, #64]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a0f      	ldr	r2, [pc, #60]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 80047cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a0c      	ldr	r2, [pc, #48]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 80047d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	e00b      	b.n	80047f8 <HAL_RCC_OscConfig+0x288>
 80047e0:	4b09      	ldr	r3, [pc, #36]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a08      	ldr	r2, [pc, #32]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 80047e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	4b06      	ldr	r3, [pc, #24]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a05      	ldr	r2, [pc, #20]	; (8004808 <HAL_RCC_OscConfig+0x298>)
 80047f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01b      	beq.n	8004838 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7fe f92a 	bl	8002a58 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004806:	e010      	b.n	800482a <HAL_RCC_OscConfig+0x2ba>
 8004808:	40021000 	.word	0x40021000
 800480c:	0800a1f0 	.word	0x0800a1f0
 8004810:	20000004 	.word	0x20000004
 8004814:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004818:	f7fe f91e 	bl	8002a58 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b64      	cmp	r3, #100	; 0x64
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e2bd      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800482a:	4baf      	ldr	r3, [pc, #700]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0x2a8>
 8004836:	e014      	b.n	8004862 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fe f90e 	bl	8002a58 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004840:	f7fe f90a 	bl	8002a58 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e2a9      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004852:	4ba5      	ldr	r3, [pc, #660]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0x2d0>
 800485e:	e000      	b.n	8004862 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d060      	beq.n	8004930 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b04      	cmp	r3, #4
 8004872:	d005      	beq.n	8004880 <HAL_RCC_OscConfig+0x310>
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b0c      	cmp	r3, #12
 8004878:	d119      	bne.n	80048ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b02      	cmp	r3, #2
 800487e:	d116      	bne.n	80048ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004880:	4b99      	ldr	r3, [pc, #612]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_RCC_OscConfig+0x328>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e286      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004898:	4b93      	ldr	r3, [pc, #588]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	061b      	lsls	r3, r3, #24
 80048a6:	4990      	ldr	r1, [pc, #576]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048ac:	e040      	b.n	8004930 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d023      	beq.n	80048fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048b6:	4b8c      	ldr	r3, [pc, #560]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a8b      	ldr	r2, [pc, #556]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 80048bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c2:	f7fe f8c9 	bl	8002a58 <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ca:	f7fe f8c5 	bl	8002a58 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e264      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048dc:	4b82      	ldr	r3, [pc, #520]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0f0      	beq.n	80048ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e8:	4b7f      	ldr	r3, [pc, #508]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	061b      	lsls	r3, r3, #24
 80048f6:	497c      	ldr	r1, [pc, #496]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	604b      	str	r3, [r1, #4]
 80048fc:	e018      	b.n	8004930 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048fe:	4b7a      	ldr	r3, [pc, #488]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a79      	ldr	r2, [pc, #484]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490a:	f7fe f8a5 	bl	8002a58 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004912:	f7fe f8a1 	bl	8002a58 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e240      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004924:	4b70      	ldr	r3, [pc, #448]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1f0      	bne.n	8004912 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d03c      	beq.n	80049b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01c      	beq.n	800497e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004944:	4b68      	ldr	r3, [pc, #416]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800494a:	4a67      	ldr	r2, [pc, #412]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004954:	f7fe f880 	bl	8002a58 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800495c:	f7fe f87c 	bl	8002a58 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e21b      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800496e:	4b5e      	ldr	r3, [pc, #376]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0ef      	beq.n	800495c <HAL_RCC_OscConfig+0x3ec>
 800497c:	e01b      	b.n	80049b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800497e:	4b5a      	ldr	r3, [pc, #360]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004984:	4a58      	ldr	r2, [pc, #352]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004986:	f023 0301 	bic.w	r3, r3, #1
 800498a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498e:	f7fe f863 	bl	8002a58 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004996:	f7fe f85f 	bl	8002a58 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e1fe      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049a8:	4b4f      	ldr	r3, [pc, #316]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 80049aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1ef      	bne.n	8004996 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80a6 	beq.w	8004b10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049c4:	2300      	movs	r3, #0
 80049c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80049c8:	4b47      	ldr	r3, [pc, #284]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 80049ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10d      	bne.n	80049f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049d4:	4b44      	ldr	r3, [pc, #272]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 80049d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d8:	4a43      	ldr	r2, [pc, #268]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 80049da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049de:	6593      	str	r3, [r2, #88]	; 0x58
 80049e0:	4b41      	ldr	r3, [pc, #260]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 80049e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e8:	60bb      	str	r3, [r7, #8]
 80049ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ec:	2301      	movs	r3, #1
 80049ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049f0:	4b3e      	ldr	r3, [pc, #248]	; (8004aec <HAL_RCC_OscConfig+0x57c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d118      	bne.n	8004a2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049fc:	4b3b      	ldr	r3, [pc, #236]	; (8004aec <HAL_RCC_OscConfig+0x57c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a3a      	ldr	r2, [pc, #232]	; (8004aec <HAL_RCC_OscConfig+0x57c>)
 8004a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a08:	f7fe f826 	bl	8002a58 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a10:	f7fe f822 	bl	8002a58 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e1c1      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a22:	4b32      	ldr	r3, [pc, #200]	; (8004aec <HAL_RCC_OscConfig+0x57c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f0      	beq.n	8004a10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d108      	bne.n	8004a48 <HAL_RCC_OscConfig+0x4d8>
 8004a36:	4b2c      	ldr	r3, [pc, #176]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004a3e:	f043 0301 	orr.w	r3, r3, #1
 8004a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a46:	e024      	b.n	8004a92 <HAL_RCC_OscConfig+0x522>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2b05      	cmp	r3, #5
 8004a4e:	d110      	bne.n	8004a72 <HAL_RCC_OscConfig+0x502>
 8004a50:	4b25      	ldr	r3, [pc, #148]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a56:	4a24      	ldr	r2, [pc, #144]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004a58:	f043 0304 	orr.w	r3, r3, #4
 8004a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a60:	4b21      	ldr	r3, [pc, #132]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a66:	4a20      	ldr	r2, [pc, #128]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004a68:	f043 0301 	orr.w	r3, r3, #1
 8004a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a70:	e00f      	b.n	8004a92 <HAL_RCC_OscConfig+0x522>
 8004a72:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a78:	4a1b      	ldr	r2, [pc, #108]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a82:	4b19      	ldr	r3, [pc, #100]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a88:	4a17      	ldr	r2, [pc, #92]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004a8a:	f023 0304 	bic.w	r3, r3, #4
 8004a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d016      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9a:	f7fd ffdd 	bl	8002a58 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aa0:	e00a      	b.n	8004ab8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa2:	f7fd ffd9 	bl	8002a58 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e176      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <HAL_RCC_OscConfig+0x578>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0ed      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x532>
 8004ac6:	e01a      	b.n	8004afe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac8:	f7fd ffc6 	bl	8002a58 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ace:	e00f      	b.n	8004af0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad0:	f7fd ffc2 	bl	8002a58 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d906      	bls.n	8004af0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e15f      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
 8004ae6:	bf00      	nop
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004af0:	4baa      	ldr	r3, [pc, #680]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1e8      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004afe:	7ffb      	ldrb	r3, [r7, #31]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d105      	bne.n	8004b10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b04:	4ba5      	ldr	r3, [pc, #660]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b08:	4aa4      	ldr	r2, [pc, #656]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0320 	and.w	r3, r3, #32
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d03c      	beq.n	8004b96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01c      	beq.n	8004b5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b24:	4b9d      	ldr	r3, [pc, #628]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004b26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b2a:	4a9c      	ldr	r2, [pc, #624]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004b2c:	f043 0301 	orr.w	r3, r3, #1
 8004b30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b34:	f7fd ff90 	bl	8002a58 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b3c:	f7fd ff8c 	bl	8002a58 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e12b      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b4e:	4b93      	ldr	r3, [pc, #588]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0ef      	beq.n	8004b3c <HAL_RCC_OscConfig+0x5cc>
 8004b5c:	e01b      	b.n	8004b96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b5e:	4b8f      	ldr	r3, [pc, #572]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b64:	4a8d      	ldr	r2, [pc, #564]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004b66:	f023 0301 	bic.w	r3, r3, #1
 8004b6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6e:	f7fd ff73 	bl	8002a58 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b76:	f7fd ff6f 	bl	8002a58 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e10e      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b88:	4b84      	ldr	r3, [pc, #528]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1ef      	bne.n	8004b76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 8102 	beq.w	8004da4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	f040 80c5 	bne.w	8004d34 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004baa:	4b7c      	ldr	r3, [pc, #496]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f003 0203 	and.w	r2, r3, #3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d12c      	bne.n	8004c18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d123      	bne.n	8004c18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bda:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d11b      	bne.n	8004c18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d113      	bne.n	8004c18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfa:	085b      	lsrs	r3, r3, #1
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d109      	bne.n	8004c18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	085b      	lsrs	r3, r3, #1
 8004c10:	3b01      	subs	r3, #1
 8004c12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d067      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2b0c      	cmp	r3, #12
 8004c1c:	d062      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c1e:	4b5f      	ldr	r3, [pc, #380]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e0bb      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c2e:	4b5b      	ldr	r3, [pc, #364]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a5a      	ldr	r2, [pc, #360]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004c34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c3a:	f7fd ff0d 	bl	8002a58 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c42:	f7fd ff09 	bl	8002a58 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e0a8      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c54:	4b51      	ldr	r3, [pc, #324]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f0      	bne.n	8004c42 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c60:	4b4e      	ldr	r3, [pc, #312]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	4b4e      	ldr	r3, [pc, #312]	; (8004da0 <HAL_RCC_OscConfig+0x830>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c70:	3a01      	subs	r2, #1
 8004c72:	0112      	lsls	r2, r2, #4
 8004c74:	4311      	orrs	r1, r2
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c7a:	0212      	lsls	r2, r2, #8
 8004c7c:	4311      	orrs	r1, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c82:	0852      	lsrs	r2, r2, #1
 8004c84:	3a01      	subs	r2, #1
 8004c86:	0552      	lsls	r2, r2, #21
 8004c88:	4311      	orrs	r1, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c8e:	0852      	lsrs	r2, r2, #1
 8004c90:	3a01      	subs	r2, #1
 8004c92:	0652      	lsls	r2, r2, #25
 8004c94:	4311      	orrs	r1, r2
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c9a:	06d2      	lsls	r2, r2, #27
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	493f      	ldr	r1, [pc, #252]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ca4:	4b3d      	ldr	r3, [pc, #244]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a3c      	ldr	r2, [pc, #240]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cb0:	4b3a      	ldr	r3, [pc, #232]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4a39      	ldr	r2, [pc, #228]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cbc:	f7fd fecc 	bl	8002a58 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc4:	f7fd fec8 	bl	8002a58 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e067      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd6:	4b31      	ldr	r3, [pc, #196]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ce2:	e05f      	b.n	8004da4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e05e      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce8:	4b2c      	ldr	r3, [pc, #176]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d157      	bne.n	8004da4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004cf4:	4b29      	ldr	r3, [pc, #164]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a28      	ldr	r2, [pc, #160]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cfe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d00:	4b26      	ldr	r3, [pc, #152]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	4a25      	ldr	r2, [pc, #148]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d0c:	f7fd fea4 	bl	8002a58 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d14:	f7fd fea0 	bl	8002a58 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e03f      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d26:	4b1d      	ldr	r3, [pc, #116]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0f0      	beq.n	8004d14 <HAL_RCC_OscConfig+0x7a4>
 8004d32:	e037      	b.n	8004da4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	2b0c      	cmp	r3, #12
 8004d38:	d02d      	beq.n	8004d96 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d3a:	4b18      	ldr	r3, [pc, #96]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a17      	ldr	r2, [pc, #92]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004d40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d44:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d46:	4b15      	ldr	r3, [pc, #84]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d105      	bne.n	8004d5e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d52:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	4a11      	ldr	r2, [pc, #68]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004d58:	f023 0303 	bic.w	r3, r3, #3
 8004d5c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004d5e:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	4a0e      	ldr	r2, [pc, #56]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004d64:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d6c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6e:	f7fd fe73 	bl	8002a58 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d76:	f7fd fe6f 	bl	8002a58 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e00e      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d88:	4b04      	ldr	r3, [pc, #16]	; (8004d9c <HAL_RCC_OscConfig+0x82c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1f0      	bne.n	8004d76 <HAL_RCC_OscConfig+0x806>
 8004d94:	e006      	b.n	8004da4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e005      	b.n	8004da6 <HAL_RCC_OscConfig+0x836>
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3720      	adds	r7, #32
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop

08004db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0c8      	b.n	8004f56 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc4:	4b66      	ldr	r3, [pc, #408]	; (8004f60 <HAL_RCC_ClockConfig+0x1b0>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d910      	bls.n	8004df4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd2:	4b63      	ldr	r3, [pc, #396]	; (8004f60 <HAL_RCC_ClockConfig+0x1b0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f023 0207 	bic.w	r2, r3, #7
 8004dda:	4961      	ldr	r1, [pc, #388]	; (8004f60 <HAL_RCC_ClockConfig+0x1b0>)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de2:	4b5f      	ldr	r3, [pc, #380]	; (8004f60 <HAL_RCC_ClockConfig+0x1b0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0b0      	b.n	8004f56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d04c      	beq.n	8004e9a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d107      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e08:	4b56      	ldr	r3, [pc, #344]	; (8004f64 <HAL_RCC_ClockConfig+0x1b4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d121      	bne.n	8004e58 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e09e      	b.n	8004f56 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d107      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e20:	4b50      	ldr	r3, [pc, #320]	; (8004f64 <HAL_RCC_ClockConfig+0x1b4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d115      	bne.n	8004e58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e092      	b.n	8004f56 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d107      	bne.n	8004e48 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e38:	4b4a      	ldr	r3, [pc, #296]	; (8004f64 <HAL_RCC_ClockConfig+0x1b4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d109      	bne.n	8004e58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e086      	b.n	8004f56 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e48:	4b46      	ldr	r3, [pc, #280]	; (8004f64 <HAL_RCC_ClockConfig+0x1b4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e07e      	b.n	8004f56 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e58:	4b42      	ldr	r3, [pc, #264]	; (8004f64 <HAL_RCC_ClockConfig+0x1b4>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f023 0203 	bic.w	r2, r3, #3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	493f      	ldr	r1, [pc, #252]	; (8004f64 <HAL_RCC_ClockConfig+0x1b4>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e6a:	f7fd fdf5 	bl	8002a58 <HAL_GetTick>
 8004e6e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e70:	e00a      	b.n	8004e88 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e72:	f7fd fdf1 	bl	8002a58 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e066      	b.n	8004f56 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e88:	4b36      	ldr	r3, [pc, #216]	; (8004f64 <HAL_RCC_ClockConfig+0x1b4>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 020c 	and.w	r2, r3, #12
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d1eb      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d008      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ea6:	4b2f      	ldr	r3, [pc, #188]	; (8004f64 <HAL_RCC_ClockConfig+0x1b4>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	492c      	ldr	r1, [pc, #176]	; (8004f64 <HAL_RCC_ClockConfig+0x1b4>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eb8:	4b29      	ldr	r3, [pc, #164]	; (8004f60 <HAL_RCC_ClockConfig+0x1b0>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d210      	bcs.n	8004ee8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec6:	4b26      	ldr	r3, [pc, #152]	; (8004f60 <HAL_RCC_ClockConfig+0x1b0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f023 0207 	bic.w	r2, r3, #7
 8004ece:	4924      	ldr	r1, [pc, #144]	; (8004f60 <HAL_RCC_ClockConfig+0x1b0>)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed6:	4b22      	ldr	r3, [pc, #136]	; (8004f60 <HAL_RCC_ClockConfig+0x1b0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d001      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e036      	b.n	8004f56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef4:	4b1b      	ldr	r3, [pc, #108]	; (8004f64 <HAL_RCC_ClockConfig+0x1b4>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4918      	ldr	r1, [pc, #96]	; (8004f64 <HAL_RCC_ClockConfig+0x1b4>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d009      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f12:	4b14      	ldr	r3, [pc, #80]	; (8004f64 <HAL_RCC_ClockConfig+0x1b4>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4910      	ldr	r1, [pc, #64]	; (8004f64 <HAL_RCC_ClockConfig+0x1b4>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f26:	f000 f825 	bl	8004f74 <HAL_RCC_GetSysClockFreq>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	4b0d      	ldr	r3, [pc, #52]	; (8004f64 <HAL_RCC_ClockConfig+0x1b4>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	490c      	ldr	r1, [pc, #48]	; (8004f68 <HAL_RCC_ClockConfig+0x1b8>)
 8004f38:	5ccb      	ldrb	r3, [r1, r3]
 8004f3a:	f003 031f 	and.w	r3, r3, #31
 8004f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f42:	4a0a      	ldr	r2, [pc, #40]	; (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f46:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fd f998 	bl	8002280 <HAL_InitTick>
 8004f50:	4603      	mov	r3, r0
 8004f52:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f54:	7afb      	ldrb	r3, [r7, #11]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40022000 	.word	0x40022000
 8004f64:	40021000 	.word	0x40021000
 8004f68:	0800a1f0 	.word	0x0800a1f0
 8004f6c:	20000004 	.word	0x20000004
 8004f70:	20000008 	.word	0x20000008

08004f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b089      	sub	sp, #36	; 0x24
 8004f78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f82:	4b3e      	ldr	r3, [pc, #248]	; (800507c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 030c 	and.w	r3, r3, #12
 8004f8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f8c:	4b3b      	ldr	r3, [pc, #236]	; (800507c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0303 	and.w	r3, r3, #3
 8004f94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d005      	beq.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	2b0c      	cmp	r3, #12
 8004fa0:	d121      	bne.n	8004fe6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d11e      	bne.n	8004fe6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fa8:	4b34      	ldr	r3, [pc, #208]	; (800507c <HAL_RCC_GetSysClockFreq+0x108>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d107      	bne.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fb4:	4b31      	ldr	r3, [pc, #196]	; (800507c <HAL_RCC_GetSysClockFreq+0x108>)
 8004fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fba:	0a1b      	lsrs	r3, r3, #8
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	e005      	b.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fc4:	4b2d      	ldr	r3, [pc, #180]	; (800507c <HAL_RCC_GetSysClockFreq+0x108>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	091b      	lsrs	r3, r3, #4
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004fd0:	4a2b      	ldr	r2, [pc, #172]	; (8005080 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10d      	bne.n	8004ffc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fe4:	e00a      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d102      	bne.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fec:	4b25      	ldr	r3, [pc, #148]	; (8005084 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fee:	61bb      	str	r3, [r7, #24]
 8004ff0:	e004      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d101      	bne.n	8004ffc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ff8:	4b23      	ldr	r3, [pc, #140]	; (8005088 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ffa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	2b0c      	cmp	r3, #12
 8005000:	d134      	bne.n	800506c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005002:	4b1e      	ldr	r3, [pc, #120]	; (800507c <HAL_RCC_GetSysClockFreq+0x108>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d003      	beq.n	800501a <HAL_RCC_GetSysClockFreq+0xa6>
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b03      	cmp	r3, #3
 8005016:	d003      	beq.n	8005020 <HAL_RCC_GetSysClockFreq+0xac>
 8005018:	e005      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800501a:	4b1a      	ldr	r3, [pc, #104]	; (8005084 <HAL_RCC_GetSysClockFreq+0x110>)
 800501c:	617b      	str	r3, [r7, #20]
      break;
 800501e:	e005      	b.n	800502c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005020:	4b19      	ldr	r3, [pc, #100]	; (8005088 <HAL_RCC_GetSysClockFreq+0x114>)
 8005022:	617b      	str	r3, [r7, #20]
      break;
 8005024:	e002      	b.n	800502c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	617b      	str	r3, [r7, #20]
      break;
 800502a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800502c:	4b13      	ldr	r3, [pc, #76]	; (800507c <HAL_RCC_GetSysClockFreq+0x108>)
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	091b      	lsrs	r3, r3, #4
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	3301      	adds	r3, #1
 8005038:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800503a:	4b10      	ldr	r3, [pc, #64]	; (800507c <HAL_RCC_GetSysClockFreq+0x108>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	0a1b      	lsrs	r3, r3, #8
 8005040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	fb02 f203 	mul.w	r2, r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005050:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005052:	4b0a      	ldr	r3, [pc, #40]	; (800507c <HAL_RCC_GetSysClockFreq+0x108>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	0e5b      	lsrs	r3, r3, #25
 8005058:	f003 0303 	and.w	r3, r3, #3
 800505c:	3301      	adds	r3, #1
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	fbb2 f3f3 	udiv	r3, r2, r3
 800506a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800506c:	69bb      	ldr	r3, [r7, #24]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3724      	adds	r7, #36	; 0x24
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40021000 	.word	0x40021000
 8005080:	0800a208 	.word	0x0800a208
 8005084:	00f42400 	.word	0x00f42400
 8005088:	007a1200 	.word	0x007a1200

0800508c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005090:	4b03      	ldr	r3, [pc, #12]	; (80050a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005092:	681b      	ldr	r3, [r3, #0]
}
 8005094:	4618      	mov	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	20000004 	.word	0x20000004

080050a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050a8:	f7ff fff0 	bl	800508c <HAL_RCC_GetHCLKFreq>
 80050ac:	4602      	mov	r2, r0
 80050ae:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	0a1b      	lsrs	r3, r3, #8
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	4904      	ldr	r1, [pc, #16]	; (80050cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80050ba:	5ccb      	ldrb	r3, [r1, r3]
 80050bc:	f003 031f 	and.w	r3, r3, #31
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40021000 	.word	0x40021000
 80050cc:	0800a200 	.word	0x0800a200

080050d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80050d4:	f7ff ffda 	bl	800508c <HAL_RCC_GetHCLKFreq>
 80050d8:	4602      	mov	r2, r0
 80050da:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	0adb      	lsrs	r3, r3, #11
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	4904      	ldr	r1, [pc, #16]	; (80050f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80050e6:	5ccb      	ldrb	r3, [r1, r3]
 80050e8:	f003 031f 	and.w	r3, r3, #31
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40021000 	.word	0x40021000
 80050f8:	0800a200 	.word	0x0800a200

080050fc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	220f      	movs	r2, #15
 800510a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800510c:	4b12      	ldr	r3, [pc, #72]	; (8005158 <HAL_RCC_GetClockConfig+0x5c>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 0203 	and.w	r2, r3, #3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005118:	4b0f      	ldr	r3, [pc, #60]	; (8005158 <HAL_RCC_GetClockConfig+0x5c>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005124:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <HAL_RCC_GetClockConfig+0x5c>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005130:	4b09      	ldr	r3, [pc, #36]	; (8005158 <HAL_RCC_GetClockConfig+0x5c>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	08db      	lsrs	r3, r3, #3
 8005136:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800513e:	4b07      	ldr	r3, [pc, #28]	; (800515c <HAL_RCC_GetClockConfig+0x60>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0207 	and.w	r2, r3, #7
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	601a      	str	r2, [r3, #0]
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40021000 	.word	0x40021000
 800515c:	40022000 	.word	0x40022000

08005160 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005168:	2300      	movs	r3, #0
 800516a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800516c:	4b2a      	ldr	r3, [pc, #168]	; (8005218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800516e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005178:	f7ff f996 	bl	80044a8 <HAL_PWREx_GetVoltageRange>
 800517c:	6178      	str	r0, [r7, #20]
 800517e:	e014      	b.n	80051aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005180:	4b25      	ldr	r3, [pc, #148]	; (8005218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005184:	4a24      	ldr	r2, [pc, #144]	; (8005218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800518a:	6593      	str	r3, [r2, #88]	; 0x58
 800518c:	4b22      	ldr	r3, [pc, #136]	; (8005218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800518e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005198:	f7ff f986 	bl	80044a8 <HAL_PWREx_GetVoltageRange>
 800519c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800519e:	4b1e      	ldr	r3, [pc, #120]	; (8005218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a2:	4a1d      	ldr	r2, [pc, #116]	; (8005218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b0:	d10b      	bne.n	80051ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b80      	cmp	r3, #128	; 0x80
 80051b6:	d919      	bls.n	80051ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2ba0      	cmp	r3, #160	; 0xa0
 80051bc:	d902      	bls.n	80051c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051be:	2302      	movs	r3, #2
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	e013      	b.n	80051ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051c4:	2301      	movs	r3, #1
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	e010      	b.n	80051ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b80      	cmp	r3, #128	; 0x80
 80051ce:	d902      	bls.n	80051d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80051d0:	2303      	movs	r3, #3
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	e00a      	b.n	80051ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b80      	cmp	r3, #128	; 0x80
 80051da:	d102      	bne.n	80051e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051dc:	2302      	movs	r3, #2
 80051de:	613b      	str	r3, [r7, #16]
 80051e0:	e004      	b.n	80051ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b70      	cmp	r3, #112	; 0x70
 80051e6:	d101      	bne.n	80051ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051e8:	2301      	movs	r3, #1
 80051ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051ec:	4b0b      	ldr	r3, [pc, #44]	; (800521c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f023 0207 	bic.w	r2, r3, #7
 80051f4:	4909      	ldr	r1, [pc, #36]	; (800521c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051fc:	4b07      	ldr	r3, [pc, #28]	; (800521c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	429a      	cmp	r2, r3
 8005208:	d001      	beq.n	800520e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40021000 	.word	0x40021000
 800521c:	40022000 	.word	0x40022000

08005220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005228:	2300      	movs	r3, #0
 800522a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800522c:	2300      	movs	r3, #0
 800522e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005238:	2b00      	cmp	r3, #0
 800523a:	d031      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005240:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005244:	d01a      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005246:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800524a:	d814      	bhi.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800524c:	2b00      	cmp	r3, #0
 800524e:	d009      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005250:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005254:	d10f      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005256:	4bac      	ldr	r3, [pc, #688]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	4aab      	ldr	r2, [pc, #684]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800525c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005260:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005262:	e00c      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3304      	adds	r3, #4
 8005268:	2100      	movs	r1, #0
 800526a:	4618      	mov	r0, r3
 800526c:	f000 f9cc 	bl	8005608 <RCCEx_PLLSAI1_Config>
 8005270:	4603      	mov	r3, r0
 8005272:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005274:	e003      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	74fb      	strb	r3, [r7, #19]
      break;
 800527a:	e000      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800527c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800527e:	7cfb      	ldrb	r3, [r7, #19]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10b      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005284:	4ba0      	ldr	r3, [pc, #640]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	499d      	ldr	r1, [pc, #628]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800529a:	e001      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529c:	7cfb      	ldrb	r3, [r7, #19]
 800529e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8099 	beq.w	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ae:	2300      	movs	r3, #0
 80052b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052b2:	4b95      	ldr	r3, [pc, #596]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80052c2:	2300      	movs	r3, #0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00d      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052c8:	4b8f      	ldr	r3, [pc, #572]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052cc:	4a8e      	ldr	r2, [pc, #568]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d2:	6593      	str	r3, [r2, #88]	; 0x58
 80052d4:	4b8c      	ldr	r3, [pc, #560]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052dc:	60bb      	str	r3, [r7, #8]
 80052de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e0:	2301      	movs	r3, #1
 80052e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052e4:	4b89      	ldr	r3, [pc, #548]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a88      	ldr	r2, [pc, #544]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80052ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052f0:	f7fd fbb2 	bl	8002a58 <HAL_GetTick>
 80052f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052f6:	e009      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f8:	f7fd fbae 	bl	8002a58 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d902      	bls.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	74fb      	strb	r3, [r7, #19]
        break;
 800530a:	e005      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800530c:	4b7f      	ldr	r3, [pc, #508]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0ef      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005318:	7cfb      	ldrb	r3, [r7, #19]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d155      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800531e:	4b7a      	ldr	r3, [pc, #488]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005328:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01e      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	429a      	cmp	r2, r3
 8005338:	d019      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800533a:	4b73      	ldr	r3, [pc, #460]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800533c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005344:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005346:	4b70      	ldr	r3, [pc, #448]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534c:	4a6e      	ldr	r2, [pc, #440]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800534e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005356:	4b6c      	ldr	r3, [pc, #432]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535c:	4a6a      	ldr	r2, [pc, #424]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800535e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005366:	4a68      	ldr	r2, [pc, #416]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d016      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005378:	f7fd fb6e 	bl	8002a58 <HAL_GetTick>
 800537c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800537e:	e00b      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005380:	f7fd fb6a 	bl	8002a58 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	f241 3288 	movw	r2, #5000	; 0x1388
 800538e:	4293      	cmp	r3, r2
 8005390:	d902      	bls.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	74fb      	strb	r3, [r7, #19]
            break;
 8005396:	e006      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005398:	4b5b      	ldr	r3, [pc, #364]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800539a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0ec      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80053a6:	7cfb      	ldrb	r3, [r7, #19]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10b      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053ac:	4b56      	ldr	r3, [pc, #344]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ba:	4953      	ldr	r1, [pc, #332]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053c2:	e004      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053c4:	7cfb      	ldrb	r3, [r7, #19]
 80053c6:	74bb      	strb	r3, [r7, #18]
 80053c8:	e001      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ca:	7cfb      	ldrb	r3, [r7, #19]
 80053cc:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053ce:	7c7b      	ldrb	r3, [r7, #17]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d105      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053d4:	4b4c      	ldr	r3, [pc, #304]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d8:	4a4b      	ldr	r2, [pc, #300]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053ec:	4b46      	ldr	r3, [pc, #280]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f2:	f023 0203 	bic.w	r2, r3, #3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	4943      	ldr	r1, [pc, #268]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800540e:	4b3e      	ldr	r3, [pc, #248]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005414:	f023 020c 	bic.w	r2, r3, #12
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	493a      	ldr	r1, [pc, #232]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005430:	4b35      	ldr	r3, [pc, #212]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005436:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	4932      	ldr	r1, [pc, #200]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005452:	4b2d      	ldr	r3, [pc, #180]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005458:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005460:	4929      	ldr	r1, [pc, #164]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005474:	4b24      	ldr	r3, [pc, #144]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005482:	4921      	ldr	r1, [pc, #132]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005496:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a4:	4918      	ldr	r1, [pc, #96]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054b8:	4b13      	ldr	r3, [pc, #76]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c6:	4910      	ldr	r1, [pc, #64]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d02c      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054da:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	4907      	ldr	r1, [pc, #28]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054f8:	d10a      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054fa:	4b03      	ldr	r3, [pc, #12]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	4a02      	ldr	r2, [pc, #8]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005504:	60d3      	str	r3, [r2, #12]
 8005506:	e015      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005508:	40021000 	.word	0x40021000
 800550c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005514:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005518:	d10c      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3304      	adds	r3, #4
 800551e:	2101      	movs	r1, #1
 8005520:	4618      	mov	r0, r3
 8005522:	f000 f871 	bl	8005608 <RCCEx_PLLSAI1_Config>
 8005526:	4603      	mov	r3, r0
 8005528:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800552a:	7cfb      	ldrb	r3, [r7, #19]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8005530:	7cfb      	ldrb	r3, [r7, #19]
 8005532:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d028      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005540:	4b30      	ldr	r3, [pc, #192]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005546:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554e:	492d      	ldr	r1, [pc, #180]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800555e:	d106      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005560:	4b28      	ldr	r3, [pc, #160]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	4a27      	ldr	r2, [pc, #156]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800556a:	60d3      	str	r3, [r2, #12]
 800556c:	e011      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005572:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005576:	d10c      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	2101      	movs	r1, #1
 800557e:	4618      	mov	r0, r3
 8005580:	f000 f842 	bl	8005608 <RCCEx_PLLSAI1_Config>
 8005584:	4603      	mov	r3, r0
 8005586:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800558e:	7cfb      	ldrb	r3, [r7, #19]
 8005590:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d01c      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800559e:	4b19      	ldr	r3, [pc, #100]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ac:	4915      	ldr	r1, [pc, #84]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055bc:	d10c      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3304      	adds	r3, #4
 80055c2:	2102      	movs	r1, #2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 f81f 	bl	8005608 <RCCEx_PLLSAI1_Config>
 80055ca:	4603      	mov	r3, r0
 80055cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055ce:	7cfb      	ldrb	r3, [r7, #19]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80055d4:	7cfb      	ldrb	r3, [r7, #19]
 80055d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055e4:	4b07      	ldr	r3, [pc, #28]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f2:	4904      	ldr	r1, [pc, #16]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3718      	adds	r7, #24
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	40021000 	.word	0x40021000

08005608 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005616:	4b74      	ldr	r3, [pc, #464]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d018      	beq.n	8005654 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005622:	4b71      	ldr	r3, [pc, #452]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f003 0203 	and.w	r2, r3, #3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d10d      	bne.n	800564e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
       ||
 8005636:	2b00      	cmp	r3, #0
 8005638:	d009      	beq.n	800564e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800563a:	4b6b      	ldr	r3, [pc, #428]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	091b      	lsrs	r3, r3, #4
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
       ||
 800564a:	429a      	cmp	r2, r3
 800564c:	d047      	beq.n	80056de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	73fb      	strb	r3, [r7, #15]
 8005652:	e044      	b.n	80056de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b03      	cmp	r3, #3
 800565a:	d018      	beq.n	800568e <RCCEx_PLLSAI1_Config+0x86>
 800565c:	2b03      	cmp	r3, #3
 800565e:	d825      	bhi.n	80056ac <RCCEx_PLLSAI1_Config+0xa4>
 8005660:	2b01      	cmp	r3, #1
 8005662:	d002      	beq.n	800566a <RCCEx_PLLSAI1_Config+0x62>
 8005664:	2b02      	cmp	r3, #2
 8005666:	d009      	beq.n	800567c <RCCEx_PLLSAI1_Config+0x74>
 8005668:	e020      	b.n	80056ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800566a:	4b5f      	ldr	r3, [pc, #380]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d11d      	bne.n	80056b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800567a:	e01a      	b.n	80056b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800567c:	4b5a      	ldr	r3, [pc, #360]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005684:	2b00      	cmp	r3, #0
 8005686:	d116      	bne.n	80056b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800568c:	e013      	b.n	80056b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800568e:	4b56      	ldr	r3, [pc, #344]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10f      	bne.n	80056ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800569a:	4b53      	ldr	r3, [pc, #332]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056aa:	e006      	b.n	80056ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	73fb      	strb	r3, [r7, #15]
      break;
 80056b0:	e004      	b.n	80056bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056b2:	bf00      	nop
 80056b4:	e002      	b.n	80056bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056b6:	bf00      	nop
 80056b8:	e000      	b.n	80056bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10d      	bne.n	80056de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056c2:	4b49      	ldr	r3, [pc, #292]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6819      	ldr	r1, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	430b      	orrs	r3, r1
 80056d8:	4943      	ldr	r1, [pc, #268]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d17c      	bne.n	80057de <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80056e4:	4b40      	ldr	r3, [pc, #256]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a3f      	ldr	r2, [pc, #252]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f0:	f7fd f9b2 	bl	8002a58 <HAL_GetTick>
 80056f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056f6:	e009      	b.n	800570c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056f8:	f7fd f9ae 	bl	8002a58 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d902      	bls.n	800570c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	73fb      	strb	r3, [r7, #15]
        break;
 800570a:	e005      	b.n	8005718 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800570c:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1ef      	bne.n	80056f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005718:	7bfb      	ldrb	r3, [r7, #15]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d15f      	bne.n	80057de <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d110      	bne.n	8005746 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005724:	4b30      	ldr	r3, [pc, #192]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800572c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6892      	ldr	r2, [r2, #8]
 8005734:	0211      	lsls	r1, r2, #8
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	68d2      	ldr	r2, [r2, #12]
 800573a:	06d2      	lsls	r2, r2, #27
 800573c:	430a      	orrs	r2, r1
 800573e:	492a      	ldr	r1, [pc, #168]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005740:	4313      	orrs	r3, r2
 8005742:	610b      	str	r3, [r1, #16]
 8005744:	e027      	b.n	8005796 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d112      	bne.n	8005772 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800574c:	4b26      	ldr	r3, [pc, #152]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005754:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6892      	ldr	r2, [r2, #8]
 800575c:	0211      	lsls	r1, r2, #8
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6912      	ldr	r2, [r2, #16]
 8005762:	0852      	lsrs	r2, r2, #1
 8005764:	3a01      	subs	r2, #1
 8005766:	0552      	lsls	r2, r2, #21
 8005768:	430a      	orrs	r2, r1
 800576a:	491f      	ldr	r1, [pc, #124]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800576c:	4313      	orrs	r3, r2
 800576e:	610b      	str	r3, [r1, #16]
 8005770:	e011      	b.n	8005796 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005772:	4b1d      	ldr	r3, [pc, #116]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800577a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6892      	ldr	r2, [r2, #8]
 8005782:	0211      	lsls	r1, r2, #8
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6952      	ldr	r2, [r2, #20]
 8005788:	0852      	lsrs	r2, r2, #1
 800578a:	3a01      	subs	r2, #1
 800578c:	0652      	lsls	r2, r2, #25
 800578e:	430a      	orrs	r2, r1
 8005790:	4915      	ldr	r1, [pc, #84]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005792:	4313      	orrs	r3, r2
 8005794:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005796:	4b14      	ldr	r3, [pc, #80]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a13      	ldr	r2, [pc, #76]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800579c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a2:	f7fd f959 	bl	8002a58 <HAL_GetTick>
 80057a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057a8:	e009      	b.n	80057be <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057aa:	f7fd f955 	bl	8002a58 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d902      	bls.n	80057be <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	73fb      	strb	r3, [r7, #15]
          break;
 80057bc:	e005      	b.n	80057ca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057be:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0ef      	beq.n	80057aa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057d0:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	4903      	ldr	r1, [pc, #12]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80057de:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40021000 	.word	0x40021000

080057ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e049      	b.n	8005892 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f841 	bl	800589a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3304      	adds	r3, #4
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f000 fc26 	bl	800607c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d001      	beq.n	80058c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e03b      	b.n	8005940 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a19      	ldr	r2, [pc, #100]	; (800594c <HAL_TIM_Base_Start_IT+0x9c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d009      	beq.n	80058fe <HAL_TIM_Base_Start_IT+0x4e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f2:	d004      	beq.n	80058fe <HAL_TIM_Base_Start_IT+0x4e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a15      	ldr	r2, [pc, #84]	; (8005950 <HAL_TIM_Base_Start_IT+0xa0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d115      	bne.n	800592a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	4b13      	ldr	r3, [pc, #76]	; (8005954 <HAL_TIM_Base_Start_IT+0xa4>)
 8005906:	4013      	ands	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b06      	cmp	r3, #6
 800590e:	d015      	beq.n	800593c <HAL_TIM_Base_Start_IT+0x8c>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005916:	d011      	beq.n	800593c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0201 	orr.w	r2, r2, #1
 8005926:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005928:	e008      	b.n	800593c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f042 0201 	orr.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	e000      	b.n	800593e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	40012c00 	.word	0x40012c00
 8005950:	40014000 	.word	0x40014000
 8005954:	00010007 	.word	0x00010007

08005958 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e049      	b.n	80059fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fc fe3e 	bl	8002600 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3304      	adds	r3, #4
 8005994:	4619      	mov	r1, r3
 8005996:	4610      	mov	r0, r2
 8005998:	f000 fb70 	bl	800607c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d109      	bne.n	8005a2c <HAL_TIM_PWM_Start+0x24>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	bf14      	ite	ne
 8005a24:	2301      	movne	r3, #1
 8005a26:	2300      	moveq	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	e03c      	b.n	8005aa6 <HAL_TIM_PWM_Start+0x9e>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d109      	bne.n	8005a46 <HAL_TIM_PWM_Start+0x3e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	bf14      	ite	ne
 8005a3e:	2301      	movne	r3, #1
 8005a40:	2300      	moveq	r3, #0
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	e02f      	b.n	8005aa6 <HAL_TIM_PWM_Start+0x9e>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d109      	bne.n	8005a60 <HAL_TIM_PWM_Start+0x58>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	bf14      	ite	ne
 8005a58:	2301      	movne	r3, #1
 8005a5a:	2300      	moveq	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	e022      	b.n	8005aa6 <HAL_TIM_PWM_Start+0x9e>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b0c      	cmp	r3, #12
 8005a64:	d109      	bne.n	8005a7a <HAL_TIM_PWM_Start+0x72>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	bf14      	ite	ne
 8005a72:	2301      	movne	r3, #1
 8005a74:	2300      	moveq	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	e015      	b.n	8005aa6 <HAL_TIM_PWM_Start+0x9e>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b10      	cmp	r3, #16
 8005a7e:	d109      	bne.n	8005a94 <HAL_TIM_PWM_Start+0x8c>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	bf14      	ite	ne
 8005a8c:	2301      	movne	r3, #1
 8005a8e:	2300      	moveq	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	e008      	b.n	8005aa6 <HAL_TIM_PWM_Start+0x9e>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	bf14      	ite	ne
 8005aa0:	2301      	movne	r3, #1
 8005aa2:	2300      	moveq	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e07e      	b.n	8005bac <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d104      	bne.n	8005abe <HAL_TIM_PWM_Start+0xb6>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005abc:	e023      	b.n	8005b06 <HAL_TIM_PWM_Start+0xfe>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d104      	bne.n	8005ace <HAL_TIM_PWM_Start+0xc6>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005acc:	e01b      	b.n	8005b06 <HAL_TIM_PWM_Start+0xfe>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d104      	bne.n	8005ade <HAL_TIM_PWM_Start+0xd6>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005adc:	e013      	b.n	8005b06 <HAL_TIM_PWM_Start+0xfe>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b0c      	cmp	r3, #12
 8005ae2:	d104      	bne.n	8005aee <HAL_TIM_PWM_Start+0xe6>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005aec:	e00b      	b.n	8005b06 <HAL_TIM_PWM_Start+0xfe>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d104      	bne.n	8005afe <HAL_TIM_PWM_Start+0xf6>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005afc:	e003      	b.n	8005b06 <HAL_TIM_PWM_Start+0xfe>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2202      	movs	r2, #2
 8005b02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fd96 	bl	8006640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a26      	ldr	r2, [pc, #152]	; (8005bb4 <HAL_TIM_PWM_Start+0x1ac>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d009      	beq.n	8005b32 <HAL_TIM_PWM_Start+0x12a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a25      	ldr	r2, [pc, #148]	; (8005bb8 <HAL_TIM_PWM_Start+0x1b0>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d004      	beq.n	8005b32 <HAL_TIM_PWM_Start+0x12a>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a23      	ldr	r2, [pc, #140]	; (8005bbc <HAL_TIM_PWM_Start+0x1b4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d101      	bne.n	8005b36 <HAL_TIM_PWM_Start+0x12e>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <HAL_TIM_PWM_Start+0x130>
 8005b36:	2300      	movs	r3, #0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b4a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <HAL_TIM_PWM_Start+0x1ac>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d009      	beq.n	8005b6a <HAL_TIM_PWM_Start+0x162>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b5e:	d004      	beq.n	8005b6a <HAL_TIM_PWM_Start+0x162>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a14      	ldr	r2, [pc, #80]	; (8005bb8 <HAL_TIM_PWM_Start+0x1b0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d115      	bne.n	8005b96 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	4b13      	ldr	r3, [pc, #76]	; (8005bc0 <HAL_TIM_PWM_Start+0x1b8>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b06      	cmp	r3, #6
 8005b7a:	d015      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0x1a0>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b82:	d011      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b94:	e008      	b.n	8005ba8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f042 0201 	orr.w	r2, r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	e000      	b.n	8005baa <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40012c00 	.word	0x40012c00
 8005bb8:	40014000 	.word	0x40014000
 8005bbc:	40014400 	.word	0x40014400
 8005bc0:	00010007 	.word	0x00010007

08005bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d122      	bne.n	8005c20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d11b      	bne.n	8005c20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f06f 0202 	mvn.w	r2, #2
 8005bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fa1a 	bl	8006040 <HAL_TIM_IC_CaptureCallback>
 8005c0c:	e005      	b.n	8005c1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fa0c 	bl	800602c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fa1d 	bl	8006054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0304 	and.w	r3, r3, #4
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d122      	bne.n	8005c74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d11b      	bne.n	8005c74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f06f 0204 	mvn.w	r2, #4
 8005c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2202      	movs	r2, #2
 8005c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f9f0 	bl	8006040 <HAL_TIM_IC_CaptureCallback>
 8005c60:	e005      	b.n	8005c6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f9e2 	bl	800602c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f9f3 	bl	8006054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	d122      	bne.n	8005cc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d11b      	bne.n	8005cc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f06f 0208 	mvn.w	r2, #8
 8005c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2204      	movs	r2, #4
 8005c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f9c6 	bl	8006040 <HAL_TIM_IC_CaptureCallback>
 8005cb4:	e005      	b.n	8005cc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f9b8 	bl	800602c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f9c9 	bl	8006054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f003 0310 	and.w	r3, r3, #16
 8005cd2:	2b10      	cmp	r3, #16
 8005cd4:	d122      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b10      	cmp	r3, #16
 8005ce2:	d11b      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f06f 0210 	mvn.w	r2, #16
 8005cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2208      	movs	r2, #8
 8005cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f99c 	bl	8006040 <HAL_TIM_IC_CaptureCallback>
 8005d08:	e005      	b.n	8005d16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f98e 	bl	800602c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f99f 	bl	8006054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d10e      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d107      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0201 	mvn.w	r2, #1
 8005d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7fb ff62 	bl	8001c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d52:	2b80      	cmp	r3, #128	; 0x80
 8005d54:	d10e      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d60:	2b80      	cmp	r3, #128	; 0x80
 8005d62:	d107      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fcfc 	bl	800676c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d82:	d10e      	bne.n	8005da2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8e:	2b80      	cmp	r3, #128	; 0x80
 8005d90:	d107      	bne.n	8005da2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fcef 	bl	8006780 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dac:	2b40      	cmp	r3, #64	; 0x40
 8005dae:	d10e      	bne.n	8005dce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dba:	2b40      	cmp	r3, #64	; 0x40
 8005dbc:	d107      	bne.n	8005dce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f94d 	bl	8006068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b20      	cmp	r3, #32
 8005dda:	d10e      	bne.n	8005dfa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d107      	bne.n	8005dfa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f06f 0220 	mvn.w	r2, #32
 8005df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fcaf 	bl	8006758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dfa:	bf00      	nop
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e0ff      	b.n	8006022 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b14      	cmp	r3, #20
 8005e2e:	f200 80f0 	bhi.w	8006012 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e32:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e38:	08005e8d 	.word	0x08005e8d
 8005e3c:	08006013 	.word	0x08006013
 8005e40:	08006013 	.word	0x08006013
 8005e44:	08006013 	.word	0x08006013
 8005e48:	08005ecd 	.word	0x08005ecd
 8005e4c:	08006013 	.word	0x08006013
 8005e50:	08006013 	.word	0x08006013
 8005e54:	08006013 	.word	0x08006013
 8005e58:	08005f0f 	.word	0x08005f0f
 8005e5c:	08006013 	.word	0x08006013
 8005e60:	08006013 	.word	0x08006013
 8005e64:	08006013 	.word	0x08006013
 8005e68:	08005f4f 	.word	0x08005f4f
 8005e6c:	08006013 	.word	0x08006013
 8005e70:	08006013 	.word	0x08006013
 8005e74:	08006013 	.word	0x08006013
 8005e78:	08005f91 	.word	0x08005f91
 8005e7c:	08006013 	.word	0x08006013
 8005e80:	08006013 	.word	0x08006013
 8005e84:	08006013 	.word	0x08006013
 8005e88:	08005fd1 	.word	0x08005fd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 f956 	bl	8006144 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0208 	orr.w	r2, r2, #8
 8005ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699a      	ldr	r2, [r3, #24]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0204 	bic.w	r2, r2, #4
 8005eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6999      	ldr	r1, [r3, #24]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	691a      	ldr	r2, [r3, #16]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	619a      	str	r2, [r3, #24]
      break;
 8005eca:	e0a5      	b.n	8006018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68b9      	ldr	r1, [r7, #8]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 f9b2 	bl	800623c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	699a      	ldr	r2, [r3, #24]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6999      	ldr	r1, [r3, #24]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	021a      	lsls	r2, r3, #8
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	619a      	str	r2, [r3, #24]
      break;
 8005f0c:	e084      	b.n	8006018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68b9      	ldr	r1, [r7, #8]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 fa0b 	bl	8006330 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69da      	ldr	r2, [r3, #28]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0208 	orr.w	r2, r2, #8
 8005f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69da      	ldr	r2, [r3, #28]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0204 	bic.w	r2, r2, #4
 8005f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69d9      	ldr	r1, [r3, #28]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	61da      	str	r2, [r3, #28]
      break;
 8005f4c:	e064      	b.n	8006018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fa63 	bl	8006420 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69da      	ldr	r2, [r3, #28]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69da      	ldr	r2, [r3, #28]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69d9      	ldr	r1, [r3, #28]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	021a      	lsls	r2, r3, #8
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	61da      	str	r2, [r3, #28]
      break;
 8005f8e:	e043      	b.n	8006018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 faa0 	bl	80064dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0208 	orr.w	r2, r2, #8
 8005faa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0204 	bic.w	r2, r2, #4
 8005fba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005fce:	e023      	b.n	8006018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fad8 	bl	800658c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ffa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	021a      	lsls	r2, r3, #8
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006010:	e002      	b.n	8006018 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	75fb      	strb	r3, [r7, #23]
      break;
 8006016:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006020:	7dfb      	ldrb	r3, [r7, #23]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop

0800602c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a2a      	ldr	r2, [pc, #168]	; (8006138 <TIM_Base_SetConfig+0xbc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d003      	beq.n	800609c <TIM_Base_SetConfig+0x20>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609a:	d108      	bne.n	80060ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a21      	ldr	r2, [pc, #132]	; (8006138 <TIM_Base_SetConfig+0xbc>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00b      	beq.n	80060ce <TIM_Base_SetConfig+0x52>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060bc:	d007      	beq.n	80060ce <TIM_Base_SetConfig+0x52>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a1e      	ldr	r2, [pc, #120]	; (800613c <TIM_Base_SetConfig+0xc0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d003      	beq.n	80060ce <TIM_Base_SetConfig+0x52>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a1d      	ldr	r2, [pc, #116]	; (8006140 <TIM_Base_SetConfig+0xc4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d108      	bne.n	80060e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a0c      	ldr	r2, [pc, #48]	; (8006138 <TIM_Base_SetConfig+0xbc>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d007      	beq.n	800611c <TIM_Base_SetConfig+0xa0>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a0b      	ldr	r2, [pc, #44]	; (800613c <TIM_Base_SetConfig+0xc0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d003      	beq.n	800611c <TIM_Base_SetConfig+0xa0>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a0a      	ldr	r2, [pc, #40]	; (8006140 <TIM_Base_SetConfig+0xc4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d103      	bne.n	8006124 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	691a      	ldr	r2, [r3, #16]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	615a      	str	r2, [r3, #20]
}
 800612a:	bf00      	nop
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40012c00 	.word	0x40012c00
 800613c:	40014000 	.word	0x40014000
 8006140:	40014400 	.word	0x40014400

08006144 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f023 0201 	bic.w	r2, r3, #1
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0303 	bic.w	r3, r3, #3
 800617e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f023 0302 	bic.w	r3, r3, #2
 8006190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a24      	ldr	r2, [pc, #144]	; (8006230 <TIM_OC1_SetConfig+0xec>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d007      	beq.n	80061b4 <TIM_OC1_SetConfig+0x70>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a23      	ldr	r2, [pc, #140]	; (8006234 <TIM_OC1_SetConfig+0xf0>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d003      	beq.n	80061b4 <TIM_OC1_SetConfig+0x70>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a22      	ldr	r2, [pc, #136]	; (8006238 <TIM_OC1_SetConfig+0xf4>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d10c      	bne.n	80061ce <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f023 0308 	bic.w	r3, r3, #8
 80061ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f023 0304 	bic.w	r3, r3, #4
 80061cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a17      	ldr	r2, [pc, #92]	; (8006230 <TIM_OC1_SetConfig+0xec>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d007      	beq.n	80061e6 <TIM_OC1_SetConfig+0xa2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a16      	ldr	r2, [pc, #88]	; (8006234 <TIM_OC1_SetConfig+0xf0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d003      	beq.n	80061e6 <TIM_OC1_SetConfig+0xa2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a15      	ldr	r2, [pc, #84]	; (8006238 <TIM_OC1_SetConfig+0xf4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d111      	bne.n	800620a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4313      	orrs	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	621a      	str	r2, [r3, #32]
}
 8006224:	bf00      	nop
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	40012c00 	.word	0x40012c00
 8006234:	40014000 	.word	0x40014000
 8006238:	40014400 	.word	0x40014400

0800623c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	f023 0210 	bic.w	r2, r3, #16
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800626a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	021b      	lsls	r3, r3, #8
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	4313      	orrs	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f023 0320 	bic.w	r3, r3, #32
 800628a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a22      	ldr	r2, [pc, #136]	; (8006324 <TIM_OC2_SetConfig+0xe8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d10d      	bne.n	80062bc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	011b      	lsls	r3, r3, #4
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a19      	ldr	r2, [pc, #100]	; (8006324 <TIM_OC2_SetConfig+0xe8>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d007      	beq.n	80062d4 <TIM_OC2_SetConfig+0x98>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a18      	ldr	r2, [pc, #96]	; (8006328 <TIM_OC2_SetConfig+0xec>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d003      	beq.n	80062d4 <TIM_OC2_SetConfig+0x98>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a17      	ldr	r2, [pc, #92]	; (800632c <TIM_OC2_SetConfig+0xf0>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d113      	bne.n	80062fc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	621a      	str	r2, [r3, #32]
}
 8006316:	bf00      	nop
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40012c00 	.word	0x40012c00
 8006328:	40014000 	.word	0x40014000
 800632c:	40014400 	.word	0x40014400

08006330 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800635e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0303 	bic.w	r3, r3, #3
 800636a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800637c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	021b      	lsls	r3, r3, #8
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4313      	orrs	r3, r2
 8006388:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a21      	ldr	r2, [pc, #132]	; (8006414 <TIM_OC3_SetConfig+0xe4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d10d      	bne.n	80063ae <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a18      	ldr	r2, [pc, #96]	; (8006414 <TIM_OC3_SetConfig+0xe4>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d007      	beq.n	80063c6 <TIM_OC3_SetConfig+0x96>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a17      	ldr	r2, [pc, #92]	; (8006418 <TIM_OC3_SetConfig+0xe8>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d003      	beq.n	80063c6 <TIM_OC3_SetConfig+0x96>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a16      	ldr	r2, [pc, #88]	; (800641c <TIM_OC3_SetConfig+0xec>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d113      	bne.n	80063ee <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4313      	orrs	r3, r2
 80063e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	621a      	str	r2, [r3, #32]
}
 8006408:	bf00      	nop
 800640a:	371c      	adds	r7, #28
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	40012c00 	.word	0x40012c00
 8006418:	40014000 	.word	0x40014000
 800641c:	40014400 	.word	0x40014400

08006420 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800644e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800645a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4313      	orrs	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800646e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	031b      	lsls	r3, r3, #12
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a14      	ldr	r2, [pc, #80]	; (80064d0 <TIM_OC4_SetConfig+0xb0>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d007      	beq.n	8006494 <TIM_OC4_SetConfig+0x74>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a13      	ldr	r2, [pc, #76]	; (80064d4 <TIM_OC4_SetConfig+0xb4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d003      	beq.n	8006494 <TIM_OC4_SetConfig+0x74>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a12      	ldr	r2, [pc, #72]	; (80064d8 <TIM_OC4_SetConfig+0xb8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d109      	bne.n	80064a8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800649a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	019b      	lsls	r3, r3, #6
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	40012c00 	.word	0x40012c00
 80064d4:	40014000 	.word	0x40014000
 80064d8:	40014400 	.word	0x40014400

080064dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800650a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006520:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	041b      	lsls	r3, r3, #16
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a13      	ldr	r2, [pc, #76]	; (8006580 <TIM_OC5_SetConfig+0xa4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d007      	beq.n	8006546 <TIM_OC5_SetConfig+0x6a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a12      	ldr	r2, [pc, #72]	; (8006584 <TIM_OC5_SetConfig+0xa8>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d003      	beq.n	8006546 <TIM_OC5_SetConfig+0x6a>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a11      	ldr	r2, [pc, #68]	; (8006588 <TIM_OC5_SetConfig+0xac>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d109      	bne.n	800655a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800654c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	021b      	lsls	r3, r3, #8
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	4313      	orrs	r3, r2
 8006558:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	621a      	str	r2, [r3, #32]
}
 8006574:	bf00      	nop
 8006576:	371c      	adds	r7, #28
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	40012c00 	.word	0x40012c00
 8006584:	40014000 	.word	0x40014000
 8006588:	40014400 	.word	0x40014400

0800658c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	051b      	lsls	r3, r3, #20
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a14      	ldr	r2, [pc, #80]	; (8006634 <TIM_OC6_SetConfig+0xa8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d007      	beq.n	80065f8 <TIM_OC6_SetConfig+0x6c>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a13      	ldr	r2, [pc, #76]	; (8006638 <TIM_OC6_SetConfig+0xac>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d003      	beq.n	80065f8 <TIM_OC6_SetConfig+0x6c>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a12      	ldr	r2, [pc, #72]	; (800663c <TIM_OC6_SetConfig+0xb0>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d109      	bne.n	800660c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	029b      	lsls	r3, r3, #10
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	4313      	orrs	r3, r2
 800660a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	621a      	str	r2, [r3, #32]
}
 8006626:	bf00      	nop
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	40012c00 	.word	0x40012c00
 8006638:	40014000 	.word	0x40014000
 800663c:	40014400 	.word	0x40014400

08006640 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f003 031f 	and.w	r3, r3, #31
 8006652:	2201      	movs	r2, #1
 8006654:	fa02 f303 	lsl.w	r3, r2, r3
 8006658:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6a1a      	ldr	r2, [r3, #32]
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	43db      	mvns	r3, r3
 8006662:	401a      	ands	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a1a      	ldr	r2, [r3, #32]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f003 031f 	and.w	r3, r3, #31
 8006672:	6879      	ldr	r1, [r7, #4]
 8006674:	fa01 f303 	lsl.w	r3, r1, r3
 8006678:	431a      	orrs	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	621a      	str	r2, [r3, #32]
}
 800667e:	bf00      	nop
 8006680:	371c      	adds	r7, #28
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
	...

0800668c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800669c:	2b01      	cmp	r3, #1
 800669e:	d101      	bne.n	80066a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066a0:	2302      	movs	r3, #2
 80066a2:	e04f      	b.n	8006744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a21      	ldr	r2, [pc, #132]	; (8006750 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d108      	bne.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80066d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	4313      	orrs	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a14      	ldr	r2, [pc, #80]	; (8006750 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d009      	beq.n	8006718 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800670c:	d004      	beq.n	8006718 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a10      	ldr	r2, [pc, #64]	; (8006754 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d10c      	bne.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800671e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	4313      	orrs	r3, r2
 8006728:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	40012c00 	.word	0x40012c00
 8006754:	40014000 	.word	0x40014000

08006758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e040      	b.n	8006828 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d106      	bne.n	80067bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fb fff4 	bl	80027a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2224      	movs	r2, #36	; 0x24
 80067c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0201 	bic.w	r2, r2, #1
 80067d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fc0e 	bl	8006ff4 <UART_SetConfig>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d101      	bne.n	80067e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e022      	b.n	8006828 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fe0c 	bl	8007408 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800680e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fe93 	bl	800754c <UART_CheckIdleState>
 8006826:	4603      	mov	r3, r0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08a      	sub	sp, #40	; 0x28
 8006834:	af02      	add	r7, sp, #8
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	4613      	mov	r3, r2
 800683e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006844:	2b20      	cmp	r3, #32
 8006846:	f040 8082 	bne.w	800694e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <HAL_UART_Transmit+0x26>
 8006850:	88fb      	ldrh	r3, [r7, #6]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e07a      	b.n	8006950 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <HAL_UART_Transmit+0x38>
 8006864:	2302      	movs	r3, #2
 8006866:	e073      	b.n	8006950 <HAL_UART_Transmit+0x120>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2221      	movs	r2, #33	; 0x21
 800687c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800687e:	f7fc f8eb 	bl	8002a58 <HAL_GetTick>
 8006882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	88fa      	ldrh	r2, [r7, #6]
 8006888:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	88fa      	ldrh	r2, [r7, #6]
 8006890:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689c:	d108      	bne.n	80068b0 <HAL_UART_Transmit+0x80>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d104      	bne.n	80068b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	e003      	b.n	80068b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068b4:	2300      	movs	r3, #0
 80068b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80068c0:	e02d      	b.n	800691e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2200      	movs	r2, #0
 80068ca:	2180      	movs	r1, #128	; 0x80
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 fe86 	bl	80075de <UART_WaitOnFlagUntilTimeout>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e039      	b.n	8006950 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10b      	bne.n	80068fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	881a      	ldrh	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068ee:	b292      	uxth	r2, r2
 80068f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	3302      	adds	r3, #2
 80068f6:	61bb      	str	r3, [r7, #24]
 80068f8:	e008      	b.n	800690c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	781a      	ldrb	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	b292      	uxth	r2, r2
 8006904:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	3301      	adds	r3, #1
 800690a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006912:	b29b      	uxth	r3, r3
 8006914:	3b01      	subs	r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1cb      	bne.n	80068c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2200      	movs	r2, #0
 8006932:	2140      	movs	r1, #64	; 0x40
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 fe52 	bl	80075de <UART_WaitOnFlagUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e005      	b.n	8006950 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2220      	movs	r2, #32
 8006948:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	e000      	b.n	8006950 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800694e:	2302      	movs	r3, #2
  }
}
 8006950:	4618      	mov	r0, r3
 8006952:	3720      	adds	r7, #32
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08a      	sub	sp, #40	; 0x28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	4613      	mov	r3, r2
 8006964:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800696a:	2b20      	cmp	r3, #32
 800696c:	d142      	bne.n	80069f4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <HAL_UART_Receive_IT+0x22>
 8006974:	88fb      	ldrh	r3, [r7, #6]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e03b      	b.n	80069f6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006984:	2b01      	cmp	r3, #1
 8006986:	d101      	bne.n	800698c <HAL_UART_Receive_IT+0x34>
 8006988:	2302      	movs	r3, #2
 800698a:	e034      	b.n	80069f6 <HAL_UART_Receive_IT+0x9e>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a18      	ldr	r2, [pc, #96]	; (8006a00 <HAL_UART_Receive_IT+0xa8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d01f      	beq.n	80069e4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d018      	beq.n	80069e4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	613b      	str	r3, [r7, #16]
   return(result);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069c6:	627b      	str	r3, [r7, #36]	; 0x24
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	623b      	str	r3, [r7, #32]
 80069d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	69f9      	ldr	r1, [r7, #28]
 80069d6:	6a3a      	ldr	r2, [r7, #32]
 80069d8:	e841 2300 	strex	r3, r2, [r1]
 80069dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e6      	bne.n	80069b2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069e4:	88fb      	ldrh	r3, [r7, #6]
 80069e6:	461a      	mov	r2, r3
 80069e8:	68b9      	ldr	r1, [r7, #8]
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 febc 	bl	8007768 <UART_Start_Receive_IT>
 80069f0:	4603      	mov	r3, r0
 80069f2:	e000      	b.n	80069f6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80069f4:	2302      	movs	r3, #2
  }
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3728      	adds	r7, #40	; 0x28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	40008000 	.word	0x40008000

08006a04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b0ba      	sub	sp, #232	; 0xe8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a32:	4013      	ands	r3, r2
 8006a34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006a38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d115      	bne.n	8006a6c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a44:	f003 0320 	and.w	r3, r3, #32
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00f      	beq.n	8006a6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a50:	f003 0320 	and.w	r3, r3, #32
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d009      	beq.n	8006a6c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 82a6 	beq.w	8006fae <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	4798      	blx	r3
      }
      return;
 8006a6a:	e2a0      	b.n	8006fae <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006a6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8117 	beq.w	8006ca4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d106      	bne.n	8006a90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006a82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006a86:	4b85      	ldr	r3, [pc, #532]	; (8006c9c <HAL_UART_IRQHandler+0x298>)
 8006a88:	4013      	ands	r3, r2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 810a 	beq.w	8006ca4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d011      	beq.n	8006ac0 <HAL_UART_IRQHandler+0xbc>
 8006a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00b      	beq.n	8006ac0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2201      	movs	r2, #1
 8006aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ab6:	f043 0201 	orr.w	r2, r3, #1
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d011      	beq.n	8006af0 <HAL_UART_IRQHandler+0xec>
 8006acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00b      	beq.n	8006af0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2202      	movs	r2, #2
 8006ade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ae6:	f043 0204 	orr.w	r2, r3, #4
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d011      	beq.n	8006b20 <HAL_UART_IRQHandler+0x11c>
 8006afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00b      	beq.n	8006b20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2204      	movs	r2, #4
 8006b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b16:	f043 0202 	orr.w	r2, r3, #2
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d017      	beq.n	8006b5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d105      	bne.n	8006b44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00b      	beq.n	8006b5c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2208      	movs	r2, #8
 8006b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b52:	f043 0208 	orr.w	r2, r3, #8
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d012      	beq.n	8006b8e <HAL_UART_IRQHandler+0x18a>
 8006b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00c      	beq.n	8006b8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b84:	f043 0220 	orr.w	r2, r3, #32
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 820c 	beq.w	8006fb2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b9e:	f003 0320 	and.w	r3, r3, #32
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00d      	beq.n	8006bc2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006baa:	f003 0320 	and.w	r3, r3, #32
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d007      	beq.n	8006bc2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd6:	2b40      	cmp	r3, #64	; 0x40
 8006bd8:	d005      	beq.n	8006be6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bde:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d04f      	beq.n	8006c86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fe88 	bl	80078fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf6:	2b40      	cmp	r3, #64	; 0x40
 8006bf8:	d141      	bne.n	8006c7e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3308      	adds	r3, #8
 8006c00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c08:	e853 3f00 	ldrex	r3, [r3]
 8006c0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3308      	adds	r3, #8
 8006c22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1d9      	bne.n	8006bfa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d013      	beq.n	8006c76 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c52:	4a13      	ldr	r2, [pc, #76]	; (8006ca0 <HAL_UART_IRQHandler+0x29c>)
 8006c54:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fc f8e0 	bl	8002e20 <HAL_DMA_Abort_IT>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d017      	beq.n	8006c96 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006c70:	4610      	mov	r0, r2
 8006c72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c74:	e00f      	b.n	8006c96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7fb f976 	bl	8001f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7c:	e00b      	b.n	8006c96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7fb f972 	bl	8001f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c84:	e007      	b.n	8006c96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7fb f96e 	bl	8001f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006c94:	e18d      	b.n	8006fb2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c96:	bf00      	nop
    return;
 8006c98:	e18b      	b.n	8006fb2 <HAL_UART_IRQHandler+0x5ae>
 8006c9a:	bf00      	nop
 8006c9c:	04000120 	.word	0x04000120
 8006ca0:	080079c3 	.word	0x080079c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	f040 8146 	bne.w	8006f3a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb2:	f003 0310 	and.w	r3, r3, #16
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 813f 	beq.w	8006f3a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 8138 	beq.w	8006f3a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2210      	movs	r2, #16
 8006cd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cdc:	2b40      	cmp	r3, #64	; 0x40
 8006cde:	f040 80b4 	bne.w	8006e4a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 815f 	beq.w	8006fb6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d02:	429a      	cmp	r2, r3
 8006d04:	f080 8157 	bcs.w	8006fb6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0320 	and.w	r3, r3, #32
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f040 8085 	bne.w	8006e2e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1da      	bne.n	8006d24 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3308      	adds	r3, #8
 8006d74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d78:	e853 3f00 	ldrex	r3, [r3]
 8006d7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d80:	f023 0301 	bic.w	r3, r3, #1
 8006d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e1      	bne.n	8006d6e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3308      	adds	r3, #8
 8006db0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3308      	adds	r3, #8
 8006dca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006dce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006dd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006dd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e3      	bne.n	8006daa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2220      	movs	r2, #32
 8006de6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df6:	e853 3f00 	ldrex	r3, [r3]
 8006dfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dfe:	f023 0310 	bic.w	r3, r3, #16
 8006e02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e10:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e12:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e4      	bne.n	8006dee <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fb ffbb 	bl	8002da4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f8ca 	bl	8006fdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e48:	e0b5      	b.n	8006fb6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 80a7 	beq.w	8006fba <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006e6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 80a2 	beq.w	8006fba <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	e853 3f00 	ldrex	r3, [r3]
 8006e82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e98:	647b      	str	r3, [r7, #68]	; 0x44
 8006e9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e4      	bne.n	8006e76 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3308      	adds	r3, #8
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	623b      	str	r3, [r7, #32]
   return(result);
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	f023 0301 	bic.w	r3, r3, #1
 8006ec2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3308      	adds	r3, #8
 8006ecc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ed0:	633a      	str	r2, [r7, #48]	; 0x30
 8006ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed8:	e841 2300 	strex	r3, r2, [r1]
 8006edc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e3      	bne.n	8006eac <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	e853 3f00 	ldrex	r3, [r3]
 8006f02:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0310 	bic.w	r3, r3, #16
 8006f0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f18:	61fb      	str	r3, [r7, #28]
 8006f1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	69b9      	ldr	r1, [r7, #24]
 8006f1e:	69fa      	ldr	r2, [r7, #28]
 8006f20:	e841 2300 	strex	r3, r2, [r1]
 8006f24:	617b      	str	r3, [r7, #20]
   return(result);
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e4      	bne.n	8006ef6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f852 	bl	8006fdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f38:	e03f      	b.n	8006fba <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00e      	beq.n	8006f64 <HAL_UART_IRQHandler+0x560>
 8006f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d008      	beq.n	8006f64 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fed0 	bl	8007d02 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f62:	e02d      	b.n	8006fc0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00e      	beq.n	8006f8e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d008      	beq.n	8006f8e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d01c      	beq.n	8006fbe <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	4798      	blx	r3
    }
    return;
 8006f8c:	e017      	b.n	8006fbe <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d012      	beq.n	8006fc0 <HAL_UART_IRQHandler+0x5bc>
 8006f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00c      	beq.n	8006fc0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fd21 	bl	80079ee <UART_EndTransmit_IT>
    return;
 8006fac:	e008      	b.n	8006fc0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006fae:	bf00      	nop
 8006fb0:	e006      	b.n	8006fc0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006fb2:	bf00      	nop
 8006fb4:	e004      	b.n	8006fc0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006fb6:	bf00      	nop
 8006fb8:	e002      	b.n	8006fc0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006fba:	bf00      	nop
 8006fbc:	e000      	b.n	8006fc0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006fbe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006fc0:	37e8      	adds	r7, #232	; 0xe8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop

08006fc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ff4:	b5b0      	push	{r4, r5, r7, lr}
 8006ff6:	b088      	sub	sp, #32
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	431a      	orrs	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	431a      	orrs	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	4313      	orrs	r3, r2
 8007016:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	4baf      	ldr	r3, [pc, #700]	; (80072dc <UART_SetConfig+0x2e8>)
 8007020:	4013      	ands	r3, r2
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	6812      	ldr	r2, [r2, #0]
 8007026:	69f9      	ldr	r1, [r7, #28]
 8007028:	430b      	orrs	r3, r1
 800702a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4aa4      	ldr	r2, [pc, #656]	; (80072e0 <UART_SetConfig+0x2ec>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d004      	beq.n	800705c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	69fa      	ldr	r2, [r7, #28]
 8007058:	4313      	orrs	r3, r2
 800705a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	69fa      	ldr	r2, [r7, #28]
 800706c:	430a      	orrs	r2, r1
 800706e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a9b      	ldr	r2, [pc, #620]	; (80072e4 <UART_SetConfig+0x2f0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d121      	bne.n	80070be <UART_SetConfig+0xca>
 800707a:	4b9b      	ldr	r3, [pc, #620]	; (80072e8 <UART_SetConfig+0x2f4>)
 800707c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007080:	f003 0303 	and.w	r3, r3, #3
 8007084:	2b03      	cmp	r3, #3
 8007086:	d817      	bhi.n	80070b8 <UART_SetConfig+0xc4>
 8007088:	a201      	add	r2, pc, #4	; (adr r2, 8007090 <UART_SetConfig+0x9c>)
 800708a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708e:	bf00      	nop
 8007090:	080070a1 	.word	0x080070a1
 8007094:	080070ad 	.word	0x080070ad
 8007098:	080070a7 	.word	0x080070a7
 800709c:	080070b3 	.word	0x080070b3
 80070a0:	2301      	movs	r3, #1
 80070a2:	76fb      	strb	r3, [r7, #27]
 80070a4:	e070      	b.n	8007188 <UART_SetConfig+0x194>
 80070a6:	2302      	movs	r3, #2
 80070a8:	76fb      	strb	r3, [r7, #27]
 80070aa:	e06d      	b.n	8007188 <UART_SetConfig+0x194>
 80070ac:	2304      	movs	r3, #4
 80070ae:	76fb      	strb	r3, [r7, #27]
 80070b0:	e06a      	b.n	8007188 <UART_SetConfig+0x194>
 80070b2:	2308      	movs	r3, #8
 80070b4:	76fb      	strb	r3, [r7, #27]
 80070b6:	e067      	b.n	8007188 <UART_SetConfig+0x194>
 80070b8:	2310      	movs	r3, #16
 80070ba:	76fb      	strb	r3, [r7, #27]
 80070bc:	e064      	b.n	8007188 <UART_SetConfig+0x194>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a8a      	ldr	r2, [pc, #552]	; (80072ec <UART_SetConfig+0x2f8>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d132      	bne.n	800712e <UART_SetConfig+0x13a>
 80070c8:	4b87      	ldr	r3, [pc, #540]	; (80072e8 <UART_SetConfig+0x2f4>)
 80070ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ce:	f003 030c 	and.w	r3, r3, #12
 80070d2:	2b0c      	cmp	r3, #12
 80070d4:	d828      	bhi.n	8007128 <UART_SetConfig+0x134>
 80070d6:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <UART_SetConfig+0xe8>)
 80070d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070dc:	08007111 	.word	0x08007111
 80070e0:	08007129 	.word	0x08007129
 80070e4:	08007129 	.word	0x08007129
 80070e8:	08007129 	.word	0x08007129
 80070ec:	0800711d 	.word	0x0800711d
 80070f0:	08007129 	.word	0x08007129
 80070f4:	08007129 	.word	0x08007129
 80070f8:	08007129 	.word	0x08007129
 80070fc:	08007117 	.word	0x08007117
 8007100:	08007129 	.word	0x08007129
 8007104:	08007129 	.word	0x08007129
 8007108:	08007129 	.word	0x08007129
 800710c:	08007123 	.word	0x08007123
 8007110:	2300      	movs	r3, #0
 8007112:	76fb      	strb	r3, [r7, #27]
 8007114:	e038      	b.n	8007188 <UART_SetConfig+0x194>
 8007116:	2302      	movs	r3, #2
 8007118:	76fb      	strb	r3, [r7, #27]
 800711a:	e035      	b.n	8007188 <UART_SetConfig+0x194>
 800711c:	2304      	movs	r3, #4
 800711e:	76fb      	strb	r3, [r7, #27]
 8007120:	e032      	b.n	8007188 <UART_SetConfig+0x194>
 8007122:	2308      	movs	r3, #8
 8007124:	76fb      	strb	r3, [r7, #27]
 8007126:	e02f      	b.n	8007188 <UART_SetConfig+0x194>
 8007128:	2310      	movs	r3, #16
 800712a:	76fb      	strb	r3, [r7, #27]
 800712c:	e02c      	b.n	8007188 <UART_SetConfig+0x194>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a6b      	ldr	r2, [pc, #428]	; (80072e0 <UART_SetConfig+0x2ec>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d125      	bne.n	8007184 <UART_SetConfig+0x190>
 8007138:	4b6b      	ldr	r3, [pc, #428]	; (80072e8 <UART_SetConfig+0x2f4>)
 800713a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007142:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007146:	d017      	beq.n	8007178 <UART_SetConfig+0x184>
 8007148:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800714c:	d817      	bhi.n	800717e <UART_SetConfig+0x18a>
 800714e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007152:	d00b      	beq.n	800716c <UART_SetConfig+0x178>
 8007154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007158:	d811      	bhi.n	800717e <UART_SetConfig+0x18a>
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <UART_SetConfig+0x172>
 800715e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007162:	d006      	beq.n	8007172 <UART_SetConfig+0x17e>
 8007164:	e00b      	b.n	800717e <UART_SetConfig+0x18a>
 8007166:	2300      	movs	r3, #0
 8007168:	76fb      	strb	r3, [r7, #27]
 800716a:	e00d      	b.n	8007188 <UART_SetConfig+0x194>
 800716c:	2302      	movs	r3, #2
 800716e:	76fb      	strb	r3, [r7, #27]
 8007170:	e00a      	b.n	8007188 <UART_SetConfig+0x194>
 8007172:	2304      	movs	r3, #4
 8007174:	76fb      	strb	r3, [r7, #27]
 8007176:	e007      	b.n	8007188 <UART_SetConfig+0x194>
 8007178:	2308      	movs	r3, #8
 800717a:	76fb      	strb	r3, [r7, #27]
 800717c:	e004      	b.n	8007188 <UART_SetConfig+0x194>
 800717e:	2310      	movs	r3, #16
 8007180:	76fb      	strb	r3, [r7, #27]
 8007182:	e001      	b.n	8007188 <UART_SetConfig+0x194>
 8007184:	2310      	movs	r3, #16
 8007186:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a54      	ldr	r2, [pc, #336]	; (80072e0 <UART_SetConfig+0x2ec>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d173      	bne.n	800727a <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007192:	7efb      	ldrb	r3, [r7, #27]
 8007194:	2b08      	cmp	r3, #8
 8007196:	d824      	bhi.n	80071e2 <UART_SetConfig+0x1ee>
 8007198:	a201      	add	r2, pc, #4	; (adr r2, 80071a0 <UART_SetConfig+0x1ac>)
 800719a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719e:	bf00      	nop
 80071a0:	080071c5 	.word	0x080071c5
 80071a4:	080071e3 	.word	0x080071e3
 80071a8:	080071cd 	.word	0x080071cd
 80071ac:	080071e3 	.word	0x080071e3
 80071b0:	080071d3 	.word	0x080071d3
 80071b4:	080071e3 	.word	0x080071e3
 80071b8:	080071e3 	.word	0x080071e3
 80071bc:	080071e3 	.word	0x080071e3
 80071c0:	080071db 	.word	0x080071db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071c4:	f7fd ff6e 	bl	80050a4 <HAL_RCC_GetPCLK1Freq>
 80071c8:	6178      	str	r0, [r7, #20]
        break;
 80071ca:	e00f      	b.n	80071ec <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071cc:	4b48      	ldr	r3, [pc, #288]	; (80072f0 <UART_SetConfig+0x2fc>)
 80071ce:	617b      	str	r3, [r7, #20]
        break;
 80071d0:	e00c      	b.n	80071ec <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071d2:	f7fd fecf 	bl	8004f74 <HAL_RCC_GetSysClockFreq>
 80071d6:	6178      	str	r0, [r7, #20]
        break;
 80071d8:	e008      	b.n	80071ec <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071de:	617b      	str	r3, [r7, #20]
        break;
 80071e0:	e004      	b.n	80071ec <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	76bb      	strb	r3, [r7, #26]
        break;
 80071ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 80fc 	beq.w	80073ec <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	4613      	mov	r3, r2
 80071fa:	005b      	lsls	r3, r3, #1
 80071fc:	4413      	add	r3, r2
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	429a      	cmp	r2, r3
 8007202:	d305      	bcc.n	8007210 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	429a      	cmp	r2, r3
 800720e:	d902      	bls.n	8007216 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	76bb      	strb	r3, [r7, #26]
 8007214:	e0ea      	b.n	80073ec <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	4618      	mov	r0, r3
 800721a:	f04f 0100 	mov.w	r1, #0
 800721e:	f04f 0200 	mov.w	r2, #0
 8007222:	f04f 0300 	mov.w	r3, #0
 8007226:	020b      	lsls	r3, r1, #8
 8007228:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800722c:	0202      	lsls	r2, r0, #8
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	6849      	ldr	r1, [r1, #4]
 8007232:	0849      	lsrs	r1, r1, #1
 8007234:	4608      	mov	r0, r1
 8007236:	f04f 0100 	mov.w	r1, #0
 800723a:	1814      	adds	r4, r2, r0
 800723c:	eb43 0501 	adc.w	r5, r3, r1
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	461a      	mov	r2, r3
 8007246:	f04f 0300 	mov.w	r3, #0
 800724a:	4620      	mov	r0, r4
 800724c:	4629      	mov	r1, r5
 800724e:	f7f9 f80f 	bl	8000270 <__aeabi_uldivmod>
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	4613      	mov	r3, r2
 8007258:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007260:	d308      	bcc.n	8007274 <UART_SetConfig+0x280>
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007268:	d204      	bcs.n	8007274 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	60da      	str	r2, [r3, #12]
 8007272:	e0bb      	b.n	80073ec <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	76bb      	strb	r3, [r7, #26]
 8007278:	e0b8      	b.n	80073ec <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007282:	d167      	bne.n	8007354 <UART_SetConfig+0x360>
  {
    switch (clocksource)
 8007284:	7efb      	ldrb	r3, [r7, #27]
 8007286:	2b08      	cmp	r3, #8
 8007288:	d834      	bhi.n	80072f4 <UART_SetConfig+0x300>
 800728a:	a201      	add	r2, pc, #4	; (adr r2, 8007290 <UART_SetConfig+0x29c>)
 800728c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007290:	080072b5 	.word	0x080072b5
 8007294:	080072bd 	.word	0x080072bd
 8007298:	080072c5 	.word	0x080072c5
 800729c:	080072f5 	.word	0x080072f5
 80072a0:	080072cb 	.word	0x080072cb
 80072a4:	080072f5 	.word	0x080072f5
 80072a8:	080072f5 	.word	0x080072f5
 80072ac:	080072f5 	.word	0x080072f5
 80072b0:	080072d3 	.word	0x080072d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072b4:	f7fd fef6 	bl	80050a4 <HAL_RCC_GetPCLK1Freq>
 80072b8:	6178      	str	r0, [r7, #20]
        break;
 80072ba:	e020      	b.n	80072fe <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072bc:	f7fd ff08 	bl	80050d0 <HAL_RCC_GetPCLK2Freq>
 80072c0:	6178      	str	r0, [r7, #20]
        break;
 80072c2:	e01c      	b.n	80072fe <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072c4:	4b0a      	ldr	r3, [pc, #40]	; (80072f0 <UART_SetConfig+0x2fc>)
 80072c6:	617b      	str	r3, [r7, #20]
        break;
 80072c8:	e019      	b.n	80072fe <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ca:	f7fd fe53 	bl	8004f74 <HAL_RCC_GetSysClockFreq>
 80072ce:	6178      	str	r0, [r7, #20]
        break;
 80072d0:	e015      	b.n	80072fe <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072d6:	617b      	str	r3, [r7, #20]
        break;
 80072d8:	e011      	b.n	80072fe <UART_SetConfig+0x30a>
 80072da:	bf00      	nop
 80072dc:	efff69f3 	.word	0xefff69f3
 80072e0:	40008000 	.word	0x40008000
 80072e4:	40013800 	.word	0x40013800
 80072e8:	40021000 	.word	0x40021000
 80072ec:	40004400 	.word	0x40004400
 80072f0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	76bb      	strb	r3, [r7, #26]
        break;
 80072fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d073      	beq.n	80073ec <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	005a      	lsls	r2, r3, #1
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	085b      	lsrs	r3, r3, #1
 800730e:	441a      	add	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	fbb2 f3f3 	udiv	r3, r2, r3
 8007318:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	2b0f      	cmp	r3, #15
 800731e:	d916      	bls.n	800734e <UART_SetConfig+0x35a>
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007326:	d212      	bcs.n	800734e <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	b29b      	uxth	r3, r3
 800732c:	f023 030f 	bic.w	r3, r3, #15
 8007330:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	085b      	lsrs	r3, r3, #1
 8007336:	b29b      	uxth	r3, r3
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	b29a      	uxth	r2, r3
 800733e:	89fb      	ldrh	r3, [r7, #14]
 8007340:	4313      	orrs	r3, r2
 8007342:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	89fa      	ldrh	r2, [r7, #14]
 800734a:	60da      	str	r2, [r3, #12]
 800734c:	e04e      	b.n	80073ec <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	76bb      	strb	r3, [r7, #26]
 8007352:	e04b      	b.n	80073ec <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007354:	7efb      	ldrb	r3, [r7, #27]
 8007356:	2b08      	cmp	r3, #8
 8007358:	d827      	bhi.n	80073aa <UART_SetConfig+0x3b6>
 800735a:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <UART_SetConfig+0x36c>)
 800735c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007360:	08007385 	.word	0x08007385
 8007364:	0800738d 	.word	0x0800738d
 8007368:	08007395 	.word	0x08007395
 800736c:	080073ab 	.word	0x080073ab
 8007370:	0800739b 	.word	0x0800739b
 8007374:	080073ab 	.word	0x080073ab
 8007378:	080073ab 	.word	0x080073ab
 800737c:	080073ab 	.word	0x080073ab
 8007380:	080073a3 	.word	0x080073a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007384:	f7fd fe8e 	bl	80050a4 <HAL_RCC_GetPCLK1Freq>
 8007388:	6178      	str	r0, [r7, #20]
        break;
 800738a:	e013      	b.n	80073b4 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800738c:	f7fd fea0 	bl	80050d0 <HAL_RCC_GetPCLK2Freq>
 8007390:	6178      	str	r0, [r7, #20]
        break;
 8007392:	e00f      	b.n	80073b4 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007394:	4b1b      	ldr	r3, [pc, #108]	; (8007404 <UART_SetConfig+0x410>)
 8007396:	617b      	str	r3, [r7, #20]
        break;
 8007398:	e00c      	b.n	80073b4 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800739a:	f7fd fdeb 	bl	8004f74 <HAL_RCC_GetSysClockFreq>
 800739e:	6178      	str	r0, [r7, #20]
        break;
 80073a0:	e008      	b.n	80073b4 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073a6:	617b      	str	r3, [r7, #20]
        break;
 80073a8:	e004      	b.n	80073b4 <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	76bb      	strb	r3, [r7, #26]
        break;
 80073b2:	bf00      	nop
    }

    if (pclk != 0U)
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d018      	beq.n	80073ec <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	085a      	lsrs	r2, r3, #1
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	441a      	add	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073cc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2b0f      	cmp	r3, #15
 80073d2:	d909      	bls.n	80073e8 <UART_SetConfig+0x3f4>
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073da:	d205      	bcs.n	80073e8 <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	b29a      	uxth	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	60da      	str	r2, [r3, #12]
 80073e6:	e001      	b.n	80073ec <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80073f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3720      	adds	r7, #32
 80073fe:	46bd      	mov	sp, r7
 8007400:	bdb0      	pop	{r4, r5, r7, pc}
 8007402:	bf00      	nop
 8007404:	00f42400 	.word	0x00f42400

08007408 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00a      	beq.n	8007432 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	f003 0302 	and.w	r3, r3, #2
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	430a      	orrs	r2, r1
 8007452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00a      	beq.n	8007476 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747a:	f003 0308 	and.w	r3, r3, #8
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00a      	beq.n	8007498 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	f003 0310 	and.w	r3, r3, #16
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00a      	beq.n	80074ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	f003 0320 	and.w	r3, r3, #32
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	430a      	orrs	r2, r1
 80074da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d01a      	beq.n	800751e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007506:	d10a      	bne.n	800751e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	605a      	str	r2, [r3, #4]
  }
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af02      	add	r7, sp, #8
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800755c:	f7fb fa7c 	bl	8002a58 <HAL_GetTick>
 8007560:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0308 	and.w	r3, r3, #8
 800756c:	2b08      	cmp	r3, #8
 800756e:	d10e      	bne.n	800758e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007570:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f82d 	bl	80075de <UART_WaitOnFlagUntilTimeout>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e023      	b.n	80075d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0304 	and.w	r3, r3, #4
 8007598:	2b04      	cmp	r3, #4
 800759a:	d10e      	bne.n	80075ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800759c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f817 	bl	80075de <UART_WaitOnFlagUntilTimeout>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e00d      	b.n	80075d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2220      	movs	r2, #32
 80075be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b09c      	sub	sp, #112	; 0x70
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	60b9      	str	r1, [r7, #8]
 80075e8:	603b      	str	r3, [r7, #0]
 80075ea:	4613      	mov	r3, r2
 80075ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ee:	e0a5      	b.n	800773c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f6:	f000 80a1 	beq.w	800773c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075fa:	f7fb fa2d 	bl	8002a58 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007606:	429a      	cmp	r2, r3
 8007608:	d302      	bcc.n	8007610 <UART_WaitOnFlagUntilTimeout+0x32>
 800760a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800760c:	2b00      	cmp	r3, #0
 800760e:	d13e      	bne.n	800768e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800761e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007620:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007624:	667b      	str	r3, [r7, #100]	; 0x64
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800762e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007630:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007634:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800763c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e6      	bne.n	8007610 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3308      	adds	r3, #8
 8007648:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800764c:	e853 3f00 	ldrex	r3, [r3]
 8007650:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007654:	f023 0301 	bic.w	r3, r3, #1
 8007658:	663b      	str	r3, [r7, #96]	; 0x60
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3308      	adds	r3, #8
 8007660:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007662:	64ba      	str	r2, [r7, #72]	; 0x48
 8007664:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007666:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007668:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800766a:	e841 2300 	strex	r3, r2, [r1]
 800766e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1e5      	bne.n	8007642 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2220      	movs	r2, #32
 800767a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2220      	movs	r2, #32
 8007680:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e067      	b.n	800775e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0304 	and.w	r3, r3, #4
 8007698:	2b00      	cmp	r3, #0
 800769a:	d04f      	beq.n	800773c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076aa:	d147      	bne.n	800773c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076b4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076be:	e853 3f00 	ldrex	r3, [r3]
 80076c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	461a      	mov	r2, r3
 80076d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d4:	637b      	str	r3, [r7, #52]	; 0x34
 80076d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076dc:	e841 2300 	strex	r3, r2, [r1]
 80076e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e6      	bne.n	80076b6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3308      	adds	r3, #8
 80076ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	e853 3f00 	ldrex	r3, [r3]
 80076f6:	613b      	str	r3, [r7, #16]
   return(result);
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	f023 0301 	bic.w	r3, r3, #1
 80076fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3308      	adds	r3, #8
 8007706:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007708:	623a      	str	r2, [r7, #32]
 800770a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770c:	69f9      	ldr	r1, [r7, #28]
 800770e:	6a3a      	ldr	r2, [r7, #32]
 8007710:	e841 2300 	strex	r3, r2, [r1]
 8007714:	61bb      	str	r3, [r7, #24]
   return(result);
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e5      	bne.n	80076e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2220      	movs	r2, #32
 8007720:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2220      	movs	r2, #32
 8007726:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2220      	movs	r2, #32
 800772c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	e010      	b.n	800775e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	69da      	ldr	r2, [r3, #28]
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	4013      	ands	r3, r2
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	429a      	cmp	r2, r3
 800774a:	bf0c      	ite	eq
 800774c:	2301      	moveq	r3, #1
 800774e:	2300      	movne	r3, #0
 8007750:	b2db      	uxtb	r3, r3
 8007752:	461a      	mov	r2, r3
 8007754:	79fb      	ldrb	r3, [r7, #7]
 8007756:	429a      	cmp	r2, r3
 8007758:	f43f af4a 	beq.w	80075f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3770      	adds	r7, #112	; 0x70
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
	...

08007768 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007768:	b480      	push	{r7}
 800776a:	b097      	sub	sp, #92	; 0x5c
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	4613      	mov	r3, r2
 8007774:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	88fa      	ldrh	r2, [r7, #6]
 8007780:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	88fa      	ldrh	r2, [r7, #6]
 8007788:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800779a:	d10e      	bne.n	80077ba <UART_Start_Receive_IT+0x52>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d105      	bne.n	80077b0 <UART_Start_Receive_IT+0x48>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80077aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077ae:	e02d      	b.n	800780c <UART_Start_Receive_IT+0xa4>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	22ff      	movs	r2, #255	; 0xff
 80077b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077b8:	e028      	b.n	800780c <UART_Start_Receive_IT+0xa4>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10d      	bne.n	80077de <UART_Start_Receive_IT+0x76>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d104      	bne.n	80077d4 <UART_Start_Receive_IT+0x6c>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	22ff      	movs	r2, #255	; 0xff
 80077ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077d2:	e01b      	b.n	800780c <UART_Start_Receive_IT+0xa4>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	227f      	movs	r2, #127	; 0x7f
 80077d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077dc:	e016      	b.n	800780c <UART_Start_Receive_IT+0xa4>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077e6:	d10d      	bne.n	8007804 <UART_Start_Receive_IT+0x9c>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d104      	bne.n	80077fa <UART_Start_Receive_IT+0x92>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	227f      	movs	r2, #127	; 0x7f
 80077f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077f8:	e008      	b.n	800780c <UART_Start_Receive_IT+0xa4>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	223f      	movs	r2, #63	; 0x3f
 80077fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007802:	e003      	b.n	800780c <UART_Start_Receive_IT+0xa4>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2222      	movs	r2, #34	; 0x22
 8007818:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3308      	adds	r3, #8
 8007820:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800782a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782c:	f043 0301 	orr.w	r3, r3, #1
 8007830:	657b      	str	r3, [r7, #84]	; 0x54
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3308      	adds	r3, #8
 8007838:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800783a:	64ba      	str	r2, [r7, #72]	; 0x48
 800783c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e5      	bne.n	800781a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007856:	d107      	bne.n	8007868 <UART_Start_Receive_IT+0x100>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d103      	bne.n	8007868 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	4a24      	ldr	r2, [pc, #144]	; (80078f4 <UART_Start_Receive_IT+0x18c>)
 8007864:	665a      	str	r2, [r3, #100]	; 0x64
 8007866:	e002      	b.n	800786e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4a23      	ldr	r2, [pc, #140]	; (80078f8 <UART_Start_Receive_IT+0x190>)
 800786c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d019      	beq.n	80078b2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	461a      	mov	r2, r3
 800789a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800789c:	637b      	str	r3, [r7, #52]	; 0x34
 800789e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e6      	bne.n	800787e <UART_Start_Receive_IT+0x116>
 80078b0:	e018      	b.n	80078e4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	e853 3f00 	ldrex	r3, [r3]
 80078be:	613b      	str	r3, [r7, #16]
   return(result);
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	f043 0320 	orr.w	r3, r3, #32
 80078c6:	653b      	str	r3, [r7, #80]	; 0x50
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	461a      	mov	r2, r3
 80078ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078d0:	623b      	str	r3, [r7, #32]
 80078d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d4:	69f9      	ldr	r1, [r7, #28]
 80078d6:	6a3a      	ldr	r2, [r7, #32]
 80078d8:	e841 2300 	strex	r3, r2, [r1]
 80078dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1e6      	bne.n	80078b2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	375c      	adds	r7, #92	; 0x5c
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	08007ba3 	.word	0x08007ba3
 80078f8:	08007a43 	.word	0x08007a43

080078fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b095      	sub	sp, #84	; 0x54
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790c:	e853 3f00 	ldrex	r3, [r3]
 8007910:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007918:	64fb      	str	r3, [r7, #76]	; 0x4c
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007922:	643b      	str	r3, [r7, #64]	; 0x40
 8007924:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007926:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007928:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800792a:	e841 2300 	strex	r3, r2, [r1]
 800792e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1e6      	bne.n	8007904 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3308      	adds	r3, #8
 800793c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	61fb      	str	r3, [r7, #28]
   return(result);
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	f023 0301 	bic.w	r3, r3, #1
 800794c:	64bb      	str	r3, [r7, #72]	; 0x48
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3308      	adds	r3, #8
 8007954:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007958:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800795c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e5      	bne.n	8007936 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800796e:	2b01      	cmp	r3, #1
 8007970:	d118      	bne.n	80079a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f023 0310 	bic.w	r3, r3, #16
 8007986:	647b      	str	r3, [r7, #68]	; 0x44
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	461a      	mov	r2, r3
 800798e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007990:	61bb      	str	r3, [r7, #24]
 8007992:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	6979      	ldr	r1, [r7, #20]
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	e841 2300 	strex	r3, r2, [r1]
 800799c:	613b      	str	r3, [r7, #16]
   return(result);
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e6      	bne.n	8007972 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2220      	movs	r2, #32
 80079a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80079b6:	bf00      	nop
 80079b8:	3754      	adds	r7, #84	; 0x54
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f7fa fac1 	bl	8001f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079e6:	bf00      	nop
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b088      	sub	sp, #32
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	e853 3f00 	ldrex	r3, [r3]
 8007a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a0a:	61fb      	str	r3, [r7, #28]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	461a      	mov	r2, r3
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	61bb      	str	r3, [r7, #24]
 8007a16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6979      	ldr	r1, [r7, #20]
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	e841 2300 	strex	r3, r2, [r1]
 8007a20:	613b      	str	r3, [r7, #16]
   return(result);
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e6      	bne.n	80079f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff fac7 	bl	8006fc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a3a:	bf00      	nop
 8007a3c:	3720      	adds	r7, #32
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b096      	sub	sp, #88	; 0x58
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a50:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a58:	2b22      	cmp	r3, #34	; 0x22
 8007a5a:	f040 8094 	bne.w	8007b86 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a64:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a68:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007a6c:	b2d9      	uxtb	r1, r3
 8007a6e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a78:	400a      	ands	r2, r1
 8007a7a:	b2d2      	uxtb	r2, r2
 8007a7c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	3b01      	subs	r3, #1
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d179      	bne.n	8007b9a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aae:	e853 3f00 	ldrex	r3, [r3]
 8007ab2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aba:	653b      	str	r3, [r7, #80]	; 0x50
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ac6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007aca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007acc:	e841 2300 	strex	r3, r2, [r1]
 8007ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1e6      	bne.n	8007aa6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3308      	adds	r3, #8
 8007ade:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	e853 3f00 	ldrex	r3, [r3]
 8007ae6:	623b      	str	r3, [r7, #32]
   return(result);
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	f023 0301 	bic.w	r3, r3, #1
 8007aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3308      	adds	r3, #8
 8007af6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007af8:	633a      	str	r2, [r7, #48]	; 0x30
 8007afa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b00:	e841 2300 	strex	r3, r2, [r1]
 8007b04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e5      	bne.n	8007ad8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2220      	movs	r2, #32
 8007b10:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d12e      	bne.n	8007b7e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	e853 3f00 	ldrex	r3, [r3]
 8007b32:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0310 	bic.w	r3, r3, #16
 8007b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	461a      	mov	r2, r3
 8007b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b44:	61fb      	str	r3, [r7, #28]
 8007b46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b48:	69b9      	ldr	r1, [r7, #24]
 8007b4a:	69fa      	ldr	r2, [r7, #28]
 8007b4c:	e841 2300 	strex	r3, r2, [r1]
 8007b50:	617b      	str	r3, [r7, #20]
   return(result);
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1e6      	bne.n	8007b26 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	f003 0310 	and.w	r3, r3, #16
 8007b62:	2b10      	cmp	r3, #16
 8007b64:	d103      	bne.n	8007b6e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2210      	movs	r2, #16
 8007b6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f7ff fa30 	bl	8006fdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b7c:	e00d      	b.n	8007b9a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7fa f96c 	bl	8001e5c <HAL_UART_RxCpltCallback>
}
 8007b84:	e009      	b.n	8007b9a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	8b1b      	ldrh	r3, [r3, #24]
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f042 0208 	orr.w	r2, r2, #8
 8007b96:	b292      	uxth	r2, r2
 8007b98:	831a      	strh	r2, [r3, #24]
}
 8007b9a:	bf00      	nop
 8007b9c:	3758      	adds	r7, #88	; 0x58
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b096      	sub	sp, #88	; 0x58
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bb0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bb8:	2b22      	cmp	r3, #34	; 0x22
 8007bba:	f040 8094 	bne.w	8007ce6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007bc4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bcc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007bce:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007bd2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bdc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be2:	1c9a      	adds	r2, r3, #2
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d179      	bne.n	8007cfa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0e:	e853 3f00 	ldrex	r3, [r3]
 8007c12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	461a      	mov	r2, r3
 8007c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c24:	643b      	str	r3, [r7, #64]	; 0x40
 8007c26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c2c:	e841 2300 	strex	r3, r2, [r1]
 8007c30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e6      	bne.n	8007c06 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3308      	adds	r3, #8
 8007c3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	e853 3f00 	ldrex	r3, [r3]
 8007c46:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	f023 0301 	bic.w	r3, r3, #1
 8007c4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3308      	adds	r3, #8
 8007c56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c60:	e841 2300 	strex	r3, r2, [r1]
 8007c64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1e5      	bne.n	8007c38 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d12e      	bne.n	8007cde <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	e853 3f00 	ldrex	r3, [r3]
 8007c92:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	f023 0310 	bic.w	r3, r3, #16
 8007c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ca4:	61bb      	str	r3, [r7, #24]
 8007ca6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca8:	6979      	ldr	r1, [r7, #20]
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	e841 2300 	strex	r3, r2, [r1]
 8007cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1e6      	bne.n	8007c86 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	f003 0310 	and.w	r3, r3, #16
 8007cc2:	2b10      	cmp	r3, #16
 8007cc4:	d103      	bne.n	8007cce <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2210      	movs	r2, #16
 8007ccc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7ff f980 	bl	8006fdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cdc:	e00d      	b.n	8007cfa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7fa f8bc 	bl	8001e5c <HAL_UART_RxCpltCallback>
}
 8007ce4:	e009      	b.n	8007cfa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	8b1b      	ldrh	r3, [r3, #24]
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0208 	orr.w	r2, r2, #8
 8007cf6:	b292      	uxth	r2, r2
 8007cf8:	831a      	strh	r2, [r3, #24]
}
 8007cfa:	bf00      	nop
 8007cfc:	3758      	adds	r7, #88	; 0x58
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d0a:	bf00      	nop
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b085      	sub	sp, #20
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007d20:	2300      	movs	r3, #0
 8007d22:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007d24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d28:	2b84      	cmp	r3, #132	; 0x84
 8007d2a:	d005      	beq.n	8007d38 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007d2c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4413      	add	r3, r2
 8007d34:	3303      	adds	r3, #3
 8007d36:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007d38:	68fb      	ldr	r3, [r7, #12]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007d4a:	f000 fae5 	bl	8008318 <vTaskStartScheduler>
  
  return osOK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d56:	b089      	sub	sp, #36	; 0x24
 8007d58:	af04      	add	r7, sp, #16
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d020      	beq.n	8007da8 <osThreadCreate+0x54>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d01c      	beq.n	8007da8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685c      	ldr	r4, [r3, #4]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681d      	ldr	r5, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	691e      	ldr	r6, [r3, #16]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7ff ffc8 	bl	8007d16 <makeFreeRtosPriority>
 8007d86:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	695b      	ldr	r3, [r3, #20]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d90:	9202      	str	r2, [sp, #8]
 8007d92:	9301      	str	r3, [sp, #4]
 8007d94:	9100      	str	r1, [sp, #0]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	4632      	mov	r2, r6
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f000 f8f3 	bl	8007f88 <xTaskCreateStatic>
 8007da2:	4603      	mov	r3, r0
 8007da4:	60fb      	str	r3, [r7, #12]
 8007da6:	e01c      	b.n	8007de2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685c      	ldr	r4, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007db4:	b29e      	uxth	r6, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7ff ffaa 	bl	8007d16 <makeFreeRtosPriority>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	f107 030c 	add.w	r3, r7, #12
 8007dc8:	9301      	str	r3, [sp, #4]
 8007dca:	9200      	str	r2, [sp, #0]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	4632      	mov	r2, r6
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 f935 	bl	8008042 <xTaskCreate>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d001      	beq.n	8007de2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007dde:	2300      	movs	r3, #0
 8007de0:	e000      	b.n	8007de4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007de2:	68fb      	ldr	r3, [r7, #12]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007dec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a09      	ldr	r2, [pc, #36]	; (8007e1c <osDelay+0x30>)
 8007df8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfc:	089b      	lsrs	r3, r3, #2
 8007dfe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <osDelay+0x1e>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	e000      	b.n	8007e0c <osDelay+0x20>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 fa4f 	bl	80082b0 <vTaskDelay>
  
  return osOK;
 8007e12:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	aaaaaaab 	.word	0xaaaaaaab

08007e20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f103 0208 	add.w	r2, r3, #8
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f04f 32ff 	mov.w	r2, #4294967295
 8007e38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f103 0208 	add.w	r2, r3, #8
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f103 0208 	add.w	r2, r3, #8
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e6e:	bf00      	nop
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b085      	sub	sp, #20
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	601a      	str	r2, [r3, #0]
}
 8007eb6:	bf00      	nop
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b085      	sub	sp, #20
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed8:	d103      	bne.n	8007ee2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	e00c      	b.n	8007efc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	e002      	b.n	8007ef0 <vListInsert+0x2e>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d2f6      	bcs.n	8007eea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	1c5a      	adds	r2, r3, #1
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	601a      	str	r2, [r3, #0]
}
 8007f28:	bf00      	nop
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	6892      	ldr	r2, [r2, #8]
 8007f4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	6852      	ldr	r2, [r2, #4]
 8007f54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d103      	bne.n	8007f68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	1e5a      	subs	r2, r3, #1
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08e      	sub	sp, #56	; 0x38
 8007f8c:	af04      	add	r7, sp, #16
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
 8007f94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10a      	bne.n	8007fb2 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007fae:	bf00      	nop
 8007fb0:	e7fe      	b.n	8007fb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10a      	bne.n	8007fce <xTaskCreateStatic+0x46>
	__asm volatile
 8007fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	61fb      	str	r3, [r7, #28]
}
 8007fca:	bf00      	nop
 8007fcc:	e7fe      	b.n	8007fcc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007fce:	2354      	movs	r3, #84	; 0x54
 8007fd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	2b54      	cmp	r3, #84	; 0x54
 8007fd6:	d00a      	beq.n	8007fee <xTaskCreateStatic+0x66>
	__asm volatile
 8007fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	61bb      	str	r3, [r7, #24]
}
 8007fea:	bf00      	nop
 8007fec:	e7fe      	b.n	8007fec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007fee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d01e      	beq.n	8008034 <xTaskCreateStatic+0xac>
 8007ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d01b      	beq.n	8008034 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008004:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	2202      	movs	r2, #2
 800800a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800800e:	2300      	movs	r3, #0
 8008010:	9303      	str	r3, [sp, #12]
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	9302      	str	r3, [sp, #8]
 8008016:	f107 0314 	add.w	r3, r7, #20
 800801a:	9301      	str	r3, [sp, #4]
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	68b9      	ldr	r1, [r7, #8]
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 f850 	bl	80080cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800802c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800802e:	f000 f8d5 	bl	80081dc <prvAddNewTaskToReadyList>
 8008032:	e001      	b.n	8008038 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008034:	2300      	movs	r3, #0
 8008036:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008038:	697b      	ldr	r3, [r7, #20]
	}
 800803a:	4618      	mov	r0, r3
 800803c:	3728      	adds	r7, #40	; 0x28
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008042:	b580      	push	{r7, lr}
 8008044:	b08c      	sub	sp, #48	; 0x30
 8008046:	af04      	add	r7, sp, #16
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	60b9      	str	r1, [r7, #8]
 800804c:	603b      	str	r3, [r7, #0]
 800804e:	4613      	mov	r3, r2
 8008050:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008052:	88fb      	ldrh	r3, [r7, #6]
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4618      	mov	r0, r3
 8008058:	f000 fe6e 	bl	8008d38 <pvPortMalloc>
 800805c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00e      	beq.n	8008082 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008064:	2054      	movs	r0, #84	; 0x54
 8008066:	f000 fe67 	bl	8008d38 <pvPortMalloc>
 800806a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	631a      	str	r2, [r3, #48]	; 0x30
 8008078:	e005      	b.n	8008086 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800807a:	6978      	ldr	r0, [r7, #20]
 800807c:	f000 ff28 	bl	8008ed0 <vPortFree>
 8008080:	e001      	b.n	8008086 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008082:	2300      	movs	r3, #0
 8008084:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d017      	beq.n	80080bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008094:	88fa      	ldrh	r2, [r7, #6]
 8008096:	2300      	movs	r3, #0
 8008098:	9303      	str	r3, [sp, #12]
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	9302      	str	r3, [sp, #8]
 800809e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a0:	9301      	str	r3, [sp, #4]
 80080a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	68b9      	ldr	r1, [r7, #8]
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 f80e 	bl	80080cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080b0:	69f8      	ldr	r0, [r7, #28]
 80080b2:	f000 f893 	bl	80081dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080b6:	2301      	movs	r3, #1
 80080b8:	61bb      	str	r3, [r7, #24]
 80080ba:	e002      	b.n	80080c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80080bc:	f04f 33ff 	mov.w	r3, #4294967295
 80080c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80080c2:	69bb      	ldr	r3, [r7, #24]
	}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3720      	adds	r7, #32
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b088      	sub	sp, #32
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80080e4:	3b01      	subs	r3, #1
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	f023 0307 	bic.w	r3, r3, #7
 80080f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	f003 0307 	and.w	r3, r3, #7
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <prvInitialiseNewTask+0x48>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	617b      	str	r3, [r7, #20]
}
 8008110:	bf00      	nop
 8008112:	e7fe      	b.n	8008112 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d01f      	beq.n	800815a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800811a:	2300      	movs	r3, #0
 800811c:	61fb      	str	r3, [r7, #28]
 800811e:	e012      	b.n	8008146 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	4413      	add	r3, r2
 8008126:	7819      	ldrb	r1, [r3, #0]
 8008128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	4413      	add	r3, r2
 800812e:	3334      	adds	r3, #52	; 0x34
 8008130:	460a      	mov	r2, r1
 8008132:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	4413      	add	r3, r2
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d006      	beq.n	800814e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	3301      	adds	r3, #1
 8008144:	61fb      	str	r3, [r7, #28]
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	2b0f      	cmp	r3, #15
 800814a:	d9e9      	bls.n	8008120 <prvInitialiseNewTask+0x54>
 800814c:	e000      	b.n	8008150 <prvInitialiseNewTask+0x84>
			{
				break;
 800814e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008158:	e003      	b.n	8008162 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008164:	2b06      	cmp	r3, #6
 8008166:	d901      	bls.n	800816c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008168:	2306      	movs	r3, #6
 800816a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800816c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008170:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008176:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817a:	2200      	movs	r2, #0
 800817c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	3304      	adds	r3, #4
 8008182:	4618      	mov	r0, r3
 8008184:	f7ff fe6c 	bl	8007e60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818a:	3318      	adds	r3, #24
 800818c:	4618      	mov	r0, r3
 800818e:	f7ff fe67 	bl	8007e60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008196:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	f1c3 0207 	rsb	r2, r3, #7
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081aa:	2200      	movs	r2, #0
 80081ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	68f9      	ldr	r1, [r7, #12]
 80081ba:	69b8      	ldr	r0, [r7, #24]
 80081bc:	f000 fbaa 	bl	8008914 <pxPortInitialiseStack>
 80081c0:	4602      	mov	r2, r0
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80081c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d002      	beq.n	80081d2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80081cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081d2:	bf00      	nop
 80081d4:	3720      	adds	r7, #32
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081e4:	f000 fcc6 	bl	8008b74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081e8:	4b2a      	ldr	r3, [pc, #168]	; (8008294 <prvAddNewTaskToReadyList+0xb8>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	3301      	adds	r3, #1
 80081ee:	4a29      	ldr	r2, [pc, #164]	; (8008294 <prvAddNewTaskToReadyList+0xb8>)
 80081f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081f2:	4b29      	ldr	r3, [pc, #164]	; (8008298 <prvAddNewTaskToReadyList+0xbc>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d109      	bne.n	800820e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081fa:	4a27      	ldr	r2, [pc, #156]	; (8008298 <prvAddNewTaskToReadyList+0xbc>)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008200:	4b24      	ldr	r3, [pc, #144]	; (8008294 <prvAddNewTaskToReadyList+0xb8>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d110      	bne.n	800822a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008208:	f000 fabc 	bl	8008784 <prvInitialiseTaskLists>
 800820c:	e00d      	b.n	800822a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800820e:	4b23      	ldr	r3, [pc, #140]	; (800829c <prvAddNewTaskToReadyList+0xc0>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d109      	bne.n	800822a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008216:	4b20      	ldr	r3, [pc, #128]	; (8008298 <prvAddNewTaskToReadyList+0xbc>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	429a      	cmp	r2, r3
 8008222:	d802      	bhi.n	800822a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008224:	4a1c      	ldr	r2, [pc, #112]	; (8008298 <prvAddNewTaskToReadyList+0xbc>)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800822a:	4b1d      	ldr	r3, [pc, #116]	; (80082a0 <prvAddNewTaskToReadyList+0xc4>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3301      	adds	r3, #1
 8008230:	4a1b      	ldr	r2, [pc, #108]	; (80082a0 <prvAddNewTaskToReadyList+0xc4>)
 8008232:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008238:	2201      	movs	r2, #1
 800823a:	409a      	lsls	r2, r3
 800823c:	4b19      	ldr	r3, [pc, #100]	; (80082a4 <prvAddNewTaskToReadyList+0xc8>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4313      	orrs	r3, r2
 8008242:	4a18      	ldr	r2, [pc, #96]	; (80082a4 <prvAddNewTaskToReadyList+0xc8>)
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824a:	4613      	mov	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4a15      	ldr	r2, [pc, #84]	; (80082a8 <prvAddNewTaskToReadyList+0xcc>)
 8008254:	441a      	add	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	3304      	adds	r3, #4
 800825a:	4619      	mov	r1, r3
 800825c:	4610      	mov	r0, r2
 800825e:	f7ff fe0c 	bl	8007e7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008262:	f000 fcb7 	bl	8008bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008266:	4b0d      	ldr	r3, [pc, #52]	; (800829c <prvAddNewTaskToReadyList+0xc0>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00e      	beq.n	800828c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800826e:	4b0a      	ldr	r3, [pc, #40]	; (8008298 <prvAddNewTaskToReadyList+0xbc>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008278:	429a      	cmp	r2, r3
 800827a:	d207      	bcs.n	800828c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800827c:	4b0b      	ldr	r3, [pc, #44]	; (80082ac <prvAddNewTaskToReadyList+0xd0>)
 800827e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	200003fc 	.word	0x200003fc
 8008298:	20000314 	.word	0x20000314
 800829c:	20000408 	.word	0x20000408
 80082a0:	20000418 	.word	0x20000418
 80082a4:	20000404 	.word	0x20000404
 80082a8:	20000318 	.word	0x20000318
 80082ac:	e000ed04 	.word	0xe000ed04

080082b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80082b8:	2300      	movs	r3, #0
 80082ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d017      	beq.n	80082f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80082c2:	4b13      	ldr	r3, [pc, #76]	; (8008310 <vTaskDelay+0x60>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00a      	beq.n	80082e0 <vTaskDelay+0x30>
	__asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	60bb      	str	r3, [r7, #8]
}
 80082dc:	bf00      	nop
 80082de:	e7fe      	b.n	80082de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80082e0:	f000 f87a 	bl	80083d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082e4:	2100      	movs	r1, #0
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 faae 	bl	8008848 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082ec:	f000 f882 	bl	80083f4 <xTaskResumeAll>
 80082f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d107      	bne.n	8008308 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80082f8:	4b06      	ldr	r3, [pc, #24]	; (8008314 <vTaskDelay+0x64>)
 80082fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008308:	bf00      	nop
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	20000424 	.word	0x20000424
 8008314:	e000ed04 	.word	0xe000ed04

08008318 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	; 0x28
 800831c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800831e:	2300      	movs	r3, #0
 8008320:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008322:	2300      	movs	r3, #0
 8008324:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008326:	463a      	mov	r2, r7
 8008328:	1d39      	adds	r1, r7, #4
 800832a:	f107 0308 	add.w	r3, r7, #8
 800832e:	4618      	mov	r0, r3
 8008330:	f7f9 fa2c 	bl	800178c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	9202      	str	r2, [sp, #8]
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	2300      	movs	r3, #0
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	2300      	movs	r3, #0
 8008344:	460a      	mov	r2, r1
 8008346:	491e      	ldr	r1, [pc, #120]	; (80083c0 <vTaskStartScheduler+0xa8>)
 8008348:	481e      	ldr	r0, [pc, #120]	; (80083c4 <vTaskStartScheduler+0xac>)
 800834a:	f7ff fe1d 	bl	8007f88 <xTaskCreateStatic>
 800834e:	4603      	mov	r3, r0
 8008350:	4a1d      	ldr	r2, [pc, #116]	; (80083c8 <vTaskStartScheduler+0xb0>)
 8008352:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008354:	4b1c      	ldr	r3, [pc, #112]	; (80083c8 <vTaskStartScheduler+0xb0>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800835c:	2301      	movs	r3, #1
 800835e:	617b      	str	r3, [r7, #20]
 8008360:	e001      	b.n	8008366 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008362:	2300      	movs	r3, #0
 8008364:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d116      	bne.n	800839a <vTaskStartScheduler+0x82>
	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	613b      	str	r3, [r7, #16]
}
 800837e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008380:	4b12      	ldr	r3, [pc, #72]	; (80083cc <vTaskStartScheduler+0xb4>)
 8008382:	f04f 32ff 	mov.w	r2, #4294967295
 8008386:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008388:	4b11      	ldr	r3, [pc, #68]	; (80083d0 <vTaskStartScheduler+0xb8>)
 800838a:	2201      	movs	r2, #1
 800838c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800838e:	4b11      	ldr	r3, [pc, #68]	; (80083d4 <vTaskStartScheduler+0xbc>)
 8008390:	2200      	movs	r2, #0
 8008392:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008394:	f000 fb4c 	bl	8008a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008398:	e00e      	b.n	80083b8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a0:	d10a      	bne.n	80083b8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80083a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	60fb      	str	r3, [r7, #12]
}
 80083b4:	bf00      	nop
 80083b6:	e7fe      	b.n	80083b6 <vTaskStartScheduler+0x9e>
}
 80083b8:	bf00      	nop
 80083ba:	3718      	adds	r7, #24
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	0800a1e8 	.word	0x0800a1e8
 80083c4:	08008755 	.word	0x08008755
 80083c8:	20000420 	.word	0x20000420
 80083cc:	2000041c 	.word	0x2000041c
 80083d0:	20000408 	.word	0x20000408
 80083d4:	20000400 	.word	0x20000400

080083d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083d8:	b480      	push	{r7}
 80083da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80083dc:	4b04      	ldr	r3, [pc, #16]	; (80083f0 <vTaskSuspendAll+0x18>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3301      	adds	r3, #1
 80083e2:	4a03      	ldr	r2, [pc, #12]	; (80083f0 <vTaskSuspendAll+0x18>)
 80083e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083e6:	bf00      	nop
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	20000424 	.word	0x20000424

080083f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083fa:	2300      	movs	r3, #0
 80083fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083fe:	2300      	movs	r3, #0
 8008400:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008402:	4b41      	ldr	r3, [pc, #260]	; (8008508 <xTaskResumeAll+0x114>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10a      	bne.n	8008420 <xTaskResumeAll+0x2c>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	603b      	str	r3, [r7, #0]
}
 800841c:	bf00      	nop
 800841e:	e7fe      	b.n	800841e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008420:	f000 fba8 	bl	8008b74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008424:	4b38      	ldr	r3, [pc, #224]	; (8008508 <xTaskResumeAll+0x114>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3b01      	subs	r3, #1
 800842a:	4a37      	ldr	r2, [pc, #220]	; (8008508 <xTaskResumeAll+0x114>)
 800842c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800842e:	4b36      	ldr	r3, [pc, #216]	; (8008508 <xTaskResumeAll+0x114>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d161      	bne.n	80084fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008436:	4b35      	ldr	r3, [pc, #212]	; (800850c <xTaskResumeAll+0x118>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d05d      	beq.n	80084fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800843e:	e02e      	b.n	800849e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008440:	4b33      	ldr	r3, [pc, #204]	; (8008510 <xTaskResumeAll+0x11c>)
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3318      	adds	r3, #24
 800844c:	4618      	mov	r0, r3
 800844e:	f7ff fd71 	bl	8007f34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	3304      	adds	r3, #4
 8008456:	4618      	mov	r0, r3
 8008458:	f7ff fd6c 	bl	8007f34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008460:	2201      	movs	r2, #1
 8008462:	409a      	lsls	r2, r3
 8008464:	4b2b      	ldr	r3, [pc, #172]	; (8008514 <xTaskResumeAll+0x120>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4313      	orrs	r3, r2
 800846a:	4a2a      	ldr	r2, [pc, #168]	; (8008514 <xTaskResumeAll+0x120>)
 800846c:	6013      	str	r3, [r2, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008472:	4613      	mov	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4a27      	ldr	r2, [pc, #156]	; (8008518 <xTaskResumeAll+0x124>)
 800847c:	441a      	add	r2, r3
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3304      	adds	r3, #4
 8008482:	4619      	mov	r1, r3
 8008484:	4610      	mov	r0, r2
 8008486:	f7ff fcf8 	bl	8007e7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800848e:	4b23      	ldr	r3, [pc, #140]	; (800851c <xTaskResumeAll+0x128>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008494:	429a      	cmp	r2, r3
 8008496:	d302      	bcc.n	800849e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008498:	4b21      	ldr	r3, [pc, #132]	; (8008520 <xTaskResumeAll+0x12c>)
 800849a:	2201      	movs	r2, #1
 800849c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800849e:	4b1c      	ldr	r3, [pc, #112]	; (8008510 <xTaskResumeAll+0x11c>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1cc      	bne.n	8008440 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80084ac:	f000 f9ac 	bl	8008808 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80084b0:	4b1c      	ldr	r3, [pc, #112]	; (8008524 <xTaskResumeAll+0x130>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d010      	beq.n	80084de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084bc:	f000 f836 	bl	800852c <xTaskIncrementTick>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80084c6:	4b16      	ldr	r3, [pc, #88]	; (8008520 <xTaskResumeAll+0x12c>)
 80084c8:	2201      	movs	r2, #1
 80084ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1f1      	bne.n	80084bc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80084d8:	4b12      	ldr	r3, [pc, #72]	; (8008524 <xTaskResumeAll+0x130>)
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084de:	4b10      	ldr	r3, [pc, #64]	; (8008520 <xTaskResumeAll+0x12c>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d009      	beq.n	80084fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084e6:	2301      	movs	r3, #1
 80084e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084ea:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <xTaskResumeAll+0x134>)
 80084ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f0:	601a      	str	r2, [r3, #0]
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084fa:	f000 fb6b 	bl	8008bd4 <vPortExitCritical>

	return xAlreadyYielded;
 80084fe:	68bb      	ldr	r3, [r7, #8]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	20000424 	.word	0x20000424
 800850c:	200003fc 	.word	0x200003fc
 8008510:	200003d4 	.word	0x200003d4
 8008514:	20000404 	.word	0x20000404
 8008518:	20000318 	.word	0x20000318
 800851c:	20000314 	.word	0x20000314
 8008520:	20000410 	.word	0x20000410
 8008524:	2000040c 	.word	0x2000040c
 8008528:	e000ed04 	.word	0xe000ed04

0800852c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008532:	2300      	movs	r3, #0
 8008534:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008536:	4b4e      	ldr	r3, [pc, #312]	; (8008670 <xTaskIncrementTick+0x144>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	f040 808e 	bne.w	800865c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008540:	4b4c      	ldr	r3, [pc, #304]	; (8008674 <xTaskIncrementTick+0x148>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3301      	adds	r3, #1
 8008546:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008548:	4a4a      	ldr	r2, [pc, #296]	; (8008674 <xTaskIncrementTick+0x148>)
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d120      	bne.n	8008596 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008554:	4b48      	ldr	r3, [pc, #288]	; (8008678 <xTaskIncrementTick+0x14c>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00a      	beq.n	8008574 <xTaskIncrementTick+0x48>
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	603b      	str	r3, [r7, #0]
}
 8008570:	bf00      	nop
 8008572:	e7fe      	b.n	8008572 <xTaskIncrementTick+0x46>
 8008574:	4b40      	ldr	r3, [pc, #256]	; (8008678 <xTaskIncrementTick+0x14c>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	60fb      	str	r3, [r7, #12]
 800857a:	4b40      	ldr	r3, [pc, #256]	; (800867c <xTaskIncrementTick+0x150>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a3e      	ldr	r2, [pc, #248]	; (8008678 <xTaskIncrementTick+0x14c>)
 8008580:	6013      	str	r3, [r2, #0]
 8008582:	4a3e      	ldr	r2, [pc, #248]	; (800867c <xTaskIncrementTick+0x150>)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	4b3d      	ldr	r3, [pc, #244]	; (8008680 <xTaskIncrementTick+0x154>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3301      	adds	r3, #1
 800858e:	4a3c      	ldr	r2, [pc, #240]	; (8008680 <xTaskIncrementTick+0x154>)
 8008590:	6013      	str	r3, [r2, #0]
 8008592:	f000 f939 	bl	8008808 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008596:	4b3b      	ldr	r3, [pc, #236]	; (8008684 <xTaskIncrementTick+0x158>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	429a      	cmp	r2, r3
 800859e:	d348      	bcc.n	8008632 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085a0:	4b35      	ldr	r3, [pc, #212]	; (8008678 <xTaskIncrementTick+0x14c>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d104      	bne.n	80085b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085aa:	4b36      	ldr	r3, [pc, #216]	; (8008684 <xTaskIncrementTick+0x158>)
 80085ac:	f04f 32ff 	mov.w	r2, #4294967295
 80085b0:	601a      	str	r2, [r3, #0]
					break;
 80085b2:	e03e      	b.n	8008632 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085b4:	4b30      	ldr	r3, [pc, #192]	; (8008678 <xTaskIncrementTick+0x14c>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d203      	bcs.n	80085d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085cc:	4a2d      	ldr	r2, [pc, #180]	; (8008684 <xTaskIncrementTick+0x158>)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085d2:	e02e      	b.n	8008632 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	3304      	adds	r3, #4
 80085d8:	4618      	mov	r0, r3
 80085da:	f7ff fcab 	bl	8007f34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d004      	beq.n	80085f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	3318      	adds	r3, #24
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7ff fca2 	bl	8007f34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f4:	2201      	movs	r2, #1
 80085f6:	409a      	lsls	r2, r3
 80085f8:	4b23      	ldr	r3, [pc, #140]	; (8008688 <xTaskIncrementTick+0x15c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	4a22      	ldr	r2, [pc, #136]	; (8008688 <xTaskIncrementTick+0x15c>)
 8008600:	6013      	str	r3, [r2, #0]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008606:	4613      	mov	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4a1f      	ldr	r2, [pc, #124]	; (800868c <xTaskIncrementTick+0x160>)
 8008610:	441a      	add	r2, r3
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	3304      	adds	r3, #4
 8008616:	4619      	mov	r1, r3
 8008618:	4610      	mov	r0, r2
 800861a:	f7ff fc2e 	bl	8007e7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008622:	4b1b      	ldr	r3, [pc, #108]	; (8008690 <xTaskIncrementTick+0x164>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	429a      	cmp	r2, r3
 800862a:	d3b9      	bcc.n	80085a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800862c:	2301      	movs	r3, #1
 800862e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008630:	e7b6      	b.n	80085a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008632:	4b17      	ldr	r3, [pc, #92]	; (8008690 <xTaskIncrementTick+0x164>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008638:	4914      	ldr	r1, [pc, #80]	; (800868c <xTaskIncrementTick+0x160>)
 800863a:	4613      	mov	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	440b      	add	r3, r1
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d901      	bls.n	800864e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800864a:	2301      	movs	r3, #1
 800864c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800864e:	4b11      	ldr	r3, [pc, #68]	; (8008694 <xTaskIncrementTick+0x168>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d007      	beq.n	8008666 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008656:	2301      	movs	r3, #1
 8008658:	617b      	str	r3, [r7, #20]
 800865a:	e004      	b.n	8008666 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800865c:	4b0e      	ldr	r3, [pc, #56]	; (8008698 <xTaskIncrementTick+0x16c>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3301      	adds	r3, #1
 8008662:	4a0d      	ldr	r2, [pc, #52]	; (8008698 <xTaskIncrementTick+0x16c>)
 8008664:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008666:	697b      	ldr	r3, [r7, #20]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	20000424 	.word	0x20000424
 8008674:	20000400 	.word	0x20000400
 8008678:	200003cc 	.word	0x200003cc
 800867c:	200003d0 	.word	0x200003d0
 8008680:	20000414 	.word	0x20000414
 8008684:	2000041c 	.word	0x2000041c
 8008688:	20000404 	.word	0x20000404
 800868c:	20000318 	.word	0x20000318
 8008690:	20000314 	.word	0x20000314
 8008694:	20000410 	.word	0x20000410
 8008698:	2000040c 	.word	0x2000040c

0800869c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800869c:	b480      	push	{r7}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086a2:	4b27      	ldr	r3, [pc, #156]	; (8008740 <vTaskSwitchContext+0xa4>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d003      	beq.n	80086b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086aa:	4b26      	ldr	r3, [pc, #152]	; (8008744 <vTaskSwitchContext+0xa8>)
 80086ac:	2201      	movs	r2, #1
 80086ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086b0:	e03f      	b.n	8008732 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80086b2:	4b24      	ldr	r3, [pc, #144]	; (8008744 <vTaskSwitchContext+0xa8>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086b8:	4b23      	ldr	r3, [pc, #140]	; (8008748 <vTaskSwitchContext+0xac>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	fab3 f383 	clz	r3, r3
 80086c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80086c6:	7afb      	ldrb	r3, [r7, #11]
 80086c8:	f1c3 031f 	rsb	r3, r3, #31
 80086cc:	617b      	str	r3, [r7, #20]
 80086ce:	491f      	ldr	r1, [pc, #124]	; (800874c <vTaskSwitchContext+0xb0>)
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	4613      	mov	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	440b      	add	r3, r1
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10a      	bne.n	80086f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	607b      	str	r3, [r7, #4]
}
 80086f4:	bf00      	nop
 80086f6:	e7fe      	b.n	80086f6 <vTaskSwitchContext+0x5a>
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	4613      	mov	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4a12      	ldr	r2, [pc, #72]	; (800874c <vTaskSwitchContext+0xb0>)
 8008704:	4413      	add	r3, r2
 8008706:	613b      	str	r3, [r7, #16]
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	605a      	str	r2, [r3, #4]
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	3308      	adds	r3, #8
 800871a:	429a      	cmp	r2, r3
 800871c:	d104      	bne.n	8008728 <vTaskSwitchContext+0x8c>
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	605a      	str	r2, [r3, #4]
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	4a08      	ldr	r2, [pc, #32]	; (8008750 <vTaskSwitchContext+0xb4>)
 8008730:	6013      	str	r3, [r2, #0]
}
 8008732:	bf00      	nop
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	20000424 	.word	0x20000424
 8008744:	20000410 	.word	0x20000410
 8008748:	20000404 	.word	0x20000404
 800874c:	20000318 	.word	0x20000318
 8008750:	20000314 	.word	0x20000314

08008754 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800875c:	f000 f84c 	bl	80087f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008760:	4b06      	ldr	r3, [pc, #24]	; (800877c <prvIdleTask+0x28>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d9f9      	bls.n	800875c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008768:	4b05      	ldr	r3, [pc, #20]	; (8008780 <prvIdleTask+0x2c>)
 800876a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800876e:	601a      	str	r2, [r3, #0]
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008778:	e7f0      	b.n	800875c <prvIdleTask+0x8>
 800877a:	bf00      	nop
 800877c:	20000318 	.word	0x20000318
 8008780:	e000ed04 	.word	0xe000ed04

08008784 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800878a:	2300      	movs	r3, #0
 800878c:	607b      	str	r3, [r7, #4]
 800878e:	e00c      	b.n	80087aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	4613      	mov	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4a10      	ldr	r2, [pc, #64]	; (80087dc <prvInitialiseTaskLists+0x58>)
 800879c:	4413      	add	r3, r2
 800879e:	4618      	mov	r0, r3
 80087a0:	f7ff fb3e 	bl	8007e20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3301      	adds	r3, #1
 80087a8:	607b      	str	r3, [r7, #4]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b06      	cmp	r3, #6
 80087ae:	d9ef      	bls.n	8008790 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087b0:	480b      	ldr	r0, [pc, #44]	; (80087e0 <prvInitialiseTaskLists+0x5c>)
 80087b2:	f7ff fb35 	bl	8007e20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087b6:	480b      	ldr	r0, [pc, #44]	; (80087e4 <prvInitialiseTaskLists+0x60>)
 80087b8:	f7ff fb32 	bl	8007e20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087bc:	480a      	ldr	r0, [pc, #40]	; (80087e8 <prvInitialiseTaskLists+0x64>)
 80087be:	f7ff fb2f 	bl	8007e20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087c2:	480a      	ldr	r0, [pc, #40]	; (80087ec <prvInitialiseTaskLists+0x68>)
 80087c4:	f7ff fb2c 	bl	8007e20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087c8:	4b09      	ldr	r3, [pc, #36]	; (80087f0 <prvInitialiseTaskLists+0x6c>)
 80087ca:	4a05      	ldr	r2, [pc, #20]	; (80087e0 <prvInitialiseTaskLists+0x5c>)
 80087cc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087ce:	4b09      	ldr	r3, [pc, #36]	; (80087f4 <prvInitialiseTaskLists+0x70>)
 80087d0:	4a04      	ldr	r2, [pc, #16]	; (80087e4 <prvInitialiseTaskLists+0x60>)
 80087d2:	601a      	str	r2, [r3, #0]
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	20000318 	.word	0x20000318
 80087e0:	200003a4 	.word	0x200003a4
 80087e4:	200003b8 	.word	0x200003b8
 80087e8:	200003d4 	.word	0x200003d4
 80087ec:	200003e8 	.word	0x200003e8
 80087f0:	200003cc 	.word	0x200003cc
 80087f4:	200003d0 	.word	0x200003d0

080087f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087f8:	b480      	push	{r7}
 80087fa:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087fc:	bf00      	nop
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
	...

08008808 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800880e:	4b0c      	ldr	r3, [pc, #48]	; (8008840 <prvResetNextTaskUnblockTime+0x38>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d104      	bne.n	8008822 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008818:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <prvResetNextTaskUnblockTime+0x3c>)
 800881a:	f04f 32ff 	mov.w	r2, #4294967295
 800881e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008820:	e008      	b.n	8008834 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008822:	4b07      	ldr	r3, [pc, #28]	; (8008840 <prvResetNextTaskUnblockTime+0x38>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	4a04      	ldr	r2, [pc, #16]	; (8008844 <prvResetNextTaskUnblockTime+0x3c>)
 8008832:	6013      	str	r3, [r2, #0]
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	200003cc 	.word	0x200003cc
 8008844:	2000041c 	.word	0x2000041c

08008848 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008852:	4b29      	ldr	r3, [pc, #164]	; (80088f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008858:	4b28      	ldr	r3, [pc, #160]	; (80088fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3304      	adds	r3, #4
 800885e:	4618      	mov	r0, r3
 8008860:	f7ff fb68 	bl	8007f34 <uxListRemove>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10b      	bne.n	8008882 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800886a:	4b24      	ldr	r3, [pc, #144]	; (80088fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008870:	2201      	movs	r2, #1
 8008872:	fa02 f303 	lsl.w	r3, r2, r3
 8008876:	43da      	mvns	r2, r3
 8008878:	4b21      	ldr	r3, [pc, #132]	; (8008900 <prvAddCurrentTaskToDelayedList+0xb8>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4013      	ands	r3, r2
 800887e:	4a20      	ldr	r2, [pc, #128]	; (8008900 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008880:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008888:	d10a      	bne.n	80088a0 <prvAddCurrentTaskToDelayedList+0x58>
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d007      	beq.n	80088a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008890:	4b1a      	ldr	r3, [pc, #104]	; (80088fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3304      	adds	r3, #4
 8008896:	4619      	mov	r1, r3
 8008898:	481a      	ldr	r0, [pc, #104]	; (8008904 <prvAddCurrentTaskToDelayedList+0xbc>)
 800889a:	f7ff faee 	bl	8007e7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800889e:	e026      	b.n	80088ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4413      	add	r3, r2
 80088a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088a8:	4b14      	ldr	r3, [pc, #80]	; (80088fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d209      	bcs.n	80088cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088b8:	4b13      	ldr	r3, [pc, #76]	; (8008908 <prvAddCurrentTaskToDelayedList+0xc0>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3304      	adds	r3, #4
 80088c2:	4619      	mov	r1, r3
 80088c4:	4610      	mov	r0, r2
 80088c6:	f7ff fafc 	bl	8007ec2 <vListInsert>
}
 80088ca:	e010      	b.n	80088ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088cc:	4b0f      	ldr	r3, [pc, #60]	; (800890c <prvAddCurrentTaskToDelayedList+0xc4>)
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3304      	adds	r3, #4
 80088d6:	4619      	mov	r1, r3
 80088d8:	4610      	mov	r0, r2
 80088da:	f7ff faf2 	bl	8007ec2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088de:	4b0c      	ldr	r3, [pc, #48]	; (8008910 <prvAddCurrentTaskToDelayedList+0xc8>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d202      	bcs.n	80088ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80088e8:	4a09      	ldr	r2, [pc, #36]	; (8008910 <prvAddCurrentTaskToDelayedList+0xc8>)
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	6013      	str	r3, [r2, #0]
}
 80088ee:	bf00      	nop
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20000400 	.word	0x20000400
 80088fc:	20000314 	.word	0x20000314
 8008900:	20000404 	.word	0x20000404
 8008904:	200003e8 	.word	0x200003e8
 8008908:	200003d0 	.word	0x200003d0
 800890c:	200003cc 	.word	0x200003cc
 8008910:	2000041c 	.word	0x2000041c

08008914 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	3b04      	subs	r3, #4
 8008924:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800892c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3b04      	subs	r3, #4
 8008932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	f023 0201 	bic.w	r2, r3, #1
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3b04      	subs	r3, #4
 8008942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008944:	4a0c      	ldr	r2, [pc, #48]	; (8008978 <pxPortInitialiseStack+0x64>)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	3b14      	subs	r3, #20
 800894e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	3b04      	subs	r3, #4
 800895a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f06f 0202 	mvn.w	r2, #2
 8008962:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	3b20      	subs	r3, #32
 8008968:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800896a:	68fb      	ldr	r3, [r7, #12]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	0800897d 	.word	0x0800897d

0800897c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008982:	2300      	movs	r3, #0
 8008984:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008986:	4b12      	ldr	r3, [pc, #72]	; (80089d0 <prvTaskExitError+0x54>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800898e:	d00a      	beq.n	80089a6 <prvTaskExitError+0x2a>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	60fb      	str	r3, [r7, #12]
}
 80089a2:	bf00      	nop
 80089a4:	e7fe      	b.n	80089a4 <prvTaskExitError+0x28>
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	60bb      	str	r3, [r7, #8]
}
 80089b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089ba:	bf00      	nop
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0fc      	beq.n	80089bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089c2:	bf00      	nop
 80089c4:	bf00      	nop
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	20000030 	.word	0x20000030
	...

080089e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089e0:	4b07      	ldr	r3, [pc, #28]	; (8008a00 <pxCurrentTCBConst2>)
 80089e2:	6819      	ldr	r1, [r3, #0]
 80089e4:	6808      	ldr	r0, [r1, #0]
 80089e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ea:	f380 8809 	msr	PSP, r0
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f04f 0000 	mov.w	r0, #0
 80089f6:	f380 8811 	msr	BASEPRI, r0
 80089fa:	4770      	bx	lr
 80089fc:	f3af 8000 	nop.w

08008a00 <pxCurrentTCBConst2>:
 8008a00:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop

08008a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a08:	4808      	ldr	r0, [pc, #32]	; (8008a2c <prvPortStartFirstTask+0x24>)
 8008a0a:	6800      	ldr	r0, [r0, #0]
 8008a0c:	6800      	ldr	r0, [r0, #0]
 8008a0e:	f380 8808 	msr	MSP, r0
 8008a12:	f04f 0000 	mov.w	r0, #0
 8008a16:	f380 8814 	msr	CONTROL, r0
 8008a1a:	b662      	cpsie	i
 8008a1c:	b661      	cpsie	f
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	df00      	svc	0
 8008a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a2a:	bf00      	nop
 8008a2c:	e000ed08 	.word	0xe000ed08

08008a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a36:	4b46      	ldr	r3, [pc, #280]	; (8008b50 <xPortStartScheduler+0x120>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a46      	ldr	r2, [pc, #280]	; (8008b54 <xPortStartScheduler+0x124>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d10a      	bne.n	8008a56 <xPortStartScheduler+0x26>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	613b      	str	r3, [r7, #16]
}
 8008a52:	bf00      	nop
 8008a54:	e7fe      	b.n	8008a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a56:	4b3e      	ldr	r3, [pc, #248]	; (8008b50 <xPortStartScheduler+0x120>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a3f      	ldr	r2, [pc, #252]	; (8008b58 <xPortStartScheduler+0x128>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d10a      	bne.n	8008a76 <xPortStartScheduler+0x46>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	60fb      	str	r3, [r7, #12]
}
 8008a72:	bf00      	nop
 8008a74:	e7fe      	b.n	8008a74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a76:	4b39      	ldr	r3, [pc, #228]	; (8008b5c <xPortStartScheduler+0x12c>)
 8008a78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	22ff      	movs	r2, #255	; 0xff
 8008a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a90:	78fb      	ldrb	r3, [r7, #3]
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	4b31      	ldr	r3, [pc, #196]	; (8008b60 <xPortStartScheduler+0x130>)
 8008a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a9e:	4b31      	ldr	r3, [pc, #196]	; (8008b64 <xPortStartScheduler+0x134>)
 8008aa0:	2207      	movs	r2, #7
 8008aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aa4:	e009      	b.n	8008aba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008aa6:	4b2f      	ldr	r3, [pc, #188]	; (8008b64 <xPortStartScheduler+0x134>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	4a2d      	ldr	r2, [pc, #180]	; (8008b64 <xPortStartScheduler+0x134>)
 8008aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ab0:	78fb      	ldrb	r3, [r7, #3]
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aba:	78fb      	ldrb	r3, [r7, #3]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ac2:	2b80      	cmp	r3, #128	; 0x80
 8008ac4:	d0ef      	beq.n	8008aa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ac6:	4b27      	ldr	r3, [pc, #156]	; (8008b64 <xPortStartScheduler+0x134>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f1c3 0307 	rsb	r3, r3, #7
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d00a      	beq.n	8008ae8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	60bb      	str	r3, [r7, #8]
}
 8008ae4:	bf00      	nop
 8008ae6:	e7fe      	b.n	8008ae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ae8:	4b1e      	ldr	r3, [pc, #120]	; (8008b64 <xPortStartScheduler+0x134>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	021b      	lsls	r3, r3, #8
 8008aee:	4a1d      	ldr	r2, [pc, #116]	; (8008b64 <xPortStartScheduler+0x134>)
 8008af0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008af2:	4b1c      	ldr	r3, [pc, #112]	; (8008b64 <xPortStartScheduler+0x134>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008afa:	4a1a      	ldr	r2, [pc, #104]	; (8008b64 <xPortStartScheduler+0x134>)
 8008afc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b06:	4b18      	ldr	r3, [pc, #96]	; (8008b68 <xPortStartScheduler+0x138>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a17      	ldr	r2, [pc, #92]	; (8008b68 <xPortStartScheduler+0x138>)
 8008b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b12:	4b15      	ldr	r3, [pc, #84]	; (8008b68 <xPortStartScheduler+0x138>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a14      	ldr	r2, [pc, #80]	; (8008b68 <xPortStartScheduler+0x138>)
 8008b18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b1e:	f000 f8dd 	bl	8008cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b22:	4b12      	ldr	r3, [pc, #72]	; (8008b6c <xPortStartScheduler+0x13c>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b28:	f000 f8fc 	bl	8008d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b2c:	4b10      	ldr	r3, [pc, #64]	; (8008b70 <xPortStartScheduler+0x140>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a0f      	ldr	r2, [pc, #60]	; (8008b70 <xPortStartScheduler+0x140>)
 8008b32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b38:	f7ff ff66 	bl	8008a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b3c:	f7ff fdae 	bl	800869c <vTaskSwitchContext>
	prvTaskExitError();
 8008b40:	f7ff ff1c 	bl	800897c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3718      	adds	r7, #24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	e000ed00 	.word	0xe000ed00
 8008b54:	410fc271 	.word	0x410fc271
 8008b58:	410fc270 	.word	0x410fc270
 8008b5c:	e000e400 	.word	0xe000e400
 8008b60:	20000428 	.word	0x20000428
 8008b64:	2000042c 	.word	0x2000042c
 8008b68:	e000ed20 	.word	0xe000ed20
 8008b6c:	20000030 	.word	0x20000030
 8008b70:	e000ef34 	.word	0xe000ef34

08008b74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	607b      	str	r3, [r7, #4]
}
 8008b8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b8e:	4b0f      	ldr	r3, [pc, #60]	; (8008bcc <vPortEnterCritical+0x58>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	3301      	adds	r3, #1
 8008b94:	4a0d      	ldr	r2, [pc, #52]	; (8008bcc <vPortEnterCritical+0x58>)
 8008b96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b98:	4b0c      	ldr	r3, [pc, #48]	; (8008bcc <vPortEnterCritical+0x58>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d10f      	bne.n	8008bc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ba0:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <vPortEnterCritical+0x5c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	603b      	str	r3, [r7, #0]
}
 8008bbc:	bf00      	nop
 8008bbe:	e7fe      	b.n	8008bbe <vPortEnterCritical+0x4a>
	}
}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	20000030 	.word	0x20000030
 8008bd0:	e000ed04 	.word	0xe000ed04

08008bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bda:	4b12      	ldr	r3, [pc, #72]	; (8008c24 <vPortExitCritical+0x50>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10a      	bne.n	8008bf8 <vPortExitCritical+0x24>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	607b      	str	r3, [r7, #4]
}
 8008bf4:	bf00      	nop
 8008bf6:	e7fe      	b.n	8008bf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008bf8:	4b0a      	ldr	r3, [pc, #40]	; (8008c24 <vPortExitCritical+0x50>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	4a09      	ldr	r2, [pc, #36]	; (8008c24 <vPortExitCritical+0x50>)
 8008c00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c02:	4b08      	ldr	r3, [pc, #32]	; (8008c24 <vPortExitCritical+0x50>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d105      	bne.n	8008c16 <vPortExitCritical+0x42>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	20000030 	.word	0x20000030
	...

08008c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c30:	f3ef 8009 	mrs	r0, PSP
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	4b15      	ldr	r3, [pc, #84]	; (8008c90 <pxCurrentTCBConst>)
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	f01e 0f10 	tst.w	lr, #16
 8008c40:	bf08      	it	eq
 8008c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4a:	6010      	str	r0, [r2, #0]
 8008c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c54:	f380 8811 	msr	BASEPRI, r0
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f7ff fd1c 	bl	800869c <vTaskSwitchContext>
 8008c64:	f04f 0000 	mov.w	r0, #0
 8008c68:	f380 8811 	msr	BASEPRI, r0
 8008c6c:	bc09      	pop	{r0, r3}
 8008c6e:	6819      	ldr	r1, [r3, #0]
 8008c70:	6808      	ldr	r0, [r1, #0]
 8008c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c76:	f01e 0f10 	tst.w	lr, #16
 8008c7a:	bf08      	it	eq
 8008c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c80:	f380 8809 	msr	PSP, r0
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	f3af 8000 	nop.w

08008c90 <pxCurrentTCBConst>:
 8008c90:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop

08008c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	607b      	str	r3, [r7, #4]
}
 8008cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008cb2:	f7ff fc3b 	bl	800852c <xTaskIncrementTick>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cbc:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <SysTick_Handler+0x40>)
 8008cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	f383 8811 	msr	BASEPRI, r3
}
 8008cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	e000ed04 	.word	0xe000ed04

08008cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cdc:	b480      	push	{r7}
 8008cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ce0:	4b0b      	ldr	r3, [pc, #44]	; (8008d10 <vPortSetupTimerInterrupt+0x34>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ce6:	4b0b      	ldr	r3, [pc, #44]	; (8008d14 <vPortSetupTimerInterrupt+0x38>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cec:	4b0a      	ldr	r3, [pc, #40]	; (8008d18 <vPortSetupTimerInterrupt+0x3c>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a0a      	ldr	r2, [pc, #40]	; (8008d1c <vPortSetupTimerInterrupt+0x40>)
 8008cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8008cf6:	091b      	lsrs	r3, r3, #4
 8008cf8:	4a09      	ldr	r2, [pc, #36]	; (8008d20 <vPortSetupTimerInterrupt+0x44>)
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cfe:	4b04      	ldr	r3, [pc, #16]	; (8008d10 <vPortSetupTimerInterrupt+0x34>)
 8008d00:	2207      	movs	r2, #7
 8008d02:	601a      	str	r2, [r3, #0]
}
 8008d04:	bf00      	nop
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	e000e010 	.word	0xe000e010
 8008d14:	e000e018 	.word	0xe000e018
 8008d18:	20000004 	.word	0x20000004
 8008d1c:	1b4e81b5 	.word	0x1b4e81b5
 8008d20:	e000e014 	.word	0xe000e014

08008d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d34 <vPortEnableVFP+0x10>
 8008d28:	6801      	ldr	r1, [r0, #0]
 8008d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d2e:	6001      	str	r1, [r0, #0]
 8008d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d32:	bf00      	nop
 8008d34:	e000ed88 	.word	0xe000ed88

08008d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08a      	sub	sp, #40	; 0x28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d40:	2300      	movs	r3, #0
 8008d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d44:	f7ff fb48 	bl	80083d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d48:	4b5b      	ldr	r3, [pc, #364]	; (8008eb8 <pvPortMalloc+0x180>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d50:	f000 f920 	bl	8008f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d54:	4b59      	ldr	r3, [pc, #356]	; (8008ebc <pvPortMalloc+0x184>)
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f040 8093 	bne.w	8008e88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d01d      	beq.n	8008da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d68:	2208      	movs	r2, #8
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f003 0307 	and.w	r3, r3, #7
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d014      	beq.n	8008da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f023 0307 	bic.w	r3, r3, #7
 8008d80:	3308      	adds	r3, #8
 8008d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f003 0307 	and.w	r3, r3, #7
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00a      	beq.n	8008da4 <pvPortMalloc+0x6c>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	617b      	str	r3, [r7, #20]
}
 8008da0:	bf00      	nop
 8008da2:	e7fe      	b.n	8008da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d06e      	beq.n	8008e88 <pvPortMalloc+0x150>
 8008daa:	4b45      	ldr	r3, [pc, #276]	; (8008ec0 <pvPortMalloc+0x188>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d869      	bhi.n	8008e88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008db4:	4b43      	ldr	r3, [pc, #268]	; (8008ec4 <pvPortMalloc+0x18c>)
 8008db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008db8:	4b42      	ldr	r3, [pc, #264]	; (8008ec4 <pvPortMalloc+0x18c>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dbe:	e004      	b.n	8008dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d903      	bls.n	8008ddc <pvPortMalloc+0xa4>
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1f1      	bne.n	8008dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ddc:	4b36      	ldr	r3, [pc, #216]	; (8008eb8 <pvPortMalloc+0x180>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d050      	beq.n	8008e88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2208      	movs	r2, #8
 8008dec:	4413      	add	r3, r2
 8008dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	1ad2      	subs	r2, r2, r3
 8008e00:	2308      	movs	r3, #8
 8008e02:	005b      	lsls	r3, r3, #1
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d91f      	bls.n	8008e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	f003 0307 	and.w	r3, r3, #7
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00a      	beq.n	8008e30 <pvPortMalloc+0xf8>
	__asm volatile
 8008e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	613b      	str	r3, [r7, #16]
}
 8008e2c:	bf00      	nop
 8008e2e:	e7fe      	b.n	8008e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	1ad2      	subs	r2, r2, r3
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e42:	69b8      	ldr	r0, [r7, #24]
 8008e44:	f000 f908 	bl	8009058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e48:	4b1d      	ldr	r3, [pc, #116]	; (8008ec0 <pvPortMalloc+0x188>)
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	4a1b      	ldr	r2, [pc, #108]	; (8008ec0 <pvPortMalloc+0x188>)
 8008e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e56:	4b1a      	ldr	r3, [pc, #104]	; (8008ec0 <pvPortMalloc+0x188>)
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	4b1b      	ldr	r3, [pc, #108]	; (8008ec8 <pvPortMalloc+0x190>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d203      	bcs.n	8008e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e62:	4b17      	ldr	r3, [pc, #92]	; (8008ec0 <pvPortMalloc+0x188>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a18      	ldr	r2, [pc, #96]	; (8008ec8 <pvPortMalloc+0x190>)
 8008e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	4b13      	ldr	r3, [pc, #76]	; (8008ebc <pvPortMalloc+0x184>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	431a      	orrs	r2, r3
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e7e:	4b13      	ldr	r3, [pc, #76]	; (8008ecc <pvPortMalloc+0x194>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3301      	adds	r3, #1
 8008e84:	4a11      	ldr	r2, [pc, #68]	; (8008ecc <pvPortMalloc+0x194>)
 8008e86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e88:	f7ff fab4 	bl	80083f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	f003 0307 	and.w	r3, r3, #7
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00a      	beq.n	8008eac <pvPortMalloc+0x174>
	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	60fb      	str	r3, [r7, #12]
}
 8008ea8:	bf00      	nop
 8008eaa:	e7fe      	b.n	8008eaa <pvPortMalloc+0x172>
	return pvReturn;
 8008eac:	69fb      	ldr	r3, [r7, #28]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3728      	adds	r7, #40	; 0x28
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	20000ff0 	.word	0x20000ff0
 8008ebc:	20001004 	.word	0x20001004
 8008ec0:	20000ff4 	.word	0x20000ff4
 8008ec4:	20000fe8 	.word	0x20000fe8
 8008ec8:	20000ff8 	.word	0x20000ff8
 8008ecc:	20000ffc 	.word	0x20000ffc

08008ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d04d      	beq.n	8008f7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ee2:	2308      	movs	r3, #8
 8008ee4:	425b      	negs	r3, r3
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	4413      	add	r3, r2
 8008eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	685a      	ldr	r2, [r3, #4]
 8008ef4:	4b24      	ldr	r3, [pc, #144]	; (8008f88 <vPortFree+0xb8>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4013      	ands	r3, r2
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d10a      	bne.n	8008f14 <vPortFree+0x44>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	60fb      	str	r3, [r7, #12]
}
 8008f10:	bf00      	nop
 8008f12:	e7fe      	b.n	8008f12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00a      	beq.n	8008f32 <vPortFree+0x62>
	__asm volatile
 8008f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	60bb      	str	r3, [r7, #8]
}
 8008f2e:	bf00      	nop
 8008f30:	e7fe      	b.n	8008f30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	685a      	ldr	r2, [r3, #4]
 8008f36:	4b14      	ldr	r3, [pc, #80]	; (8008f88 <vPortFree+0xb8>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d01e      	beq.n	8008f7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d11a      	bne.n	8008f7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	4b0e      	ldr	r3, [pc, #56]	; (8008f88 <vPortFree+0xb8>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	43db      	mvns	r3, r3
 8008f52:	401a      	ands	r2, r3
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f58:	f7ff fa3e 	bl	80083d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	685a      	ldr	r2, [r3, #4]
 8008f60:	4b0a      	ldr	r3, [pc, #40]	; (8008f8c <vPortFree+0xbc>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4413      	add	r3, r2
 8008f66:	4a09      	ldr	r2, [pc, #36]	; (8008f8c <vPortFree+0xbc>)
 8008f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f6a:	6938      	ldr	r0, [r7, #16]
 8008f6c:	f000 f874 	bl	8009058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f70:	4b07      	ldr	r3, [pc, #28]	; (8008f90 <vPortFree+0xc0>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3301      	adds	r3, #1
 8008f76:	4a06      	ldr	r2, [pc, #24]	; (8008f90 <vPortFree+0xc0>)
 8008f78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f7a:	f7ff fa3b 	bl	80083f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f7e:	bf00      	nop
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20001004 	.word	0x20001004
 8008f8c:	20000ff4 	.word	0x20000ff4
 8008f90:	20001000 	.word	0x20001000

08008f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008fa0:	4b27      	ldr	r3, [pc, #156]	; (8009040 <prvHeapInit+0xac>)
 8008fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f003 0307 	and.w	r3, r3, #7
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00c      	beq.n	8008fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3307      	adds	r3, #7
 8008fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f023 0307 	bic.w	r3, r3, #7
 8008fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	4a1f      	ldr	r2, [pc, #124]	; (8009040 <prvHeapInit+0xac>)
 8008fc4:	4413      	add	r3, r2
 8008fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fcc:	4a1d      	ldr	r2, [pc, #116]	; (8009044 <prvHeapInit+0xb0>)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008fd2:	4b1c      	ldr	r3, [pc, #112]	; (8009044 <prvHeapInit+0xb0>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	4413      	add	r3, r2
 8008fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fe0:	2208      	movs	r2, #8
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	1a9b      	subs	r3, r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f023 0307 	bic.w	r3, r3, #7
 8008fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	4a15      	ldr	r2, [pc, #84]	; (8009048 <prvHeapInit+0xb4>)
 8008ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ff6:	4b14      	ldr	r3, [pc, #80]	; (8009048 <prvHeapInit+0xb4>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ffe:	4b12      	ldr	r3, [pc, #72]	; (8009048 <prvHeapInit+0xb4>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2200      	movs	r2, #0
 8009004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	1ad2      	subs	r2, r2, r3
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009014:	4b0c      	ldr	r3, [pc, #48]	; (8009048 <prvHeapInit+0xb4>)
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	4a0a      	ldr	r2, [pc, #40]	; (800904c <prvHeapInit+0xb8>)
 8009022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	4a09      	ldr	r2, [pc, #36]	; (8009050 <prvHeapInit+0xbc>)
 800902a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800902c:	4b09      	ldr	r3, [pc, #36]	; (8009054 <prvHeapInit+0xc0>)
 800902e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009032:	601a      	str	r2, [r3, #0]
}
 8009034:	bf00      	nop
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr
 8009040:	20000430 	.word	0x20000430
 8009044:	20000fe8 	.word	0x20000fe8
 8009048:	20000ff0 	.word	0x20000ff0
 800904c:	20000ff8 	.word	0x20000ff8
 8009050:	20000ff4 	.word	0x20000ff4
 8009054:	20001004 	.word	0x20001004

08009058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009060:	4b28      	ldr	r3, [pc, #160]	; (8009104 <prvInsertBlockIntoFreeList+0xac>)
 8009062:	60fb      	str	r3, [r7, #12]
 8009064:	e002      	b.n	800906c <prvInsertBlockIntoFreeList+0x14>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	429a      	cmp	r2, r3
 8009074:	d8f7      	bhi.n	8009066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	4413      	add	r3, r2
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	429a      	cmp	r2, r3
 8009086:	d108      	bne.n	800909a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	685a      	ldr	r2, [r3, #4]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	441a      	add	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	441a      	add	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d118      	bne.n	80090e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	4b15      	ldr	r3, [pc, #84]	; (8009108 <prvInsertBlockIntoFreeList+0xb0>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d00d      	beq.n	80090d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685a      	ldr	r2, [r3, #4]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	441a      	add	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	601a      	str	r2, [r3, #0]
 80090d4:	e008      	b.n	80090e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090d6:	4b0c      	ldr	r3, [pc, #48]	; (8009108 <prvInsertBlockIntoFreeList+0xb0>)
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	601a      	str	r2, [r3, #0]
 80090de:	e003      	b.n	80090e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d002      	beq.n	80090f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090f6:	bf00      	nop
 80090f8:	3714      	adds	r7, #20
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	20000fe8 	.word	0x20000fe8
 8009108:	20000ff0 	.word	0x20000ff0

0800910c <__errno>:
 800910c:	4b01      	ldr	r3, [pc, #4]	; (8009114 <__errno+0x8>)
 800910e:	6818      	ldr	r0, [r3, #0]
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	20000034 	.word	0x20000034

08009118 <__libc_init_array>:
 8009118:	b570      	push	{r4, r5, r6, lr}
 800911a:	4d0d      	ldr	r5, [pc, #52]	; (8009150 <__libc_init_array+0x38>)
 800911c:	4c0d      	ldr	r4, [pc, #52]	; (8009154 <__libc_init_array+0x3c>)
 800911e:	1b64      	subs	r4, r4, r5
 8009120:	10a4      	asrs	r4, r4, #2
 8009122:	2600      	movs	r6, #0
 8009124:	42a6      	cmp	r6, r4
 8009126:	d109      	bne.n	800913c <__libc_init_array+0x24>
 8009128:	4d0b      	ldr	r5, [pc, #44]	; (8009158 <__libc_init_array+0x40>)
 800912a:	4c0c      	ldr	r4, [pc, #48]	; (800915c <__libc_init_array+0x44>)
 800912c:	f000 fffa 	bl	800a124 <_init>
 8009130:	1b64      	subs	r4, r4, r5
 8009132:	10a4      	asrs	r4, r4, #2
 8009134:	2600      	movs	r6, #0
 8009136:	42a6      	cmp	r6, r4
 8009138:	d105      	bne.n	8009146 <__libc_init_array+0x2e>
 800913a:	bd70      	pop	{r4, r5, r6, pc}
 800913c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009140:	4798      	blx	r3
 8009142:	3601      	adds	r6, #1
 8009144:	e7ee      	b.n	8009124 <__libc_init_array+0xc>
 8009146:	f855 3b04 	ldr.w	r3, [r5], #4
 800914a:	4798      	blx	r3
 800914c:	3601      	adds	r6, #1
 800914e:	e7f2      	b.n	8009136 <__libc_init_array+0x1e>
 8009150:	0800a2d8 	.word	0x0800a2d8
 8009154:	0800a2d8 	.word	0x0800a2d8
 8009158:	0800a2d8 	.word	0x0800a2d8
 800915c:	0800a2dc 	.word	0x0800a2dc

08009160 <memcpy>:
 8009160:	440a      	add	r2, r1
 8009162:	4291      	cmp	r1, r2
 8009164:	f100 33ff 	add.w	r3, r0, #4294967295
 8009168:	d100      	bne.n	800916c <memcpy+0xc>
 800916a:	4770      	bx	lr
 800916c:	b510      	push	{r4, lr}
 800916e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009172:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009176:	4291      	cmp	r1, r2
 8009178:	d1f9      	bne.n	800916e <memcpy+0xe>
 800917a:	bd10      	pop	{r4, pc}

0800917c <memset>:
 800917c:	4402      	add	r2, r0
 800917e:	4603      	mov	r3, r0
 8009180:	4293      	cmp	r3, r2
 8009182:	d100      	bne.n	8009186 <memset+0xa>
 8009184:	4770      	bx	lr
 8009186:	f803 1b01 	strb.w	r1, [r3], #1
 800918a:	e7f9      	b.n	8009180 <memset+0x4>

0800918c <iprintf>:
 800918c:	b40f      	push	{r0, r1, r2, r3}
 800918e:	4b0a      	ldr	r3, [pc, #40]	; (80091b8 <iprintf+0x2c>)
 8009190:	b513      	push	{r0, r1, r4, lr}
 8009192:	681c      	ldr	r4, [r3, #0]
 8009194:	b124      	cbz	r4, 80091a0 <iprintf+0x14>
 8009196:	69a3      	ldr	r3, [r4, #24]
 8009198:	b913      	cbnz	r3, 80091a0 <iprintf+0x14>
 800919a:	4620      	mov	r0, r4
 800919c:	f000 fa5e 	bl	800965c <__sinit>
 80091a0:	ab05      	add	r3, sp, #20
 80091a2:	9a04      	ldr	r2, [sp, #16]
 80091a4:	68a1      	ldr	r1, [r4, #8]
 80091a6:	9301      	str	r3, [sp, #4]
 80091a8:	4620      	mov	r0, r4
 80091aa:	f000 fc2f 	bl	8009a0c <_vfiprintf_r>
 80091ae:	b002      	add	sp, #8
 80091b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091b4:	b004      	add	sp, #16
 80091b6:	4770      	bx	lr
 80091b8:	20000034 	.word	0x20000034

080091bc <_puts_r>:
 80091bc:	b570      	push	{r4, r5, r6, lr}
 80091be:	460e      	mov	r6, r1
 80091c0:	4605      	mov	r5, r0
 80091c2:	b118      	cbz	r0, 80091cc <_puts_r+0x10>
 80091c4:	6983      	ldr	r3, [r0, #24]
 80091c6:	b90b      	cbnz	r3, 80091cc <_puts_r+0x10>
 80091c8:	f000 fa48 	bl	800965c <__sinit>
 80091cc:	69ab      	ldr	r3, [r5, #24]
 80091ce:	68ac      	ldr	r4, [r5, #8]
 80091d0:	b913      	cbnz	r3, 80091d8 <_puts_r+0x1c>
 80091d2:	4628      	mov	r0, r5
 80091d4:	f000 fa42 	bl	800965c <__sinit>
 80091d8:	4b2c      	ldr	r3, [pc, #176]	; (800928c <_puts_r+0xd0>)
 80091da:	429c      	cmp	r4, r3
 80091dc:	d120      	bne.n	8009220 <_puts_r+0x64>
 80091de:	686c      	ldr	r4, [r5, #4]
 80091e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091e2:	07db      	lsls	r3, r3, #31
 80091e4:	d405      	bmi.n	80091f2 <_puts_r+0x36>
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	0598      	lsls	r0, r3, #22
 80091ea:	d402      	bmi.n	80091f2 <_puts_r+0x36>
 80091ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091ee:	f000 fad3 	bl	8009798 <__retarget_lock_acquire_recursive>
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	0719      	lsls	r1, r3, #28
 80091f6:	d51d      	bpl.n	8009234 <_puts_r+0x78>
 80091f8:	6923      	ldr	r3, [r4, #16]
 80091fa:	b1db      	cbz	r3, 8009234 <_puts_r+0x78>
 80091fc:	3e01      	subs	r6, #1
 80091fe:	68a3      	ldr	r3, [r4, #8]
 8009200:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009204:	3b01      	subs	r3, #1
 8009206:	60a3      	str	r3, [r4, #8]
 8009208:	bb39      	cbnz	r1, 800925a <_puts_r+0x9e>
 800920a:	2b00      	cmp	r3, #0
 800920c:	da38      	bge.n	8009280 <_puts_r+0xc4>
 800920e:	4622      	mov	r2, r4
 8009210:	210a      	movs	r1, #10
 8009212:	4628      	mov	r0, r5
 8009214:	f000 f848 	bl	80092a8 <__swbuf_r>
 8009218:	3001      	adds	r0, #1
 800921a:	d011      	beq.n	8009240 <_puts_r+0x84>
 800921c:	250a      	movs	r5, #10
 800921e:	e011      	b.n	8009244 <_puts_r+0x88>
 8009220:	4b1b      	ldr	r3, [pc, #108]	; (8009290 <_puts_r+0xd4>)
 8009222:	429c      	cmp	r4, r3
 8009224:	d101      	bne.n	800922a <_puts_r+0x6e>
 8009226:	68ac      	ldr	r4, [r5, #8]
 8009228:	e7da      	b.n	80091e0 <_puts_r+0x24>
 800922a:	4b1a      	ldr	r3, [pc, #104]	; (8009294 <_puts_r+0xd8>)
 800922c:	429c      	cmp	r4, r3
 800922e:	bf08      	it	eq
 8009230:	68ec      	ldreq	r4, [r5, #12]
 8009232:	e7d5      	b.n	80091e0 <_puts_r+0x24>
 8009234:	4621      	mov	r1, r4
 8009236:	4628      	mov	r0, r5
 8009238:	f000 f888 	bl	800934c <__swsetup_r>
 800923c:	2800      	cmp	r0, #0
 800923e:	d0dd      	beq.n	80091fc <_puts_r+0x40>
 8009240:	f04f 35ff 	mov.w	r5, #4294967295
 8009244:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009246:	07da      	lsls	r2, r3, #31
 8009248:	d405      	bmi.n	8009256 <_puts_r+0x9a>
 800924a:	89a3      	ldrh	r3, [r4, #12]
 800924c:	059b      	lsls	r3, r3, #22
 800924e:	d402      	bmi.n	8009256 <_puts_r+0x9a>
 8009250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009252:	f000 faa2 	bl	800979a <__retarget_lock_release_recursive>
 8009256:	4628      	mov	r0, r5
 8009258:	bd70      	pop	{r4, r5, r6, pc}
 800925a:	2b00      	cmp	r3, #0
 800925c:	da04      	bge.n	8009268 <_puts_r+0xac>
 800925e:	69a2      	ldr	r2, [r4, #24]
 8009260:	429a      	cmp	r2, r3
 8009262:	dc06      	bgt.n	8009272 <_puts_r+0xb6>
 8009264:	290a      	cmp	r1, #10
 8009266:	d004      	beq.n	8009272 <_puts_r+0xb6>
 8009268:	6823      	ldr	r3, [r4, #0]
 800926a:	1c5a      	adds	r2, r3, #1
 800926c:	6022      	str	r2, [r4, #0]
 800926e:	7019      	strb	r1, [r3, #0]
 8009270:	e7c5      	b.n	80091fe <_puts_r+0x42>
 8009272:	4622      	mov	r2, r4
 8009274:	4628      	mov	r0, r5
 8009276:	f000 f817 	bl	80092a8 <__swbuf_r>
 800927a:	3001      	adds	r0, #1
 800927c:	d1bf      	bne.n	80091fe <_puts_r+0x42>
 800927e:	e7df      	b.n	8009240 <_puts_r+0x84>
 8009280:	6823      	ldr	r3, [r4, #0]
 8009282:	250a      	movs	r5, #10
 8009284:	1c5a      	adds	r2, r3, #1
 8009286:	6022      	str	r2, [r4, #0]
 8009288:	701d      	strb	r5, [r3, #0]
 800928a:	e7db      	b.n	8009244 <_puts_r+0x88>
 800928c:	0800a25c 	.word	0x0800a25c
 8009290:	0800a27c 	.word	0x0800a27c
 8009294:	0800a23c 	.word	0x0800a23c

08009298 <puts>:
 8009298:	4b02      	ldr	r3, [pc, #8]	; (80092a4 <puts+0xc>)
 800929a:	4601      	mov	r1, r0
 800929c:	6818      	ldr	r0, [r3, #0]
 800929e:	f7ff bf8d 	b.w	80091bc <_puts_r>
 80092a2:	bf00      	nop
 80092a4:	20000034 	.word	0x20000034

080092a8 <__swbuf_r>:
 80092a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092aa:	460e      	mov	r6, r1
 80092ac:	4614      	mov	r4, r2
 80092ae:	4605      	mov	r5, r0
 80092b0:	b118      	cbz	r0, 80092ba <__swbuf_r+0x12>
 80092b2:	6983      	ldr	r3, [r0, #24]
 80092b4:	b90b      	cbnz	r3, 80092ba <__swbuf_r+0x12>
 80092b6:	f000 f9d1 	bl	800965c <__sinit>
 80092ba:	4b21      	ldr	r3, [pc, #132]	; (8009340 <__swbuf_r+0x98>)
 80092bc:	429c      	cmp	r4, r3
 80092be:	d12b      	bne.n	8009318 <__swbuf_r+0x70>
 80092c0:	686c      	ldr	r4, [r5, #4]
 80092c2:	69a3      	ldr	r3, [r4, #24]
 80092c4:	60a3      	str	r3, [r4, #8]
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	071a      	lsls	r2, r3, #28
 80092ca:	d52f      	bpl.n	800932c <__swbuf_r+0x84>
 80092cc:	6923      	ldr	r3, [r4, #16]
 80092ce:	b36b      	cbz	r3, 800932c <__swbuf_r+0x84>
 80092d0:	6923      	ldr	r3, [r4, #16]
 80092d2:	6820      	ldr	r0, [r4, #0]
 80092d4:	1ac0      	subs	r0, r0, r3
 80092d6:	6963      	ldr	r3, [r4, #20]
 80092d8:	b2f6      	uxtb	r6, r6
 80092da:	4283      	cmp	r3, r0
 80092dc:	4637      	mov	r7, r6
 80092de:	dc04      	bgt.n	80092ea <__swbuf_r+0x42>
 80092e0:	4621      	mov	r1, r4
 80092e2:	4628      	mov	r0, r5
 80092e4:	f000 f926 	bl	8009534 <_fflush_r>
 80092e8:	bb30      	cbnz	r0, 8009338 <__swbuf_r+0x90>
 80092ea:	68a3      	ldr	r3, [r4, #8]
 80092ec:	3b01      	subs	r3, #1
 80092ee:	60a3      	str	r3, [r4, #8]
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	1c5a      	adds	r2, r3, #1
 80092f4:	6022      	str	r2, [r4, #0]
 80092f6:	701e      	strb	r6, [r3, #0]
 80092f8:	6963      	ldr	r3, [r4, #20]
 80092fa:	3001      	adds	r0, #1
 80092fc:	4283      	cmp	r3, r0
 80092fe:	d004      	beq.n	800930a <__swbuf_r+0x62>
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	07db      	lsls	r3, r3, #31
 8009304:	d506      	bpl.n	8009314 <__swbuf_r+0x6c>
 8009306:	2e0a      	cmp	r6, #10
 8009308:	d104      	bne.n	8009314 <__swbuf_r+0x6c>
 800930a:	4621      	mov	r1, r4
 800930c:	4628      	mov	r0, r5
 800930e:	f000 f911 	bl	8009534 <_fflush_r>
 8009312:	b988      	cbnz	r0, 8009338 <__swbuf_r+0x90>
 8009314:	4638      	mov	r0, r7
 8009316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009318:	4b0a      	ldr	r3, [pc, #40]	; (8009344 <__swbuf_r+0x9c>)
 800931a:	429c      	cmp	r4, r3
 800931c:	d101      	bne.n	8009322 <__swbuf_r+0x7a>
 800931e:	68ac      	ldr	r4, [r5, #8]
 8009320:	e7cf      	b.n	80092c2 <__swbuf_r+0x1a>
 8009322:	4b09      	ldr	r3, [pc, #36]	; (8009348 <__swbuf_r+0xa0>)
 8009324:	429c      	cmp	r4, r3
 8009326:	bf08      	it	eq
 8009328:	68ec      	ldreq	r4, [r5, #12]
 800932a:	e7ca      	b.n	80092c2 <__swbuf_r+0x1a>
 800932c:	4621      	mov	r1, r4
 800932e:	4628      	mov	r0, r5
 8009330:	f000 f80c 	bl	800934c <__swsetup_r>
 8009334:	2800      	cmp	r0, #0
 8009336:	d0cb      	beq.n	80092d0 <__swbuf_r+0x28>
 8009338:	f04f 37ff 	mov.w	r7, #4294967295
 800933c:	e7ea      	b.n	8009314 <__swbuf_r+0x6c>
 800933e:	bf00      	nop
 8009340:	0800a25c 	.word	0x0800a25c
 8009344:	0800a27c 	.word	0x0800a27c
 8009348:	0800a23c 	.word	0x0800a23c

0800934c <__swsetup_r>:
 800934c:	4b32      	ldr	r3, [pc, #200]	; (8009418 <__swsetup_r+0xcc>)
 800934e:	b570      	push	{r4, r5, r6, lr}
 8009350:	681d      	ldr	r5, [r3, #0]
 8009352:	4606      	mov	r6, r0
 8009354:	460c      	mov	r4, r1
 8009356:	b125      	cbz	r5, 8009362 <__swsetup_r+0x16>
 8009358:	69ab      	ldr	r3, [r5, #24]
 800935a:	b913      	cbnz	r3, 8009362 <__swsetup_r+0x16>
 800935c:	4628      	mov	r0, r5
 800935e:	f000 f97d 	bl	800965c <__sinit>
 8009362:	4b2e      	ldr	r3, [pc, #184]	; (800941c <__swsetup_r+0xd0>)
 8009364:	429c      	cmp	r4, r3
 8009366:	d10f      	bne.n	8009388 <__swsetup_r+0x3c>
 8009368:	686c      	ldr	r4, [r5, #4]
 800936a:	89a3      	ldrh	r3, [r4, #12]
 800936c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009370:	0719      	lsls	r1, r3, #28
 8009372:	d42c      	bmi.n	80093ce <__swsetup_r+0x82>
 8009374:	06dd      	lsls	r5, r3, #27
 8009376:	d411      	bmi.n	800939c <__swsetup_r+0x50>
 8009378:	2309      	movs	r3, #9
 800937a:	6033      	str	r3, [r6, #0]
 800937c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009380:	81a3      	strh	r3, [r4, #12]
 8009382:	f04f 30ff 	mov.w	r0, #4294967295
 8009386:	e03e      	b.n	8009406 <__swsetup_r+0xba>
 8009388:	4b25      	ldr	r3, [pc, #148]	; (8009420 <__swsetup_r+0xd4>)
 800938a:	429c      	cmp	r4, r3
 800938c:	d101      	bne.n	8009392 <__swsetup_r+0x46>
 800938e:	68ac      	ldr	r4, [r5, #8]
 8009390:	e7eb      	b.n	800936a <__swsetup_r+0x1e>
 8009392:	4b24      	ldr	r3, [pc, #144]	; (8009424 <__swsetup_r+0xd8>)
 8009394:	429c      	cmp	r4, r3
 8009396:	bf08      	it	eq
 8009398:	68ec      	ldreq	r4, [r5, #12]
 800939a:	e7e6      	b.n	800936a <__swsetup_r+0x1e>
 800939c:	0758      	lsls	r0, r3, #29
 800939e:	d512      	bpl.n	80093c6 <__swsetup_r+0x7a>
 80093a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093a2:	b141      	cbz	r1, 80093b6 <__swsetup_r+0x6a>
 80093a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093a8:	4299      	cmp	r1, r3
 80093aa:	d002      	beq.n	80093b2 <__swsetup_r+0x66>
 80093ac:	4630      	mov	r0, r6
 80093ae:	f000 fa59 	bl	8009864 <_free_r>
 80093b2:	2300      	movs	r3, #0
 80093b4:	6363      	str	r3, [r4, #52]	; 0x34
 80093b6:	89a3      	ldrh	r3, [r4, #12]
 80093b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093bc:	81a3      	strh	r3, [r4, #12]
 80093be:	2300      	movs	r3, #0
 80093c0:	6063      	str	r3, [r4, #4]
 80093c2:	6923      	ldr	r3, [r4, #16]
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	89a3      	ldrh	r3, [r4, #12]
 80093c8:	f043 0308 	orr.w	r3, r3, #8
 80093cc:	81a3      	strh	r3, [r4, #12]
 80093ce:	6923      	ldr	r3, [r4, #16]
 80093d0:	b94b      	cbnz	r3, 80093e6 <__swsetup_r+0x9a>
 80093d2:	89a3      	ldrh	r3, [r4, #12]
 80093d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093dc:	d003      	beq.n	80093e6 <__swsetup_r+0x9a>
 80093de:	4621      	mov	r1, r4
 80093e0:	4630      	mov	r0, r6
 80093e2:	f000 f9ff 	bl	80097e4 <__smakebuf_r>
 80093e6:	89a0      	ldrh	r0, [r4, #12]
 80093e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093ec:	f010 0301 	ands.w	r3, r0, #1
 80093f0:	d00a      	beq.n	8009408 <__swsetup_r+0xbc>
 80093f2:	2300      	movs	r3, #0
 80093f4:	60a3      	str	r3, [r4, #8]
 80093f6:	6963      	ldr	r3, [r4, #20]
 80093f8:	425b      	negs	r3, r3
 80093fa:	61a3      	str	r3, [r4, #24]
 80093fc:	6923      	ldr	r3, [r4, #16]
 80093fe:	b943      	cbnz	r3, 8009412 <__swsetup_r+0xc6>
 8009400:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009404:	d1ba      	bne.n	800937c <__swsetup_r+0x30>
 8009406:	bd70      	pop	{r4, r5, r6, pc}
 8009408:	0781      	lsls	r1, r0, #30
 800940a:	bf58      	it	pl
 800940c:	6963      	ldrpl	r3, [r4, #20]
 800940e:	60a3      	str	r3, [r4, #8]
 8009410:	e7f4      	b.n	80093fc <__swsetup_r+0xb0>
 8009412:	2000      	movs	r0, #0
 8009414:	e7f7      	b.n	8009406 <__swsetup_r+0xba>
 8009416:	bf00      	nop
 8009418:	20000034 	.word	0x20000034
 800941c:	0800a25c 	.word	0x0800a25c
 8009420:	0800a27c 	.word	0x0800a27c
 8009424:	0800a23c 	.word	0x0800a23c

08009428 <__sflush_r>:
 8009428:	898a      	ldrh	r2, [r1, #12]
 800942a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800942e:	4605      	mov	r5, r0
 8009430:	0710      	lsls	r0, r2, #28
 8009432:	460c      	mov	r4, r1
 8009434:	d458      	bmi.n	80094e8 <__sflush_r+0xc0>
 8009436:	684b      	ldr	r3, [r1, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	dc05      	bgt.n	8009448 <__sflush_r+0x20>
 800943c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800943e:	2b00      	cmp	r3, #0
 8009440:	dc02      	bgt.n	8009448 <__sflush_r+0x20>
 8009442:	2000      	movs	r0, #0
 8009444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800944a:	2e00      	cmp	r6, #0
 800944c:	d0f9      	beq.n	8009442 <__sflush_r+0x1a>
 800944e:	2300      	movs	r3, #0
 8009450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009454:	682f      	ldr	r7, [r5, #0]
 8009456:	602b      	str	r3, [r5, #0]
 8009458:	d032      	beq.n	80094c0 <__sflush_r+0x98>
 800945a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800945c:	89a3      	ldrh	r3, [r4, #12]
 800945e:	075a      	lsls	r2, r3, #29
 8009460:	d505      	bpl.n	800946e <__sflush_r+0x46>
 8009462:	6863      	ldr	r3, [r4, #4]
 8009464:	1ac0      	subs	r0, r0, r3
 8009466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009468:	b10b      	cbz	r3, 800946e <__sflush_r+0x46>
 800946a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800946c:	1ac0      	subs	r0, r0, r3
 800946e:	2300      	movs	r3, #0
 8009470:	4602      	mov	r2, r0
 8009472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009474:	6a21      	ldr	r1, [r4, #32]
 8009476:	4628      	mov	r0, r5
 8009478:	47b0      	blx	r6
 800947a:	1c43      	adds	r3, r0, #1
 800947c:	89a3      	ldrh	r3, [r4, #12]
 800947e:	d106      	bne.n	800948e <__sflush_r+0x66>
 8009480:	6829      	ldr	r1, [r5, #0]
 8009482:	291d      	cmp	r1, #29
 8009484:	d82c      	bhi.n	80094e0 <__sflush_r+0xb8>
 8009486:	4a2a      	ldr	r2, [pc, #168]	; (8009530 <__sflush_r+0x108>)
 8009488:	40ca      	lsrs	r2, r1
 800948a:	07d6      	lsls	r6, r2, #31
 800948c:	d528      	bpl.n	80094e0 <__sflush_r+0xb8>
 800948e:	2200      	movs	r2, #0
 8009490:	6062      	str	r2, [r4, #4]
 8009492:	04d9      	lsls	r1, r3, #19
 8009494:	6922      	ldr	r2, [r4, #16]
 8009496:	6022      	str	r2, [r4, #0]
 8009498:	d504      	bpl.n	80094a4 <__sflush_r+0x7c>
 800949a:	1c42      	adds	r2, r0, #1
 800949c:	d101      	bne.n	80094a2 <__sflush_r+0x7a>
 800949e:	682b      	ldr	r3, [r5, #0]
 80094a0:	b903      	cbnz	r3, 80094a4 <__sflush_r+0x7c>
 80094a2:	6560      	str	r0, [r4, #84]	; 0x54
 80094a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094a6:	602f      	str	r7, [r5, #0]
 80094a8:	2900      	cmp	r1, #0
 80094aa:	d0ca      	beq.n	8009442 <__sflush_r+0x1a>
 80094ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094b0:	4299      	cmp	r1, r3
 80094b2:	d002      	beq.n	80094ba <__sflush_r+0x92>
 80094b4:	4628      	mov	r0, r5
 80094b6:	f000 f9d5 	bl	8009864 <_free_r>
 80094ba:	2000      	movs	r0, #0
 80094bc:	6360      	str	r0, [r4, #52]	; 0x34
 80094be:	e7c1      	b.n	8009444 <__sflush_r+0x1c>
 80094c0:	6a21      	ldr	r1, [r4, #32]
 80094c2:	2301      	movs	r3, #1
 80094c4:	4628      	mov	r0, r5
 80094c6:	47b0      	blx	r6
 80094c8:	1c41      	adds	r1, r0, #1
 80094ca:	d1c7      	bne.n	800945c <__sflush_r+0x34>
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d0c4      	beq.n	800945c <__sflush_r+0x34>
 80094d2:	2b1d      	cmp	r3, #29
 80094d4:	d001      	beq.n	80094da <__sflush_r+0xb2>
 80094d6:	2b16      	cmp	r3, #22
 80094d8:	d101      	bne.n	80094de <__sflush_r+0xb6>
 80094da:	602f      	str	r7, [r5, #0]
 80094dc:	e7b1      	b.n	8009442 <__sflush_r+0x1a>
 80094de:	89a3      	ldrh	r3, [r4, #12]
 80094e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094e4:	81a3      	strh	r3, [r4, #12]
 80094e6:	e7ad      	b.n	8009444 <__sflush_r+0x1c>
 80094e8:	690f      	ldr	r7, [r1, #16]
 80094ea:	2f00      	cmp	r7, #0
 80094ec:	d0a9      	beq.n	8009442 <__sflush_r+0x1a>
 80094ee:	0793      	lsls	r3, r2, #30
 80094f0:	680e      	ldr	r6, [r1, #0]
 80094f2:	bf08      	it	eq
 80094f4:	694b      	ldreq	r3, [r1, #20]
 80094f6:	600f      	str	r7, [r1, #0]
 80094f8:	bf18      	it	ne
 80094fa:	2300      	movne	r3, #0
 80094fc:	eba6 0807 	sub.w	r8, r6, r7
 8009500:	608b      	str	r3, [r1, #8]
 8009502:	f1b8 0f00 	cmp.w	r8, #0
 8009506:	dd9c      	ble.n	8009442 <__sflush_r+0x1a>
 8009508:	6a21      	ldr	r1, [r4, #32]
 800950a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800950c:	4643      	mov	r3, r8
 800950e:	463a      	mov	r2, r7
 8009510:	4628      	mov	r0, r5
 8009512:	47b0      	blx	r6
 8009514:	2800      	cmp	r0, #0
 8009516:	dc06      	bgt.n	8009526 <__sflush_r+0xfe>
 8009518:	89a3      	ldrh	r3, [r4, #12]
 800951a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800951e:	81a3      	strh	r3, [r4, #12]
 8009520:	f04f 30ff 	mov.w	r0, #4294967295
 8009524:	e78e      	b.n	8009444 <__sflush_r+0x1c>
 8009526:	4407      	add	r7, r0
 8009528:	eba8 0800 	sub.w	r8, r8, r0
 800952c:	e7e9      	b.n	8009502 <__sflush_r+0xda>
 800952e:	bf00      	nop
 8009530:	20400001 	.word	0x20400001

08009534 <_fflush_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	690b      	ldr	r3, [r1, #16]
 8009538:	4605      	mov	r5, r0
 800953a:	460c      	mov	r4, r1
 800953c:	b913      	cbnz	r3, 8009544 <_fflush_r+0x10>
 800953e:	2500      	movs	r5, #0
 8009540:	4628      	mov	r0, r5
 8009542:	bd38      	pop	{r3, r4, r5, pc}
 8009544:	b118      	cbz	r0, 800954e <_fflush_r+0x1a>
 8009546:	6983      	ldr	r3, [r0, #24]
 8009548:	b90b      	cbnz	r3, 800954e <_fflush_r+0x1a>
 800954a:	f000 f887 	bl	800965c <__sinit>
 800954e:	4b14      	ldr	r3, [pc, #80]	; (80095a0 <_fflush_r+0x6c>)
 8009550:	429c      	cmp	r4, r3
 8009552:	d11b      	bne.n	800958c <_fflush_r+0x58>
 8009554:	686c      	ldr	r4, [r5, #4]
 8009556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d0ef      	beq.n	800953e <_fflush_r+0xa>
 800955e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009560:	07d0      	lsls	r0, r2, #31
 8009562:	d404      	bmi.n	800956e <_fflush_r+0x3a>
 8009564:	0599      	lsls	r1, r3, #22
 8009566:	d402      	bmi.n	800956e <_fflush_r+0x3a>
 8009568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800956a:	f000 f915 	bl	8009798 <__retarget_lock_acquire_recursive>
 800956e:	4628      	mov	r0, r5
 8009570:	4621      	mov	r1, r4
 8009572:	f7ff ff59 	bl	8009428 <__sflush_r>
 8009576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009578:	07da      	lsls	r2, r3, #31
 800957a:	4605      	mov	r5, r0
 800957c:	d4e0      	bmi.n	8009540 <_fflush_r+0xc>
 800957e:	89a3      	ldrh	r3, [r4, #12]
 8009580:	059b      	lsls	r3, r3, #22
 8009582:	d4dd      	bmi.n	8009540 <_fflush_r+0xc>
 8009584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009586:	f000 f908 	bl	800979a <__retarget_lock_release_recursive>
 800958a:	e7d9      	b.n	8009540 <_fflush_r+0xc>
 800958c:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <_fflush_r+0x70>)
 800958e:	429c      	cmp	r4, r3
 8009590:	d101      	bne.n	8009596 <_fflush_r+0x62>
 8009592:	68ac      	ldr	r4, [r5, #8]
 8009594:	e7df      	b.n	8009556 <_fflush_r+0x22>
 8009596:	4b04      	ldr	r3, [pc, #16]	; (80095a8 <_fflush_r+0x74>)
 8009598:	429c      	cmp	r4, r3
 800959a:	bf08      	it	eq
 800959c:	68ec      	ldreq	r4, [r5, #12]
 800959e:	e7da      	b.n	8009556 <_fflush_r+0x22>
 80095a0:	0800a25c 	.word	0x0800a25c
 80095a4:	0800a27c 	.word	0x0800a27c
 80095a8:	0800a23c 	.word	0x0800a23c

080095ac <std>:
 80095ac:	2300      	movs	r3, #0
 80095ae:	b510      	push	{r4, lr}
 80095b0:	4604      	mov	r4, r0
 80095b2:	e9c0 3300 	strd	r3, r3, [r0]
 80095b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095ba:	6083      	str	r3, [r0, #8]
 80095bc:	8181      	strh	r1, [r0, #12]
 80095be:	6643      	str	r3, [r0, #100]	; 0x64
 80095c0:	81c2      	strh	r2, [r0, #14]
 80095c2:	6183      	str	r3, [r0, #24]
 80095c4:	4619      	mov	r1, r3
 80095c6:	2208      	movs	r2, #8
 80095c8:	305c      	adds	r0, #92	; 0x5c
 80095ca:	f7ff fdd7 	bl	800917c <memset>
 80095ce:	4b05      	ldr	r3, [pc, #20]	; (80095e4 <std+0x38>)
 80095d0:	6263      	str	r3, [r4, #36]	; 0x24
 80095d2:	4b05      	ldr	r3, [pc, #20]	; (80095e8 <std+0x3c>)
 80095d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80095d6:	4b05      	ldr	r3, [pc, #20]	; (80095ec <std+0x40>)
 80095d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095da:	4b05      	ldr	r3, [pc, #20]	; (80095f0 <std+0x44>)
 80095dc:	6224      	str	r4, [r4, #32]
 80095de:	6323      	str	r3, [r4, #48]	; 0x30
 80095e0:	bd10      	pop	{r4, pc}
 80095e2:	bf00      	nop
 80095e4:	08009fb5 	.word	0x08009fb5
 80095e8:	08009fd7 	.word	0x08009fd7
 80095ec:	0800a00f 	.word	0x0800a00f
 80095f0:	0800a033 	.word	0x0800a033

080095f4 <_cleanup_r>:
 80095f4:	4901      	ldr	r1, [pc, #4]	; (80095fc <_cleanup_r+0x8>)
 80095f6:	f000 b8af 	b.w	8009758 <_fwalk_reent>
 80095fa:	bf00      	nop
 80095fc:	08009535 	.word	0x08009535

08009600 <__sfmoreglue>:
 8009600:	b570      	push	{r4, r5, r6, lr}
 8009602:	1e4a      	subs	r2, r1, #1
 8009604:	2568      	movs	r5, #104	; 0x68
 8009606:	4355      	muls	r5, r2
 8009608:	460e      	mov	r6, r1
 800960a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800960e:	f000 f979 	bl	8009904 <_malloc_r>
 8009612:	4604      	mov	r4, r0
 8009614:	b140      	cbz	r0, 8009628 <__sfmoreglue+0x28>
 8009616:	2100      	movs	r1, #0
 8009618:	e9c0 1600 	strd	r1, r6, [r0]
 800961c:	300c      	adds	r0, #12
 800961e:	60a0      	str	r0, [r4, #8]
 8009620:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009624:	f7ff fdaa 	bl	800917c <memset>
 8009628:	4620      	mov	r0, r4
 800962a:	bd70      	pop	{r4, r5, r6, pc}

0800962c <__sfp_lock_acquire>:
 800962c:	4801      	ldr	r0, [pc, #4]	; (8009634 <__sfp_lock_acquire+0x8>)
 800962e:	f000 b8b3 	b.w	8009798 <__retarget_lock_acquire_recursive>
 8009632:	bf00      	nop
 8009634:	20001ba4 	.word	0x20001ba4

08009638 <__sfp_lock_release>:
 8009638:	4801      	ldr	r0, [pc, #4]	; (8009640 <__sfp_lock_release+0x8>)
 800963a:	f000 b8ae 	b.w	800979a <__retarget_lock_release_recursive>
 800963e:	bf00      	nop
 8009640:	20001ba4 	.word	0x20001ba4

08009644 <__sinit_lock_acquire>:
 8009644:	4801      	ldr	r0, [pc, #4]	; (800964c <__sinit_lock_acquire+0x8>)
 8009646:	f000 b8a7 	b.w	8009798 <__retarget_lock_acquire_recursive>
 800964a:	bf00      	nop
 800964c:	20001b9f 	.word	0x20001b9f

08009650 <__sinit_lock_release>:
 8009650:	4801      	ldr	r0, [pc, #4]	; (8009658 <__sinit_lock_release+0x8>)
 8009652:	f000 b8a2 	b.w	800979a <__retarget_lock_release_recursive>
 8009656:	bf00      	nop
 8009658:	20001b9f 	.word	0x20001b9f

0800965c <__sinit>:
 800965c:	b510      	push	{r4, lr}
 800965e:	4604      	mov	r4, r0
 8009660:	f7ff fff0 	bl	8009644 <__sinit_lock_acquire>
 8009664:	69a3      	ldr	r3, [r4, #24]
 8009666:	b11b      	cbz	r3, 8009670 <__sinit+0x14>
 8009668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800966c:	f7ff bff0 	b.w	8009650 <__sinit_lock_release>
 8009670:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009674:	6523      	str	r3, [r4, #80]	; 0x50
 8009676:	4b13      	ldr	r3, [pc, #76]	; (80096c4 <__sinit+0x68>)
 8009678:	4a13      	ldr	r2, [pc, #76]	; (80096c8 <__sinit+0x6c>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	62a2      	str	r2, [r4, #40]	; 0x28
 800967e:	42a3      	cmp	r3, r4
 8009680:	bf04      	itt	eq
 8009682:	2301      	moveq	r3, #1
 8009684:	61a3      	streq	r3, [r4, #24]
 8009686:	4620      	mov	r0, r4
 8009688:	f000 f820 	bl	80096cc <__sfp>
 800968c:	6060      	str	r0, [r4, #4]
 800968e:	4620      	mov	r0, r4
 8009690:	f000 f81c 	bl	80096cc <__sfp>
 8009694:	60a0      	str	r0, [r4, #8]
 8009696:	4620      	mov	r0, r4
 8009698:	f000 f818 	bl	80096cc <__sfp>
 800969c:	2200      	movs	r2, #0
 800969e:	60e0      	str	r0, [r4, #12]
 80096a0:	2104      	movs	r1, #4
 80096a2:	6860      	ldr	r0, [r4, #4]
 80096a4:	f7ff ff82 	bl	80095ac <std>
 80096a8:	68a0      	ldr	r0, [r4, #8]
 80096aa:	2201      	movs	r2, #1
 80096ac:	2109      	movs	r1, #9
 80096ae:	f7ff ff7d 	bl	80095ac <std>
 80096b2:	68e0      	ldr	r0, [r4, #12]
 80096b4:	2202      	movs	r2, #2
 80096b6:	2112      	movs	r1, #18
 80096b8:	f7ff ff78 	bl	80095ac <std>
 80096bc:	2301      	movs	r3, #1
 80096be:	61a3      	str	r3, [r4, #24]
 80096c0:	e7d2      	b.n	8009668 <__sinit+0xc>
 80096c2:	bf00      	nop
 80096c4:	0800a238 	.word	0x0800a238
 80096c8:	080095f5 	.word	0x080095f5

080096cc <__sfp>:
 80096cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ce:	4607      	mov	r7, r0
 80096d0:	f7ff ffac 	bl	800962c <__sfp_lock_acquire>
 80096d4:	4b1e      	ldr	r3, [pc, #120]	; (8009750 <__sfp+0x84>)
 80096d6:	681e      	ldr	r6, [r3, #0]
 80096d8:	69b3      	ldr	r3, [r6, #24]
 80096da:	b913      	cbnz	r3, 80096e2 <__sfp+0x16>
 80096dc:	4630      	mov	r0, r6
 80096de:	f7ff ffbd 	bl	800965c <__sinit>
 80096e2:	3648      	adds	r6, #72	; 0x48
 80096e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	d503      	bpl.n	80096f4 <__sfp+0x28>
 80096ec:	6833      	ldr	r3, [r6, #0]
 80096ee:	b30b      	cbz	r3, 8009734 <__sfp+0x68>
 80096f0:	6836      	ldr	r6, [r6, #0]
 80096f2:	e7f7      	b.n	80096e4 <__sfp+0x18>
 80096f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80096f8:	b9d5      	cbnz	r5, 8009730 <__sfp+0x64>
 80096fa:	4b16      	ldr	r3, [pc, #88]	; (8009754 <__sfp+0x88>)
 80096fc:	60e3      	str	r3, [r4, #12]
 80096fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009702:	6665      	str	r5, [r4, #100]	; 0x64
 8009704:	f000 f847 	bl	8009796 <__retarget_lock_init_recursive>
 8009708:	f7ff ff96 	bl	8009638 <__sfp_lock_release>
 800970c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009714:	6025      	str	r5, [r4, #0]
 8009716:	61a5      	str	r5, [r4, #24]
 8009718:	2208      	movs	r2, #8
 800971a:	4629      	mov	r1, r5
 800971c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009720:	f7ff fd2c 	bl	800917c <memset>
 8009724:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009728:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800972c:	4620      	mov	r0, r4
 800972e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009730:	3468      	adds	r4, #104	; 0x68
 8009732:	e7d9      	b.n	80096e8 <__sfp+0x1c>
 8009734:	2104      	movs	r1, #4
 8009736:	4638      	mov	r0, r7
 8009738:	f7ff ff62 	bl	8009600 <__sfmoreglue>
 800973c:	4604      	mov	r4, r0
 800973e:	6030      	str	r0, [r6, #0]
 8009740:	2800      	cmp	r0, #0
 8009742:	d1d5      	bne.n	80096f0 <__sfp+0x24>
 8009744:	f7ff ff78 	bl	8009638 <__sfp_lock_release>
 8009748:	230c      	movs	r3, #12
 800974a:	603b      	str	r3, [r7, #0]
 800974c:	e7ee      	b.n	800972c <__sfp+0x60>
 800974e:	bf00      	nop
 8009750:	0800a238 	.word	0x0800a238
 8009754:	ffff0001 	.word	0xffff0001

08009758 <_fwalk_reent>:
 8009758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800975c:	4606      	mov	r6, r0
 800975e:	4688      	mov	r8, r1
 8009760:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009764:	2700      	movs	r7, #0
 8009766:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800976a:	f1b9 0901 	subs.w	r9, r9, #1
 800976e:	d505      	bpl.n	800977c <_fwalk_reent+0x24>
 8009770:	6824      	ldr	r4, [r4, #0]
 8009772:	2c00      	cmp	r4, #0
 8009774:	d1f7      	bne.n	8009766 <_fwalk_reent+0xe>
 8009776:	4638      	mov	r0, r7
 8009778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800977c:	89ab      	ldrh	r3, [r5, #12]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d907      	bls.n	8009792 <_fwalk_reent+0x3a>
 8009782:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009786:	3301      	adds	r3, #1
 8009788:	d003      	beq.n	8009792 <_fwalk_reent+0x3a>
 800978a:	4629      	mov	r1, r5
 800978c:	4630      	mov	r0, r6
 800978e:	47c0      	blx	r8
 8009790:	4307      	orrs	r7, r0
 8009792:	3568      	adds	r5, #104	; 0x68
 8009794:	e7e9      	b.n	800976a <_fwalk_reent+0x12>

08009796 <__retarget_lock_init_recursive>:
 8009796:	4770      	bx	lr

08009798 <__retarget_lock_acquire_recursive>:
 8009798:	4770      	bx	lr

0800979a <__retarget_lock_release_recursive>:
 800979a:	4770      	bx	lr

0800979c <__swhatbuf_r>:
 800979c:	b570      	push	{r4, r5, r6, lr}
 800979e:	460e      	mov	r6, r1
 80097a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097a4:	2900      	cmp	r1, #0
 80097a6:	b096      	sub	sp, #88	; 0x58
 80097a8:	4614      	mov	r4, r2
 80097aa:	461d      	mov	r5, r3
 80097ac:	da07      	bge.n	80097be <__swhatbuf_r+0x22>
 80097ae:	2300      	movs	r3, #0
 80097b0:	602b      	str	r3, [r5, #0]
 80097b2:	89b3      	ldrh	r3, [r6, #12]
 80097b4:	061a      	lsls	r2, r3, #24
 80097b6:	d410      	bmi.n	80097da <__swhatbuf_r+0x3e>
 80097b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097bc:	e00e      	b.n	80097dc <__swhatbuf_r+0x40>
 80097be:	466a      	mov	r2, sp
 80097c0:	f000 fc5e 	bl	800a080 <_fstat_r>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	dbf2      	blt.n	80097ae <__swhatbuf_r+0x12>
 80097c8:	9a01      	ldr	r2, [sp, #4]
 80097ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097d2:	425a      	negs	r2, r3
 80097d4:	415a      	adcs	r2, r3
 80097d6:	602a      	str	r2, [r5, #0]
 80097d8:	e7ee      	b.n	80097b8 <__swhatbuf_r+0x1c>
 80097da:	2340      	movs	r3, #64	; 0x40
 80097dc:	2000      	movs	r0, #0
 80097de:	6023      	str	r3, [r4, #0]
 80097e0:	b016      	add	sp, #88	; 0x58
 80097e2:	bd70      	pop	{r4, r5, r6, pc}

080097e4 <__smakebuf_r>:
 80097e4:	898b      	ldrh	r3, [r1, #12]
 80097e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097e8:	079d      	lsls	r5, r3, #30
 80097ea:	4606      	mov	r6, r0
 80097ec:	460c      	mov	r4, r1
 80097ee:	d507      	bpl.n	8009800 <__smakebuf_r+0x1c>
 80097f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	6123      	str	r3, [r4, #16]
 80097f8:	2301      	movs	r3, #1
 80097fa:	6163      	str	r3, [r4, #20]
 80097fc:	b002      	add	sp, #8
 80097fe:	bd70      	pop	{r4, r5, r6, pc}
 8009800:	ab01      	add	r3, sp, #4
 8009802:	466a      	mov	r2, sp
 8009804:	f7ff ffca 	bl	800979c <__swhatbuf_r>
 8009808:	9900      	ldr	r1, [sp, #0]
 800980a:	4605      	mov	r5, r0
 800980c:	4630      	mov	r0, r6
 800980e:	f000 f879 	bl	8009904 <_malloc_r>
 8009812:	b948      	cbnz	r0, 8009828 <__smakebuf_r+0x44>
 8009814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009818:	059a      	lsls	r2, r3, #22
 800981a:	d4ef      	bmi.n	80097fc <__smakebuf_r+0x18>
 800981c:	f023 0303 	bic.w	r3, r3, #3
 8009820:	f043 0302 	orr.w	r3, r3, #2
 8009824:	81a3      	strh	r3, [r4, #12]
 8009826:	e7e3      	b.n	80097f0 <__smakebuf_r+0xc>
 8009828:	4b0d      	ldr	r3, [pc, #52]	; (8009860 <__smakebuf_r+0x7c>)
 800982a:	62b3      	str	r3, [r6, #40]	; 0x28
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	6020      	str	r0, [r4, #0]
 8009830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009834:	81a3      	strh	r3, [r4, #12]
 8009836:	9b00      	ldr	r3, [sp, #0]
 8009838:	6163      	str	r3, [r4, #20]
 800983a:	9b01      	ldr	r3, [sp, #4]
 800983c:	6120      	str	r0, [r4, #16]
 800983e:	b15b      	cbz	r3, 8009858 <__smakebuf_r+0x74>
 8009840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009844:	4630      	mov	r0, r6
 8009846:	f000 fc2d 	bl	800a0a4 <_isatty_r>
 800984a:	b128      	cbz	r0, 8009858 <__smakebuf_r+0x74>
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	f023 0303 	bic.w	r3, r3, #3
 8009852:	f043 0301 	orr.w	r3, r3, #1
 8009856:	81a3      	strh	r3, [r4, #12]
 8009858:	89a0      	ldrh	r0, [r4, #12]
 800985a:	4305      	orrs	r5, r0
 800985c:	81a5      	strh	r5, [r4, #12]
 800985e:	e7cd      	b.n	80097fc <__smakebuf_r+0x18>
 8009860:	080095f5 	.word	0x080095f5

08009864 <_free_r>:
 8009864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009866:	2900      	cmp	r1, #0
 8009868:	d048      	beq.n	80098fc <_free_r+0x98>
 800986a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800986e:	9001      	str	r0, [sp, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	f1a1 0404 	sub.w	r4, r1, #4
 8009876:	bfb8      	it	lt
 8009878:	18e4      	addlt	r4, r4, r3
 800987a:	f000 fc35 	bl	800a0e8 <__malloc_lock>
 800987e:	4a20      	ldr	r2, [pc, #128]	; (8009900 <_free_r+0x9c>)
 8009880:	9801      	ldr	r0, [sp, #4]
 8009882:	6813      	ldr	r3, [r2, #0]
 8009884:	4615      	mov	r5, r2
 8009886:	b933      	cbnz	r3, 8009896 <_free_r+0x32>
 8009888:	6063      	str	r3, [r4, #4]
 800988a:	6014      	str	r4, [r2, #0]
 800988c:	b003      	add	sp, #12
 800988e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009892:	f000 bc2f 	b.w	800a0f4 <__malloc_unlock>
 8009896:	42a3      	cmp	r3, r4
 8009898:	d90b      	bls.n	80098b2 <_free_r+0x4e>
 800989a:	6821      	ldr	r1, [r4, #0]
 800989c:	1862      	adds	r2, r4, r1
 800989e:	4293      	cmp	r3, r2
 80098a0:	bf04      	itt	eq
 80098a2:	681a      	ldreq	r2, [r3, #0]
 80098a4:	685b      	ldreq	r3, [r3, #4]
 80098a6:	6063      	str	r3, [r4, #4]
 80098a8:	bf04      	itt	eq
 80098aa:	1852      	addeq	r2, r2, r1
 80098ac:	6022      	streq	r2, [r4, #0]
 80098ae:	602c      	str	r4, [r5, #0]
 80098b0:	e7ec      	b.n	800988c <_free_r+0x28>
 80098b2:	461a      	mov	r2, r3
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	b10b      	cbz	r3, 80098bc <_free_r+0x58>
 80098b8:	42a3      	cmp	r3, r4
 80098ba:	d9fa      	bls.n	80098b2 <_free_r+0x4e>
 80098bc:	6811      	ldr	r1, [r2, #0]
 80098be:	1855      	adds	r5, r2, r1
 80098c0:	42a5      	cmp	r5, r4
 80098c2:	d10b      	bne.n	80098dc <_free_r+0x78>
 80098c4:	6824      	ldr	r4, [r4, #0]
 80098c6:	4421      	add	r1, r4
 80098c8:	1854      	adds	r4, r2, r1
 80098ca:	42a3      	cmp	r3, r4
 80098cc:	6011      	str	r1, [r2, #0]
 80098ce:	d1dd      	bne.n	800988c <_free_r+0x28>
 80098d0:	681c      	ldr	r4, [r3, #0]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	6053      	str	r3, [r2, #4]
 80098d6:	4421      	add	r1, r4
 80098d8:	6011      	str	r1, [r2, #0]
 80098da:	e7d7      	b.n	800988c <_free_r+0x28>
 80098dc:	d902      	bls.n	80098e4 <_free_r+0x80>
 80098de:	230c      	movs	r3, #12
 80098e0:	6003      	str	r3, [r0, #0]
 80098e2:	e7d3      	b.n	800988c <_free_r+0x28>
 80098e4:	6825      	ldr	r5, [r4, #0]
 80098e6:	1961      	adds	r1, r4, r5
 80098e8:	428b      	cmp	r3, r1
 80098ea:	bf04      	itt	eq
 80098ec:	6819      	ldreq	r1, [r3, #0]
 80098ee:	685b      	ldreq	r3, [r3, #4]
 80098f0:	6063      	str	r3, [r4, #4]
 80098f2:	bf04      	itt	eq
 80098f4:	1949      	addeq	r1, r1, r5
 80098f6:	6021      	streq	r1, [r4, #0]
 80098f8:	6054      	str	r4, [r2, #4]
 80098fa:	e7c7      	b.n	800988c <_free_r+0x28>
 80098fc:	b003      	add	sp, #12
 80098fe:	bd30      	pop	{r4, r5, pc}
 8009900:	20001008 	.word	0x20001008

08009904 <_malloc_r>:
 8009904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009906:	1ccd      	adds	r5, r1, #3
 8009908:	f025 0503 	bic.w	r5, r5, #3
 800990c:	3508      	adds	r5, #8
 800990e:	2d0c      	cmp	r5, #12
 8009910:	bf38      	it	cc
 8009912:	250c      	movcc	r5, #12
 8009914:	2d00      	cmp	r5, #0
 8009916:	4606      	mov	r6, r0
 8009918:	db01      	blt.n	800991e <_malloc_r+0x1a>
 800991a:	42a9      	cmp	r1, r5
 800991c:	d903      	bls.n	8009926 <_malloc_r+0x22>
 800991e:	230c      	movs	r3, #12
 8009920:	6033      	str	r3, [r6, #0]
 8009922:	2000      	movs	r0, #0
 8009924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009926:	f000 fbdf 	bl	800a0e8 <__malloc_lock>
 800992a:	4921      	ldr	r1, [pc, #132]	; (80099b0 <_malloc_r+0xac>)
 800992c:	680a      	ldr	r2, [r1, #0]
 800992e:	4614      	mov	r4, r2
 8009930:	b99c      	cbnz	r4, 800995a <_malloc_r+0x56>
 8009932:	4f20      	ldr	r7, [pc, #128]	; (80099b4 <_malloc_r+0xb0>)
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	b923      	cbnz	r3, 8009942 <_malloc_r+0x3e>
 8009938:	4621      	mov	r1, r4
 800993a:	4630      	mov	r0, r6
 800993c:	f000 fb2a 	bl	8009f94 <_sbrk_r>
 8009940:	6038      	str	r0, [r7, #0]
 8009942:	4629      	mov	r1, r5
 8009944:	4630      	mov	r0, r6
 8009946:	f000 fb25 	bl	8009f94 <_sbrk_r>
 800994a:	1c43      	adds	r3, r0, #1
 800994c:	d123      	bne.n	8009996 <_malloc_r+0x92>
 800994e:	230c      	movs	r3, #12
 8009950:	6033      	str	r3, [r6, #0]
 8009952:	4630      	mov	r0, r6
 8009954:	f000 fbce 	bl	800a0f4 <__malloc_unlock>
 8009958:	e7e3      	b.n	8009922 <_malloc_r+0x1e>
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	1b5b      	subs	r3, r3, r5
 800995e:	d417      	bmi.n	8009990 <_malloc_r+0x8c>
 8009960:	2b0b      	cmp	r3, #11
 8009962:	d903      	bls.n	800996c <_malloc_r+0x68>
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	441c      	add	r4, r3
 8009968:	6025      	str	r5, [r4, #0]
 800996a:	e004      	b.n	8009976 <_malloc_r+0x72>
 800996c:	6863      	ldr	r3, [r4, #4]
 800996e:	42a2      	cmp	r2, r4
 8009970:	bf0c      	ite	eq
 8009972:	600b      	streq	r3, [r1, #0]
 8009974:	6053      	strne	r3, [r2, #4]
 8009976:	4630      	mov	r0, r6
 8009978:	f000 fbbc 	bl	800a0f4 <__malloc_unlock>
 800997c:	f104 000b 	add.w	r0, r4, #11
 8009980:	1d23      	adds	r3, r4, #4
 8009982:	f020 0007 	bic.w	r0, r0, #7
 8009986:	1ac2      	subs	r2, r0, r3
 8009988:	d0cc      	beq.n	8009924 <_malloc_r+0x20>
 800998a:	1a1b      	subs	r3, r3, r0
 800998c:	50a3      	str	r3, [r4, r2]
 800998e:	e7c9      	b.n	8009924 <_malloc_r+0x20>
 8009990:	4622      	mov	r2, r4
 8009992:	6864      	ldr	r4, [r4, #4]
 8009994:	e7cc      	b.n	8009930 <_malloc_r+0x2c>
 8009996:	1cc4      	adds	r4, r0, #3
 8009998:	f024 0403 	bic.w	r4, r4, #3
 800999c:	42a0      	cmp	r0, r4
 800999e:	d0e3      	beq.n	8009968 <_malloc_r+0x64>
 80099a0:	1a21      	subs	r1, r4, r0
 80099a2:	4630      	mov	r0, r6
 80099a4:	f000 faf6 	bl	8009f94 <_sbrk_r>
 80099a8:	3001      	adds	r0, #1
 80099aa:	d1dd      	bne.n	8009968 <_malloc_r+0x64>
 80099ac:	e7cf      	b.n	800994e <_malloc_r+0x4a>
 80099ae:	bf00      	nop
 80099b0:	20001008 	.word	0x20001008
 80099b4:	2000100c 	.word	0x2000100c

080099b8 <__sfputc_r>:
 80099b8:	6893      	ldr	r3, [r2, #8]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	2b00      	cmp	r3, #0
 80099be:	b410      	push	{r4}
 80099c0:	6093      	str	r3, [r2, #8]
 80099c2:	da08      	bge.n	80099d6 <__sfputc_r+0x1e>
 80099c4:	6994      	ldr	r4, [r2, #24]
 80099c6:	42a3      	cmp	r3, r4
 80099c8:	db01      	blt.n	80099ce <__sfputc_r+0x16>
 80099ca:	290a      	cmp	r1, #10
 80099cc:	d103      	bne.n	80099d6 <__sfputc_r+0x1e>
 80099ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099d2:	f7ff bc69 	b.w	80092a8 <__swbuf_r>
 80099d6:	6813      	ldr	r3, [r2, #0]
 80099d8:	1c58      	adds	r0, r3, #1
 80099da:	6010      	str	r0, [r2, #0]
 80099dc:	7019      	strb	r1, [r3, #0]
 80099de:	4608      	mov	r0, r1
 80099e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <__sfputs_r>:
 80099e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e8:	4606      	mov	r6, r0
 80099ea:	460f      	mov	r7, r1
 80099ec:	4614      	mov	r4, r2
 80099ee:	18d5      	adds	r5, r2, r3
 80099f0:	42ac      	cmp	r4, r5
 80099f2:	d101      	bne.n	80099f8 <__sfputs_r+0x12>
 80099f4:	2000      	movs	r0, #0
 80099f6:	e007      	b.n	8009a08 <__sfputs_r+0x22>
 80099f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099fc:	463a      	mov	r2, r7
 80099fe:	4630      	mov	r0, r6
 8009a00:	f7ff ffda 	bl	80099b8 <__sfputc_r>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	d1f3      	bne.n	80099f0 <__sfputs_r+0xa>
 8009a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a0c <_vfiprintf_r>:
 8009a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a10:	460d      	mov	r5, r1
 8009a12:	b09d      	sub	sp, #116	; 0x74
 8009a14:	4614      	mov	r4, r2
 8009a16:	4698      	mov	r8, r3
 8009a18:	4606      	mov	r6, r0
 8009a1a:	b118      	cbz	r0, 8009a24 <_vfiprintf_r+0x18>
 8009a1c:	6983      	ldr	r3, [r0, #24]
 8009a1e:	b90b      	cbnz	r3, 8009a24 <_vfiprintf_r+0x18>
 8009a20:	f7ff fe1c 	bl	800965c <__sinit>
 8009a24:	4b89      	ldr	r3, [pc, #548]	; (8009c4c <_vfiprintf_r+0x240>)
 8009a26:	429d      	cmp	r5, r3
 8009a28:	d11b      	bne.n	8009a62 <_vfiprintf_r+0x56>
 8009a2a:	6875      	ldr	r5, [r6, #4]
 8009a2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a2e:	07d9      	lsls	r1, r3, #31
 8009a30:	d405      	bmi.n	8009a3e <_vfiprintf_r+0x32>
 8009a32:	89ab      	ldrh	r3, [r5, #12]
 8009a34:	059a      	lsls	r2, r3, #22
 8009a36:	d402      	bmi.n	8009a3e <_vfiprintf_r+0x32>
 8009a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a3a:	f7ff fead 	bl	8009798 <__retarget_lock_acquire_recursive>
 8009a3e:	89ab      	ldrh	r3, [r5, #12]
 8009a40:	071b      	lsls	r3, r3, #28
 8009a42:	d501      	bpl.n	8009a48 <_vfiprintf_r+0x3c>
 8009a44:	692b      	ldr	r3, [r5, #16]
 8009a46:	b9eb      	cbnz	r3, 8009a84 <_vfiprintf_r+0x78>
 8009a48:	4629      	mov	r1, r5
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f7ff fc7e 	bl	800934c <__swsetup_r>
 8009a50:	b1c0      	cbz	r0, 8009a84 <_vfiprintf_r+0x78>
 8009a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a54:	07dc      	lsls	r4, r3, #31
 8009a56:	d50e      	bpl.n	8009a76 <_vfiprintf_r+0x6a>
 8009a58:	f04f 30ff 	mov.w	r0, #4294967295
 8009a5c:	b01d      	add	sp, #116	; 0x74
 8009a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a62:	4b7b      	ldr	r3, [pc, #492]	; (8009c50 <_vfiprintf_r+0x244>)
 8009a64:	429d      	cmp	r5, r3
 8009a66:	d101      	bne.n	8009a6c <_vfiprintf_r+0x60>
 8009a68:	68b5      	ldr	r5, [r6, #8]
 8009a6a:	e7df      	b.n	8009a2c <_vfiprintf_r+0x20>
 8009a6c:	4b79      	ldr	r3, [pc, #484]	; (8009c54 <_vfiprintf_r+0x248>)
 8009a6e:	429d      	cmp	r5, r3
 8009a70:	bf08      	it	eq
 8009a72:	68f5      	ldreq	r5, [r6, #12]
 8009a74:	e7da      	b.n	8009a2c <_vfiprintf_r+0x20>
 8009a76:	89ab      	ldrh	r3, [r5, #12]
 8009a78:	0598      	lsls	r0, r3, #22
 8009a7a:	d4ed      	bmi.n	8009a58 <_vfiprintf_r+0x4c>
 8009a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a7e:	f7ff fe8c 	bl	800979a <__retarget_lock_release_recursive>
 8009a82:	e7e9      	b.n	8009a58 <_vfiprintf_r+0x4c>
 8009a84:	2300      	movs	r3, #0
 8009a86:	9309      	str	r3, [sp, #36]	; 0x24
 8009a88:	2320      	movs	r3, #32
 8009a8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a92:	2330      	movs	r3, #48	; 0x30
 8009a94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c58 <_vfiprintf_r+0x24c>
 8009a98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a9c:	f04f 0901 	mov.w	r9, #1
 8009aa0:	4623      	mov	r3, r4
 8009aa2:	469a      	mov	sl, r3
 8009aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aa8:	b10a      	cbz	r2, 8009aae <_vfiprintf_r+0xa2>
 8009aaa:	2a25      	cmp	r2, #37	; 0x25
 8009aac:	d1f9      	bne.n	8009aa2 <_vfiprintf_r+0x96>
 8009aae:	ebba 0b04 	subs.w	fp, sl, r4
 8009ab2:	d00b      	beq.n	8009acc <_vfiprintf_r+0xc0>
 8009ab4:	465b      	mov	r3, fp
 8009ab6:	4622      	mov	r2, r4
 8009ab8:	4629      	mov	r1, r5
 8009aba:	4630      	mov	r0, r6
 8009abc:	f7ff ff93 	bl	80099e6 <__sfputs_r>
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	f000 80aa 	beq.w	8009c1a <_vfiprintf_r+0x20e>
 8009ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ac8:	445a      	add	r2, fp
 8009aca:	9209      	str	r2, [sp, #36]	; 0x24
 8009acc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f000 80a2 	beq.w	8009c1a <_vfiprintf_r+0x20e>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8009adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ae0:	f10a 0a01 	add.w	sl, sl, #1
 8009ae4:	9304      	str	r3, [sp, #16]
 8009ae6:	9307      	str	r3, [sp, #28]
 8009ae8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009aec:	931a      	str	r3, [sp, #104]	; 0x68
 8009aee:	4654      	mov	r4, sl
 8009af0:	2205      	movs	r2, #5
 8009af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009af6:	4858      	ldr	r0, [pc, #352]	; (8009c58 <_vfiprintf_r+0x24c>)
 8009af8:	f7f6 fb6a 	bl	80001d0 <memchr>
 8009afc:	9a04      	ldr	r2, [sp, #16]
 8009afe:	b9d8      	cbnz	r0, 8009b38 <_vfiprintf_r+0x12c>
 8009b00:	06d1      	lsls	r1, r2, #27
 8009b02:	bf44      	itt	mi
 8009b04:	2320      	movmi	r3, #32
 8009b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b0a:	0713      	lsls	r3, r2, #28
 8009b0c:	bf44      	itt	mi
 8009b0e:	232b      	movmi	r3, #43	; 0x2b
 8009b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b14:	f89a 3000 	ldrb.w	r3, [sl]
 8009b18:	2b2a      	cmp	r3, #42	; 0x2a
 8009b1a:	d015      	beq.n	8009b48 <_vfiprintf_r+0x13c>
 8009b1c:	9a07      	ldr	r2, [sp, #28]
 8009b1e:	4654      	mov	r4, sl
 8009b20:	2000      	movs	r0, #0
 8009b22:	f04f 0c0a 	mov.w	ip, #10
 8009b26:	4621      	mov	r1, r4
 8009b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b2c:	3b30      	subs	r3, #48	; 0x30
 8009b2e:	2b09      	cmp	r3, #9
 8009b30:	d94e      	bls.n	8009bd0 <_vfiprintf_r+0x1c4>
 8009b32:	b1b0      	cbz	r0, 8009b62 <_vfiprintf_r+0x156>
 8009b34:	9207      	str	r2, [sp, #28]
 8009b36:	e014      	b.n	8009b62 <_vfiprintf_r+0x156>
 8009b38:	eba0 0308 	sub.w	r3, r0, r8
 8009b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8009b40:	4313      	orrs	r3, r2
 8009b42:	9304      	str	r3, [sp, #16]
 8009b44:	46a2      	mov	sl, r4
 8009b46:	e7d2      	b.n	8009aee <_vfiprintf_r+0xe2>
 8009b48:	9b03      	ldr	r3, [sp, #12]
 8009b4a:	1d19      	adds	r1, r3, #4
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	9103      	str	r1, [sp, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	bfbb      	ittet	lt
 8009b54:	425b      	neglt	r3, r3
 8009b56:	f042 0202 	orrlt.w	r2, r2, #2
 8009b5a:	9307      	strge	r3, [sp, #28]
 8009b5c:	9307      	strlt	r3, [sp, #28]
 8009b5e:	bfb8      	it	lt
 8009b60:	9204      	strlt	r2, [sp, #16]
 8009b62:	7823      	ldrb	r3, [r4, #0]
 8009b64:	2b2e      	cmp	r3, #46	; 0x2e
 8009b66:	d10c      	bne.n	8009b82 <_vfiprintf_r+0x176>
 8009b68:	7863      	ldrb	r3, [r4, #1]
 8009b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b6c:	d135      	bne.n	8009bda <_vfiprintf_r+0x1ce>
 8009b6e:	9b03      	ldr	r3, [sp, #12]
 8009b70:	1d1a      	adds	r2, r3, #4
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	9203      	str	r2, [sp, #12]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	bfb8      	it	lt
 8009b7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b7e:	3402      	adds	r4, #2
 8009b80:	9305      	str	r3, [sp, #20]
 8009b82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c68 <_vfiprintf_r+0x25c>
 8009b86:	7821      	ldrb	r1, [r4, #0]
 8009b88:	2203      	movs	r2, #3
 8009b8a:	4650      	mov	r0, sl
 8009b8c:	f7f6 fb20 	bl	80001d0 <memchr>
 8009b90:	b140      	cbz	r0, 8009ba4 <_vfiprintf_r+0x198>
 8009b92:	2340      	movs	r3, #64	; 0x40
 8009b94:	eba0 000a 	sub.w	r0, r0, sl
 8009b98:	fa03 f000 	lsl.w	r0, r3, r0
 8009b9c:	9b04      	ldr	r3, [sp, #16]
 8009b9e:	4303      	orrs	r3, r0
 8009ba0:	3401      	adds	r4, #1
 8009ba2:	9304      	str	r3, [sp, #16]
 8009ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba8:	482c      	ldr	r0, [pc, #176]	; (8009c5c <_vfiprintf_r+0x250>)
 8009baa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bae:	2206      	movs	r2, #6
 8009bb0:	f7f6 fb0e 	bl	80001d0 <memchr>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d03f      	beq.n	8009c38 <_vfiprintf_r+0x22c>
 8009bb8:	4b29      	ldr	r3, [pc, #164]	; (8009c60 <_vfiprintf_r+0x254>)
 8009bba:	bb1b      	cbnz	r3, 8009c04 <_vfiprintf_r+0x1f8>
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	3307      	adds	r3, #7
 8009bc0:	f023 0307 	bic.w	r3, r3, #7
 8009bc4:	3308      	adds	r3, #8
 8009bc6:	9303      	str	r3, [sp, #12]
 8009bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bca:	443b      	add	r3, r7
 8009bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8009bce:	e767      	b.n	8009aa0 <_vfiprintf_r+0x94>
 8009bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	2001      	movs	r0, #1
 8009bd8:	e7a5      	b.n	8009b26 <_vfiprintf_r+0x11a>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	3401      	adds	r4, #1
 8009bde:	9305      	str	r3, [sp, #20]
 8009be0:	4619      	mov	r1, r3
 8009be2:	f04f 0c0a 	mov.w	ip, #10
 8009be6:	4620      	mov	r0, r4
 8009be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bec:	3a30      	subs	r2, #48	; 0x30
 8009bee:	2a09      	cmp	r2, #9
 8009bf0:	d903      	bls.n	8009bfa <_vfiprintf_r+0x1ee>
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d0c5      	beq.n	8009b82 <_vfiprintf_r+0x176>
 8009bf6:	9105      	str	r1, [sp, #20]
 8009bf8:	e7c3      	b.n	8009b82 <_vfiprintf_r+0x176>
 8009bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bfe:	4604      	mov	r4, r0
 8009c00:	2301      	movs	r3, #1
 8009c02:	e7f0      	b.n	8009be6 <_vfiprintf_r+0x1da>
 8009c04:	ab03      	add	r3, sp, #12
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	462a      	mov	r2, r5
 8009c0a:	4b16      	ldr	r3, [pc, #88]	; (8009c64 <_vfiprintf_r+0x258>)
 8009c0c:	a904      	add	r1, sp, #16
 8009c0e:	4630      	mov	r0, r6
 8009c10:	f3af 8000 	nop.w
 8009c14:	4607      	mov	r7, r0
 8009c16:	1c78      	adds	r0, r7, #1
 8009c18:	d1d6      	bne.n	8009bc8 <_vfiprintf_r+0x1bc>
 8009c1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c1c:	07d9      	lsls	r1, r3, #31
 8009c1e:	d405      	bmi.n	8009c2c <_vfiprintf_r+0x220>
 8009c20:	89ab      	ldrh	r3, [r5, #12]
 8009c22:	059a      	lsls	r2, r3, #22
 8009c24:	d402      	bmi.n	8009c2c <_vfiprintf_r+0x220>
 8009c26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c28:	f7ff fdb7 	bl	800979a <__retarget_lock_release_recursive>
 8009c2c:	89ab      	ldrh	r3, [r5, #12]
 8009c2e:	065b      	lsls	r3, r3, #25
 8009c30:	f53f af12 	bmi.w	8009a58 <_vfiprintf_r+0x4c>
 8009c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c36:	e711      	b.n	8009a5c <_vfiprintf_r+0x50>
 8009c38:	ab03      	add	r3, sp, #12
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	462a      	mov	r2, r5
 8009c3e:	4b09      	ldr	r3, [pc, #36]	; (8009c64 <_vfiprintf_r+0x258>)
 8009c40:	a904      	add	r1, sp, #16
 8009c42:	4630      	mov	r0, r6
 8009c44:	f000 f880 	bl	8009d48 <_printf_i>
 8009c48:	e7e4      	b.n	8009c14 <_vfiprintf_r+0x208>
 8009c4a:	bf00      	nop
 8009c4c:	0800a25c 	.word	0x0800a25c
 8009c50:	0800a27c 	.word	0x0800a27c
 8009c54:	0800a23c 	.word	0x0800a23c
 8009c58:	0800a29c 	.word	0x0800a29c
 8009c5c:	0800a2a6 	.word	0x0800a2a6
 8009c60:	00000000 	.word	0x00000000
 8009c64:	080099e7 	.word	0x080099e7
 8009c68:	0800a2a2 	.word	0x0800a2a2

08009c6c <_printf_common>:
 8009c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c70:	4616      	mov	r6, r2
 8009c72:	4699      	mov	r9, r3
 8009c74:	688a      	ldr	r2, [r1, #8]
 8009c76:	690b      	ldr	r3, [r1, #16]
 8009c78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	bfb8      	it	lt
 8009c80:	4613      	movlt	r3, r2
 8009c82:	6033      	str	r3, [r6, #0]
 8009c84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c88:	4607      	mov	r7, r0
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	b10a      	cbz	r2, 8009c92 <_printf_common+0x26>
 8009c8e:	3301      	adds	r3, #1
 8009c90:	6033      	str	r3, [r6, #0]
 8009c92:	6823      	ldr	r3, [r4, #0]
 8009c94:	0699      	lsls	r1, r3, #26
 8009c96:	bf42      	ittt	mi
 8009c98:	6833      	ldrmi	r3, [r6, #0]
 8009c9a:	3302      	addmi	r3, #2
 8009c9c:	6033      	strmi	r3, [r6, #0]
 8009c9e:	6825      	ldr	r5, [r4, #0]
 8009ca0:	f015 0506 	ands.w	r5, r5, #6
 8009ca4:	d106      	bne.n	8009cb4 <_printf_common+0x48>
 8009ca6:	f104 0a19 	add.w	sl, r4, #25
 8009caa:	68e3      	ldr	r3, [r4, #12]
 8009cac:	6832      	ldr	r2, [r6, #0]
 8009cae:	1a9b      	subs	r3, r3, r2
 8009cb0:	42ab      	cmp	r3, r5
 8009cb2:	dc26      	bgt.n	8009d02 <_printf_common+0x96>
 8009cb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009cb8:	1e13      	subs	r3, r2, #0
 8009cba:	6822      	ldr	r2, [r4, #0]
 8009cbc:	bf18      	it	ne
 8009cbe:	2301      	movne	r3, #1
 8009cc0:	0692      	lsls	r2, r2, #26
 8009cc2:	d42b      	bmi.n	8009d1c <_printf_common+0xb0>
 8009cc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cc8:	4649      	mov	r1, r9
 8009cca:	4638      	mov	r0, r7
 8009ccc:	47c0      	blx	r8
 8009cce:	3001      	adds	r0, #1
 8009cd0:	d01e      	beq.n	8009d10 <_printf_common+0xa4>
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	68e5      	ldr	r5, [r4, #12]
 8009cd6:	6832      	ldr	r2, [r6, #0]
 8009cd8:	f003 0306 	and.w	r3, r3, #6
 8009cdc:	2b04      	cmp	r3, #4
 8009cde:	bf08      	it	eq
 8009ce0:	1aad      	subeq	r5, r5, r2
 8009ce2:	68a3      	ldr	r3, [r4, #8]
 8009ce4:	6922      	ldr	r2, [r4, #16]
 8009ce6:	bf0c      	ite	eq
 8009ce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cec:	2500      	movne	r5, #0
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	bfc4      	itt	gt
 8009cf2:	1a9b      	subgt	r3, r3, r2
 8009cf4:	18ed      	addgt	r5, r5, r3
 8009cf6:	2600      	movs	r6, #0
 8009cf8:	341a      	adds	r4, #26
 8009cfa:	42b5      	cmp	r5, r6
 8009cfc:	d11a      	bne.n	8009d34 <_printf_common+0xc8>
 8009cfe:	2000      	movs	r0, #0
 8009d00:	e008      	b.n	8009d14 <_printf_common+0xa8>
 8009d02:	2301      	movs	r3, #1
 8009d04:	4652      	mov	r2, sl
 8009d06:	4649      	mov	r1, r9
 8009d08:	4638      	mov	r0, r7
 8009d0a:	47c0      	blx	r8
 8009d0c:	3001      	adds	r0, #1
 8009d0e:	d103      	bne.n	8009d18 <_printf_common+0xac>
 8009d10:	f04f 30ff 	mov.w	r0, #4294967295
 8009d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d18:	3501      	adds	r5, #1
 8009d1a:	e7c6      	b.n	8009caa <_printf_common+0x3e>
 8009d1c:	18e1      	adds	r1, r4, r3
 8009d1e:	1c5a      	adds	r2, r3, #1
 8009d20:	2030      	movs	r0, #48	; 0x30
 8009d22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d26:	4422      	add	r2, r4
 8009d28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d30:	3302      	adds	r3, #2
 8009d32:	e7c7      	b.n	8009cc4 <_printf_common+0x58>
 8009d34:	2301      	movs	r3, #1
 8009d36:	4622      	mov	r2, r4
 8009d38:	4649      	mov	r1, r9
 8009d3a:	4638      	mov	r0, r7
 8009d3c:	47c0      	blx	r8
 8009d3e:	3001      	adds	r0, #1
 8009d40:	d0e6      	beq.n	8009d10 <_printf_common+0xa4>
 8009d42:	3601      	adds	r6, #1
 8009d44:	e7d9      	b.n	8009cfa <_printf_common+0x8e>
	...

08009d48 <_printf_i>:
 8009d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d4c:	460c      	mov	r4, r1
 8009d4e:	4691      	mov	r9, r2
 8009d50:	7e27      	ldrb	r7, [r4, #24]
 8009d52:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009d54:	2f78      	cmp	r7, #120	; 0x78
 8009d56:	4680      	mov	r8, r0
 8009d58:	469a      	mov	sl, r3
 8009d5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d5e:	d807      	bhi.n	8009d70 <_printf_i+0x28>
 8009d60:	2f62      	cmp	r7, #98	; 0x62
 8009d62:	d80a      	bhi.n	8009d7a <_printf_i+0x32>
 8009d64:	2f00      	cmp	r7, #0
 8009d66:	f000 80d8 	beq.w	8009f1a <_printf_i+0x1d2>
 8009d6a:	2f58      	cmp	r7, #88	; 0x58
 8009d6c:	f000 80a3 	beq.w	8009eb6 <_printf_i+0x16e>
 8009d70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d78:	e03a      	b.n	8009df0 <_printf_i+0xa8>
 8009d7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d7e:	2b15      	cmp	r3, #21
 8009d80:	d8f6      	bhi.n	8009d70 <_printf_i+0x28>
 8009d82:	a001      	add	r0, pc, #4	; (adr r0, 8009d88 <_printf_i+0x40>)
 8009d84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009d88:	08009de1 	.word	0x08009de1
 8009d8c:	08009df5 	.word	0x08009df5
 8009d90:	08009d71 	.word	0x08009d71
 8009d94:	08009d71 	.word	0x08009d71
 8009d98:	08009d71 	.word	0x08009d71
 8009d9c:	08009d71 	.word	0x08009d71
 8009da0:	08009df5 	.word	0x08009df5
 8009da4:	08009d71 	.word	0x08009d71
 8009da8:	08009d71 	.word	0x08009d71
 8009dac:	08009d71 	.word	0x08009d71
 8009db0:	08009d71 	.word	0x08009d71
 8009db4:	08009f01 	.word	0x08009f01
 8009db8:	08009e25 	.word	0x08009e25
 8009dbc:	08009ee3 	.word	0x08009ee3
 8009dc0:	08009d71 	.word	0x08009d71
 8009dc4:	08009d71 	.word	0x08009d71
 8009dc8:	08009f23 	.word	0x08009f23
 8009dcc:	08009d71 	.word	0x08009d71
 8009dd0:	08009e25 	.word	0x08009e25
 8009dd4:	08009d71 	.word	0x08009d71
 8009dd8:	08009d71 	.word	0x08009d71
 8009ddc:	08009eeb 	.word	0x08009eeb
 8009de0:	680b      	ldr	r3, [r1, #0]
 8009de2:	1d1a      	adds	r2, r3, #4
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	600a      	str	r2, [r1, #0]
 8009de8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009dec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009df0:	2301      	movs	r3, #1
 8009df2:	e0a3      	b.n	8009f3c <_printf_i+0x1f4>
 8009df4:	6825      	ldr	r5, [r4, #0]
 8009df6:	6808      	ldr	r0, [r1, #0]
 8009df8:	062e      	lsls	r6, r5, #24
 8009dfa:	f100 0304 	add.w	r3, r0, #4
 8009dfe:	d50a      	bpl.n	8009e16 <_printf_i+0xce>
 8009e00:	6805      	ldr	r5, [r0, #0]
 8009e02:	600b      	str	r3, [r1, #0]
 8009e04:	2d00      	cmp	r5, #0
 8009e06:	da03      	bge.n	8009e10 <_printf_i+0xc8>
 8009e08:	232d      	movs	r3, #45	; 0x2d
 8009e0a:	426d      	negs	r5, r5
 8009e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e10:	485e      	ldr	r0, [pc, #376]	; (8009f8c <_printf_i+0x244>)
 8009e12:	230a      	movs	r3, #10
 8009e14:	e019      	b.n	8009e4a <_printf_i+0x102>
 8009e16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009e1a:	6805      	ldr	r5, [r0, #0]
 8009e1c:	600b      	str	r3, [r1, #0]
 8009e1e:	bf18      	it	ne
 8009e20:	b22d      	sxthne	r5, r5
 8009e22:	e7ef      	b.n	8009e04 <_printf_i+0xbc>
 8009e24:	680b      	ldr	r3, [r1, #0]
 8009e26:	6825      	ldr	r5, [r4, #0]
 8009e28:	1d18      	adds	r0, r3, #4
 8009e2a:	6008      	str	r0, [r1, #0]
 8009e2c:	0628      	lsls	r0, r5, #24
 8009e2e:	d501      	bpl.n	8009e34 <_printf_i+0xec>
 8009e30:	681d      	ldr	r5, [r3, #0]
 8009e32:	e002      	b.n	8009e3a <_printf_i+0xf2>
 8009e34:	0669      	lsls	r1, r5, #25
 8009e36:	d5fb      	bpl.n	8009e30 <_printf_i+0xe8>
 8009e38:	881d      	ldrh	r5, [r3, #0]
 8009e3a:	4854      	ldr	r0, [pc, #336]	; (8009f8c <_printf_i+0x244>)
 8009e3c:	2f6f      	cmp	r7, #111	; 0x6f
 8009e3e:	bf0c      	ite	eq
 8009e40:	2308      	moveq	r3, #8
 8009e42:	230a      	movne	r3, #10
 8009e44:	2100      	movs	r1, #0
 8009e46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e4a:	6866      	ldr	r6, [r4, #4]
 8009e4c:	60a6      	str	r6, [r4, #8]
 8009e4e:	2e00      	cmp	r6, #0
 8009e50:	bfa2      	ittt	ge
 8009e52:	6821      	ldrge	r1, [r4, #0]
 8009e54:	f021 0104 	bicge.w	r1, r1, #4
 8009e58:	6021      	strge	r1, [r4, #0]
 8009e5a:	b90d      	cbnz	r5, 8009e60 <_printf_i+0x118>
 8009e5c:	2e00      	cmp	r6, #0
 8009e5e:	d04d      	beq.n	8009efc <_printf_i+0x1b4>
 8009e60:	4616      	mov	r6, r2
 8009e62:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e66:	fb03 5711 	mls	r7, r3, r1, r5
 8009e6a:	5dc7      	ldrb	r7, [r0, r7]
 8009e6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e70:	462f      	mov	r7, r5
 8009e72:	42bb      	cmp	r3, r7
 8009e74:	460d      	mov	r5, r1
 8009e76:	d9f4      	bls.n	8009e62 <_printf_i+0x11a>
 8009e78:	2b08      	cmp	r3, #8
 8009e7a:	d10b      	bne.n	8009e94 <_printf_i+0x14c>
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	07df      	lsls	r7, r3, #31
 8009e80:	d508      	bpl.n	8009e94 <_printf_i+0x14c>
 8009e82:	6923      	ldr	r3, [r4, #16]
 8009e84:	6861      	ldr	r1, [r4, #4]
 8009e86:	4299      	cmp	r1, r3
 8009e88:	bfde      	ittt	le
 8009e8a:	2330      	movle	r3, #48	; 0x30
 8009e8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e94:	1b92      	subs	r2, r2, r6
 8009e96:	6122      	str	r2, [r4, #16]
 8009e98:	f8cd a000 	str.w	sl, [sp]
 8009e9c:	464b      	mov	r3, r9
 8009e9e:	aa03      	add	r2, sp, #12
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	f7ff fee2 	bl	8009c6c <_printf_common>
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	d14c      	bne.n	8009f46 <_printf_i+0x1fe>
 8009eac:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb0:	b004      	add	sp, #16
 8009eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb6:	4835      	ldr	r0, [pc, #212]	; (8009f8c <_printf_i+0x244>)
 8009eb8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	680e      	ldr	r6, [r1, #0]
 8009ec0:	061f      	lsls	r7, r3, #24
 8009ec2:	f856 5b04 	ldr.w	r5, [r6], #4
 8009ec6:	600e      	str	r6, [r1, #0]
 8009ec8:	d514      	bpl.n	8009ef4 <_printf_i+0x1ac>
 8009eca:	07d9      	lsls	r1, r3, #31
 8009ecc:	bf44      	itt	mi
 8009ece:	f043 0320 	orrmi.w	r3, r3, #32
 8009ed2:	6023      	strmi	r3, [r4, #0]
 8009ed4:	b91d      	cbnz	r5, 8009ede <_printf_i+0x196>
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	f023 0320 	bic.w	r3, r3, #32
 8009edc:	6023      	str	r3, [r4, #0]
 8009ede:	2310      	movs	r3, #16
 8009ee0:	e7b0      	b.n	8009e44 <_printf_i+0xfc>
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	f043 0320 	orr.w	r3, r3, #32
 8009ee8:	6023      	str	r3, [r4, #0]
 8009eea:	2378      	movs	r3, #120	; 0x78
 8009eec:	4828      	ldr	r0, [pc, #160]	; (8009f90 <_printf_i+0x248>)
 8009eee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ef2:	e7e3      	b.n	8009ebc <_printf_i+0x174>
 8009ef4:	065e      	lsls	r6, r3, #25
 8009ef6:	bf48      	it	mi
 8009ef8:	b2ad      	uxthmi	r5, r5
 8009efa:	e7e6      	b.n	8009eca <_printf_i+0x182>
 8009efc:	4616      	mov	r6, r2
 8009efe:	e7bb      	b.n	8009e78 <_printf_i+0x130>
 8009f00:	680b      	ldr	r3, [r1, #0]
 8009f02:	6826      	ldr	r6, [r4, #0]
 8009f04:	6960      	ldr	r0, [r4, #20]
 8009f06:	1d1d      	adds	r5, r3, #4
 8009f08:	600d      	str	r5, [r1, #0]
 8009f0a:	0635      	lsls	r5, r6, #24
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	d501      	bpl.n	8009f14 <_printf_i+0x1cc>
 8009f10:	6018      	str	r0, [r3, #0]
 8009f12:	e002      	b.n	8009f1a <_printf_i+0x1d2>
 8009f14:	0671      	lsls	r1, r6, #25
 8009f16:	d5fb      	bpl.n	8009f10 <_printf_i+0x1c8>
 8009f18:	8018      	strh	r0, [r3, #0]
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	6123      	str	r3, [r4, #16]
 8009f1e:	4616      	mov	r6, r2
 8009f20:	e7ba      	b.n	8009e98 <_printf_i+0x150>
 8009f22:	680b      	ldr	r3, [r1, #0]
 8009f24:	1d1a      	adds	r2, r3, #4
 8009f26:	600a      	str	r2, [r1, #0]
 8009f28:	681e      	ldr	r6, [r3, #0]
 8009f2a:	6862      	ldr	r2, [r4, #4]
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	4630      	mov	r0, r6
 8009f30:	f7f6 f94e 	bl	80001d0 <memchr>
 8009f34:	b108      	cbz	r0, 8009f3a <_printf_i+0x1f2>
 8009f36:	1b80      	subs	r0, r0, r6
 8009f38:	6060      	str	r0, [r4, #4]
 8009f3a:	6863      	ldr	r3, [r4, #4]
 8009f3c:	6123      	str	r3, [r4, #16]
 8009f3e:	2300      	movs	r3, #0
 8009f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f44:	e7a8      	b.n	8009e98 <_printf_i+0x150>
 8009f46:	6923      	ldr	r3, [r4, #16]
 8009f48:	4632      	mov	r2, r6
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	4640      	mov	r0, r8
 8009f4e:	47d0      	blx	sl
 8009f50:	3001      	adds	r0, #1
 8009f52:	d0ab      	beq.n	8009eac <_printf_i+0x164>
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	079b      	lsls	r3, r3, #30
 8009f58:	d413      	bmi.n	8009f82 <_printf_i+0x23a>
 8009f5a:	68e0      	ldr	r0, [r4, #12]
 8009f5c:	9b03      	ldr	r3, [sp, #12]
 8009f5e:	4298      	cmp	r0, r3
 8009f60:	bfb8      	it	lt
 8009f62:	4618      	movlt	r0, r3
 8009f64:	e7a4      	b.n	8009eb0 <_printf_i+0x168>
 8009f66:	2301      	movs	r3, #1
 8009f68:	4632      	mov	r2, r6
 8009f6a:	4649      	mov	r1, r9
 8009f6c:	4640      	mov	r0, r8
 8009f6e:	47d0      	blx	sl
 8009f70:	3001      	adds	r0, #1
 8009f72:	d09b      	beq.n	8009eac <_printf_i+0x164>
 8009f74:	3501      	adds	r5, #1
 8009f76:	68e3      	ldr	r3, [r4, #12]
 8009f78:	9903      	ldr	r1, [sp, #12]
 8009f7a:	1a5b      	subs	r3, r3, r1
 8009f7c:	42ab      	cmp	r3, r5
 8009f7e:	dcf2      	bgt.n	8009f66 <_printf_i+0x21e>
 8009f80:	e7eb      	b.n	8009f5a <_printf_i+0x212>
 8009f82:	2500      	movs	r5, #0
 8009f84:	f104 0619 	add.w	r6, r4, #25
 8009f88:	e7f5      	b.n	8009f76 <_printf_i+0x22e>
 8009f8a:	bf00      	nop
 8009f8c:	0800a2ad 	.word	0x0800a2ad
 8009f90:	0800a2be 	.word	0x0800a2be

08009f94 <_sbrk_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	4d06      	ldr	r5, [pc, #24]	; (8009fb0 <_sbrk_r+0x1c>)
 8009f98:	2300      	movs	r3, #0
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	4608      	mov	r0, r1
 8009f9e:	602b      	str	r3, [r5, #0]
 8009fa0:	f7f8 fa7a 	bl	8002498 <_sbrk>
 8009fa4:	1c43      	adds	r3, r0, #1
 8009fa6:	d102      	bne.n	8009fae <_sbrk_r+0x1a>
 8009fa8:	682b      	ldr	r3, [r5, #0]
 8009faa:	b103      	cbz	r3, 8009fae <_sbrk_r+0x1a>
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	bd38      	pop	{r3, r4, r5, pc}
 8009fb0:	20001ba8 	.word	0x20001ba8

08009fb4 <__sread>:
 8009fb4:	b510      	push	{r4, lr}
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fbc:	f000 f8a0 	bl	800a100 <_read_r>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	bfab      	itete	ge
 8009fc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8009fc8:	181b      	addge	r3, r3, r0
 8009fca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009fce:	bfac      	ite	ge
 8009fd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009fd2:	81a3      	strhlt	r3, [r4, #12]
 8009fd4:	bd10      	pop	{r4, pc}

08009fd6 <__swrite>:
 8009fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fda:	461f      	mov	r7, r3
 8009fdc:	898b      	ldrh	r3, [r1, #12]
 8009fde:	05db      	lsls	r3, r3, #23
 8009fe0:	4605      	mov	r5, r0
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	4616      	mov	r6, r2
 8009fe6:	d505      	bpl.n	8009ff4 <__swrite+0x1e>
 8009fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fec:	2302      	movs	r3, #2
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f000 f868 	bl	800a0c4 <_lseek_r>
 8009ff4:	89a3      	ldrh	r3, [r4, #12]
 8009ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ffa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ffe:	81a3      	strh	r3, [r4, #12]
 800a000:	4632      	mov	r2, r6
 800a002:	463b      	mov	r3, r7
 800a004:	4628      	mov	r0, r5
 800a006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a00a:	f000 b817 	b.w	800a03c <_write_r>

0800a00e <__sseek>:
 800a00e:	b510      	push	{r4, lr}
 800a010:	460c      	mov	r4, r1
 800a012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a016:	f000 f855 	bl	800a0c4 <_lseek_r>
 800a01a:	1c43      	adds	r3, r0, #1
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	bf15      	itete	ne
 800a020:	6560      	strne	r0, [r4, #84]	; 0x54
 800a022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a02a:	81a3      	strheq	r3, [r4, #12]
 800a02c:	bf18      	it	ne
 800a02e:	81a3      	strhne	r3, [r4, #12]
 800a030:	bd10      	pop	{r4, pc}

0800a032 <__sclose>:
 800a032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a036:	f000 b813 	b.w	800a060 <_close_r>
	...

0800a03c <_write_r>:
 800a03c:	b538      	push	{r3, r4, r5, lr}
 800a03e:	4d07      	ldr	r5, [pc, #28]	; (800a05c <_write_r+0x20>)
 800a040:	4604      	mov	r4, r0
 800a042:	4608      	mov	r0, r1
 800a044:	4611      	mov	r1, r2
 800a046:	2200      	movs	r2, #0
 800a048:	602a      	str	r2, [r5, #0]
 800a04a:	461a      	mov	r2, r3
 800a04c:	f7f8 f9d3 	bl	80023f6 <_write>
 800a050:	1c43      	adds	r3, r0, #1
 800a052:	d102      	bne.n	800a05a <_write_r+0x1e>
 800a054:	682b      	ldr	r3, [r5, #0]
 800a056:	b103      	cbz	r3, 800a05a <_write_r+0x1e>
 800a058:	6023      	str	r3, [r4, #0]
 800a05a:	bd38      	pop	{r3, r4, r5, pc}
 800a05c:	20001ba8 	.word	0x20001ba8

0800a060 <_close_r>:
 800a060:	b538      	push	{r3, r4, r5, lr}
 800a062:	4d06      	ldr	r5, [pc, #24]	; (800a07c <_close_r+0x1c>)
 800a064:	2300      	movs	r3, #0
 800a066:	4604      	mov	r4, r0
 800a068:	4608      	mov	r0, r1
 800a06a:	602b      	str	r3, [r5, #0]
 800a06c:	f7f8 f9df 	bl	800242e <_close>
 800a070:	1c43      	adds	r3, r0, #1
 800a072:	d102      	bne.n	800a07a <_close_r+0x1a>
 800a074:	682b      	ldr	r3, [r5, #0]
 800a076:	b103      	cbz	r3, 800a07a <_close_r+0x1a>
 800a078:	6023      	str	r3, [r4, #0]
 800a07a:	bd38      	pop	{r3, r4, r5, pc}
 800a07c:	20001ba8 	.word	0x20001ba8

0800a080 <_fstat_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	4d07      	ldr	r5, [pc, #28]	; (800a0a0 <_fstat_r+0x20>)
 800a084:	2300      	movs	r3, #0
 800a086:	4604      	mov	r4, r0
 800a088:	4608      	mov	r0, r1
 800a08a:	4611      	mov	r1, r2
 800a08c:	602b      	str	r3, [r5, #0]
 800a08e:	f7f8 f9da 	bl	8002446 <_fstat>
 800a092:	1c43      	adds	r3, r0, #1
 800a094:	d102      	bne.n	800a09c <_fstat_r+0x1c>
 800a096:	682b      	ldr	r3, [r5, #0]
 800a098:	b103      	cbz	r3, 800a09c <_fstat_r+0x1c>
 800a09a:	6023      	str	r3, [r4, #0]
 800a09c:	bd38      	pop	{r3, r4, r5, pc}
 800a09e:	bf00      	nop
 800a0a0:	20001ba8 	.word	0x20001ba8

0800a0a4 <_isatty_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	4d06      	ldr	r5, [pc, #24]	; (800a0c0 <_isatty_r+0x1c>)
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	4608      	mov	r0, r1
 800a0ae:	602b      	str	r3, [r5, #0]
 800a0b0:	f7f8 f9d9 	bl	8002466 <_isatty>
 800a0b4:	1c43      	adds	r3, r0, #1
 800a0b6:	d102      	bne.n	800a0be <_isatty_r+0x1a>
 800a0b8:	682b      	ldr	r3, [r5, #0]
 800a0ba:	b103      	cbz	r3, 800a0be <_isatty_r+0x1a>
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	bd38      	pop	{r3, r4, r5, pc}
 800a0c0:	20001ba8 	.word	0x20001ba8

0800a0c4 <_lseek_r>:
 800a0c4:	b538      	push	{r3, r4, r5, lr}
 800a0c6:	4d07      	ldr	r5, [pc, #28]	; (800a0e4 <_lseek_r+0x20>)
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	4608      	mov	r0, r1
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	602a      	str	r2, [r5, #0]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	f7f8 f9d2 	bl	800247c <_lseek>
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	d102      	bne.n	800a0e2 <_lseek_r+0x1e>
 800a0dc:	682b      	ldr	r3, [r5, #0]
 800a0de:	b103      	cbz	r3, 800a0e2 <_lseek_r+0x1e>
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
 800a0e4:	20001ba8 	.word	0x20001ba8

0800a0e8 <__malloc_lock>:
 800a0e8:	4801      	ldr	r0, [pc, #4]	; (800a0f0 <__malloc_lock+0x8>)
 800a0ea:	f7ff bb55 	b.w	8009798 <__retarget_lock_acquire_recursive>
 800a0ee:	bf00      	nop
 800a0f0:	20001ba0 	.word	0x20001ba0

0800a0f4 <__malloc_unlock>:
 800a0f4:	4801      	ldr	r0, [pc, #4]	; (800a0fc <__malloc_unlock+0x8>)
 800a0f6:	f7ff bb50 	b.w	800979a <__retarget_lock_release_recursive>
 800a0fa:	bf00      	nop
 800a0fc:	20001ba0 	.word	0x20001ba0

0800a100 <_read_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	4d07      	ldr	r5, [pc, #28]	; (800a120 <_read_r+0x20>)
 800a104:	4604      	mov	r4, r0
 800a106:	4608      	mov	r0, r1
 800a108:	4611      	mov	r1, r2
 800a10a:	2200      	movs	r2, #0
 800a10c:	602a      	str	r2, [r5, #0]
 800a10e:	461a      	mov	r2, r3
 800a110:	f7f8 f954 	bl	80023bc <_read>
 800a114:	1c43      	adds	r3, r0, #1
 800a116:	d102      	bne.n	800a11e <_read_r+0x1e>
 800a118:	682b      	ldr	r3, [r5, #0]
 800a11a:	b103      	cbz	r3, 800a11e <_read_r+0x1e>
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	bd38      	pop	{r3, r4, r5, pc}
 800a120:	20001ba8 	.word	0x20001ba8

0800a124 <_init>:
 800a124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a126:	bf00      	nop
 800a128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a12a:	bc08      	pop	{r3}
 800a12c:	469e      	mov	lr, r3
 800a12e:	4770      	bx	lr

0800a130 <_fini>:
 800a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a132:	bf00      	nop
 800a134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a136:	bc08      	pop	{r3}
 800a138:	469e      	mov	lr, r3
 800a13a:	4770      	bx	lr
